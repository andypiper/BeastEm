0001   0000             
0002   0000             
0003   0000             ;
0004   0000             ; Data store
0005   0000             ;
0006   0000                                 .MODULE  main
0007   0000                                 .INCLUDE "ports.asm"
0001+  0000             ;
0002+  0000             ; Port definintions
0003+  0000             ;
0004+  0000             ;
0005+  0000             
0006+  0000             CARRIAGE_RETURN     .EQU  0Dh
0007+  0000             NEWLINE             .EQU  0Ah
0008+  0000             
0009+  0000             ;=================================== UART ============================================
0010+  0000             UART_TX_RX          .EQU    020h    ; Read: receiver buffer, Write: transmitter buffer
0011+  0000             UART_INT_ENABLE     .EQU    021h    ; Interrupt enable register
0012+  0000             UART_INT_ID         .EQU    022h    ; Read: Interrupt identification register
0013+  0000             UART_FIFO_CTRL      .EQU    022h    ; Write: FIFO Control register
0014+  0000             UART_LINE_CTRL      .EQU    023h    ; Line control register
0015+  0000             UART_MODEM_CTRL     .EQU    024h    ; Modem control
0016+  0000             UART_LINE_STATUS    .EQU    025h    ; Line status
0017+  0000             UART_MODEM_STATUS   .EQU    026h    ; Modem status
0018+  0000             UART_SCRATCH        .EQU    027h    ; Scratch register
0019+  0000             
0020+  0000             ;==================================== PIO ============================================
0021+  0000             PIO_A_DATA          .EQU  010h
0022+  0000             PIO_A_CTRL          .EQU  012h
0023+  0000             
0024+  0000             PIO_B_DATA          .EQU  011h
0025+  0000             PIO_B_CTRL          .EQU  013h
0026+  0000             
0027+  0000             PIO_MODE_0          .EQU  00Fh      ; Mode 0: All outputs
0028+  0000             PIO_MODE_1          .EQU  04fh      ; Mode 1: All inputs
0029+  0000             PIO_MODE_2          .EQU  080h      ; Mode 2 (Port A only): Bi-directional
0030+  0000             PIO_MODE_3          .EQU  0CFh      ; Mode 3: Per-pin I/O on the given port - write an additional word with bits set (1) for input, reset (0) for output on the matching pin.
0031+  0000             
0032+  0000             PIO_SET_INTERRUPT   .EQU  007h      ; Set interrupt control world. By itself, this wil disable interrupts on the given port. OR with the following constants to change this
0033+  0000             PIO_ENABLE_INT      .EQU  080h      ; Enable interrupts on the given port, when OR'd with the PIO_SET_INTERRUPT control word.
0034+  0000             PIO_INT_MASK        .EQU  010h      ; When OR'd with the PIO_SET_INTERRUPT control word, the following word will enable interrupts for pins where the matching bit is zero
0035+  0000             
0036+  0000             ;================================== AUDIO ============================================
0037+  0000             ; Constants for Audio output
0038+  0000             AUDIO_PIO           .EQU  1         ; Audio on PIO (rev. 0.1 boards)
0039+  0000             AUDIO_UART          .EQU  2         ; Audio on UART (rev. 0.2 boards)
0040+  0000             
0041+  0000             AUDIO_VERSION       .EQU  AUDIO_UART
0042+  0000             
0043+  0000~            #IF AUDIO_VERSION = AUDIO_PIO
0044+  0000~            PORT_B_IOMASK       .EQU  0EFh      ; All inputs, apart from bit 4 (audio out)
0045+  0000~            AUDIO_MASK          .EQU  010h      ; Bitmask for audio output on Port B. The bit is set for the output pin.
0046+  0000~            AUDIO_PORT          .EQU  PIO_B_DATA
0047+  0000~            
0048+  0000             #ELSE
0049+  0000             PORT_B_IOMASK       .EQU  0FFh      ; All inputs
0050+  0000             AUDIO_MASK          .EQU  008h      ; Bitmask for audio output on UART Out 2. The bit is set for the output pin
0051+  0000             AUDIO_PORT          .EQU  UART_MODEM_CTRL
0052+  0000             
0053+  0000             #ENDIF
0054+  0000             
0055+  0000             
0056+  0000             ;=================================== MEMORY PAGING ===================================
0057+  0000             IO_MEM_0            .EQU  070h      ; Page 0: 0000h - 3fffh
0058+  0000             IO_MEM_1            .EQU  071h      ; Page 1: 4000h - 7fffh
0059+  0000             IO_MEM_2            .EQU  072h      ; Page 2: 8000h - bfffh
0060+  0000             IO_MEM_3            .EQU  073h      ; Page 3: c000h - ffffh
0061+  0000             
0062+  0000             IO_MEM_CTRL         .EQU  074h      ; Paging enable register
0063+  0000             IO_MEM_ENABLE       .EQU  1
0064+  0000             IO_MEM_DISABLE      .EQU  0 
0065+  0000             
0066+  0000             
0067+  0000             ;====================================== I2C DEVICES ===================================
0068+  0000             I2C_DATA_BIT            .equ    7
0069+  0000             I2C_CLK_BIT             .equ    6
0070+  0000             
0071+  0000             I2C_DATA_MASK           .equ    1 << I2C_DATA_BIT
0072+  0000             I2C_CLK_MASK            .equ    1 << I2C_CLK_BIT
0073+  0000             
0074+  0000             ; Display
0075+  0000             DL_ADDRESS              .EQU    050h     ; Left  Matrix controller I2C address
0076+  0000             DR_ADDRESS              .EQU    053h     ; Right Matrix controller I2C address
0077+  0000             
0078+  0000             DISP_REG_CRWL           .EQU    0FEh     ; Command Register write lock
0079+  0000             DISP_UNLOCK             .EQU    0C5h     ; Unlock command
0080+  0000             
0081+  0000             DISP_DEFAULT_BRIGHTNESS .EQU    080h     ; Default brightness
0082+  0000             DISP_DIMMED             .EQU    018h     ; Dimmed
0083+  0000             
0084+  0000             ; RTC
0085+  0000             RTC_ADDRESS             .EQU    06fh
0086+  0000             
0087+  0000             RTC_REG_SEC             .EQU    000h    ; Also has oscillator enable bit in B7, 1 = run
0088+  0000             RTC_REG_MIN             .EQU    001h
0089+  0000             RTC_REG_HOUR            .EQU    002h    ; B6: 1 = 12hr/ 0 = 24hr clock (r/w) 
0090+  0000                                                     ;        If 12 hr clock, B5: 1 = PM/ 0 = AM. B4: hour tens. Otherwise B5-4: hour tens, B3-0: hour units
0091+  0000             RTC_REG_WKDAY           .EQU    003h    ; Oscillator status bit in B5, 1 = enabled and running. 
0092+  0000                                                     ;   B4: 1 = power was lost, write 0 to clear (timestamp registers are set)
0093+  0000                                                     ;   B3: 1 = enable external battery supply (VBAT)
0094+  0000                                                     ;   B2-0: Weekday, from 1 to 7 
0095+  0000             RTC_REG_DATE            .EQU    004h    ; BCD Date (1 to 31)
0096+  0000             RTC_REG_MTH             .EQU    005h    ; B5: 1 = Leap year (read only). B4: month tens, B3-0: month units  (Month is 1 to 12)
0097+  0000             RTC_REG_YEAR            .EQU    006h    ; BCD Year
0098+  0000             
0099+  0000             RTC_REG_CTRL            .EQU    007h    ; B7: If Square wave and Alarm 0 and Alarm 1 are disabled, sets Output Pin level
0100+  0000                                                     ;   B6: SQWEN, 1 = Enable square wave on Output Pin, Alarms disabled
0101+  0000                                                     ;   B5, B4: Alarm 1, 0 Enable. 1 = Alarm is enabled
0102+  0000                                                     ;   B3: 1 = Use external oscillator
0103+  0000                                                     ;   B2: CRSTRIM, 1 = Coarse trim mode, Output pin is 64Hz
0104+  0000                                                     ;   B1-0: If SQWEN = 1 & CRSTRIM = 0, sets Output pin freq. 00 -> 1Hz, 01 -> 4.096kHz, 10 -> 8.192kHz, 11 -> 32.768kHz
0105+  0000             RTC_REG_TRIM            .EQU    008h    ; Trim, initially 0. B7: Sign, 1=Add, 0=Subtract clock cycles.  
0106+  0000                                                     ;   B6-0: Trim amount/2. Applied 1 every minute in fine trim, 128 times a second in coarse trim mode. 0 = disable trim0008   0000                                 .INCLUDE "shared_data.asm"
0001+  0000             ;
0002+  0000             ; Shared data - common state data for routines
0003+  0000             ;
0004+  0000             ;
0005+  0000             
0006+  0000             
0007+  0000             ; I2C/Port B routines
0008+  0000             port_b_mode         .equ    0FF00h
0009+  0000             port_b_dir          .equ    0FF01h
0010+  0000             port_b_data         .equ    0FF02h
0011+  0000             
0012+  0000             ; Boot 
0013+  0000             boot_mode           .equ    0FF03h          ; Zero = normal boot, non-zero = delete pressed
0014+  0000             temp_byte           .equ    0FF04h
0015+  0000             
0016+  0000             ; Display functions
0017+  0000             display_address     .equ    0FF05h          ; byte
0018+  0000             
0019+  0000             ;
0020+  0000             ; Stuff
0021+  0000             timer               .equ    0FF06h          ; Word
0022+  0000             
0023+  0000             ; General I/O
0024+  0000             ;
0025+  0000             ; This MUST start with keyboard_state, and will all be reset to zero when io_init is called
0026+  0000             ;
0027+  0000             _key_state_size     .EQU    8               ; 8 key rollover
0028+  0000             
0029+  0000             keyboard_state      .EQU    0FF08h          ; state buffer - 8 bytes containing raw key codes for keys currently pressed
0030+  0000             keyboard_pos        .EQU    0FF10h          ; Internal state
0031+  0000             key_shift_state     .EQU    0FF12h          ; Holds state of shift and control keys in bits 0 and 1 respectively
0032+  0000             
0033+  0000             _input_buffer_size  .EQU    16
0034+  0000             input_buffer        .EQU    0FF13h          ; 16 byte input buffer. Note wraparound is handled by bitmasks, so don't change this length
0035+  0000             input_pos           .EQU    0FF23h          ; Next read position in input buffer
0036+  0000             input_free          .EQU    0FF24h          ; Next write position in input buffer
0037+  0000             input_size          .EQU    0FF25h          ; Bytes occupied in the input buffer
0038+  0000             
0039+  0000             io_data_end         .EQU    0FF25h          ; Byte after IO data block, used to reset values to zero
0040+  0000             
0041+  0000             
0042+  0000             scratch_pad         .EQU    0FF28h          ; 26 byte scratch area used for composing display output (eg. rtc time display etc.)
0043+  0000             
0044+  0000             temp_data           .EQU    0FF42h          ; 8 byte general data area
0045+  0000             
0046+  0000             menu_start          .EQU    0FF4Ah          ; Start address of current menu definition
0047+  0000             menu_item_start     .EQU    0FF4Ch          ; Start address of first item in menu
0048+  0000             menu_count          .EQU    0FF4Eh          ; Number of items in menu
0049+  0000             menu_index          .EQU    0FF4Fh          ; Current menu item
0050+  0000             menu_timer          .EQU    0FF50h          ; Time since menu was displayed
0051+  0000             menu_enabled        .EQU    0FF51h          ; D0 - D7 -> Menu item 1 to 8 set enabled (1) or disabled (0) 
0052+  0000             
0053+  0000             cursor_pos          .EQU    0FF52h          ; Position of cursor for prompt
0054+  0000             
0055+  0000             ;
0056+  0000             ; Panic codes
0057+  0000             ;
0058+  0000             PANIC_0001          .EQU    0F001h
0059+  0000             PANIC_0002          .EQU    0F002h
0060+  0000             PANIC_0003          .EQU    0F003h
0061+  0000             PANIC_0004          .EQU    0F004h0009   0000             
0010   0000             
0011   0000                                 .org 0h
0012   0000 F3                              DI                              ; Disable Z80 interrupts
0013   0001 31 00 00                        LD      SP, 0h                  ; Set SP
0014   0004             
0015   0004                                 .INCLUDE    "boot_seq.asm"
0001+  0004             ;
0002+  0004             ; Boot sequence
0003+  0004             ;
0004+  0004             ;
0005+  0004                                 .MODULE  boot_sequence
0006+  0004             ;
0007+  0004             ; TODO: PIO setup should happen after the initial beep. Do it here for now, until new boards are available.
0008+  0004             ;
0009+  0004 3E 07                           LD      A, PIO_SET_INTERRUPT    ; Ports A/B Interrupt control - no interrupts
0010+  0006 D3 12                           OUT     (PIO_A_CTRL), A
0011+  0008 D3 13                           OUT     (PIO_B_CTRL), A
0012+  000A             
0013+  000A 3E CF                           LD      A, PIO_MODE_3           ; Port A Mode 3 
0014+  000C D3 12                           OUT     (PIO_A_CTRL), A
0015+  000E 3E FF                           LD      A, 0FFh                 ; All inputs
0016+  0010 D3 12                           OUT     (PIO_A_CTRL), A
0017+  0012             
0018+  0012             
0019+  0012 3E CF                           LD      A, PIO_MODE_3           ; Port B mode 3
0020+  0014 D3 13                           OUT     (PIO_B_CTRL), A
0021+  0016 3E FF                           LD      A, PORT_B_IOMASK        ; All inputs, apart from bit 4 (audio out)
0022+  0018 D3 13                           OUT     (PIO_B_CTRL), A
0023+  001A             
0024+  001A 21 80 0E                        LD     HL, 0E80h                ; Approx middle C
0025+  001D             ;
0026+  001D             ; Beep to show we've booted
0027+  001D             ;
0028+  001D DB 24       _boot_beep          IN      A, (AUDIO_PORT)         ; Check the state of the audio port,,
0029+  001F 57                              LD      D, A                 
0030+  0020 1E 64                           LD      E, 100                  ; 100 cycles = 1/3 of a sec
0031+  0022 7A          _beep_loop          LD      A, D
0032+  0023 EE 08                           XOR     AUDIO_MASK
0033+  0025 D3 24                           OUT     (AUDIO_PORT), A
0034+  0027             
0035+  0027 4D                              LD      C, L
0036+  0028 44          _beep_delay0        LD      B, H
0037+  0029 10 FE       _beep_delay1        DJNZ    _beep_delay1            ; 13 * (count-2) + 8
0038+  002B 0D                              DEC     C
0039+  002C 20 FA                           JR      NZ, _beep_delay0
0040+  002E             
0041+  002E 7A                              LD      A, D
0042+  002F D3 24                           OUT     (AUDIO_PORT), A
0043+  0031             
0044+  0031 4D                              LD      C, L
0045+  0032 44          _beep_delay2        LD      B, H
0046+  0033 10 FE       _beep_delay3        DJNZ    _beep_delay3            ; 13 * (count-2) + 8
0047+  0035 0D                              DEC     C
0048+  0036 20 FA                           JR      NZ, _beep_delay2      
0049+  0038             
0050+  0038 1D                              DEC     E
0051+  0039 20 E7                           JR      NZ, _beep_loop
0052+  003B             
0053+  003B             ;
0054+  003B             ; Now initialise the UART
0055+  003B             ;
0056+  003B             ;
0057+  003B 01 26 00                        LD      BC, UART_19200 | UART_MODE_AUTO
0058+  003E 3E 80                           LD      A, 80h                      ; Divisor Latch Setting Mode
0059+  0040 D3 23                           OUT     (UART_LINE_CTRL), A         ;  - entered by writing 1 to bit 7 of LCR
0060+  0042 00                              NOP
0061+  0043 00                              NOP
0062+  0044 79                              LD      A, C
0063+  0045 D3 20                           OUT     (UART_TX_RX), A
0064+  0047 00                              NOP
0065+  0048 00                              NOP
0066+  0049 AF                              XOR     A
0067+  004A D3 21                           OUT     (UART_INT_ENABLE), A
0068+  004C 00                              NOP
0069+  004D 00                              NOP
0070+  004E             
0071+  004E 3E 03                           LD      A, UART_8N1                 ; Set 8N1 and exit divisor latch setting mode
0072+  0050 D3 23                           OUT     (UART_LINE_CTRL), A
0073+  0052             
0074+  0052 3E 07                           LD      A, 07h                      ; Enable and clear FIFO registers
0075+  0054 D3 22                           OUT     (UART_FIFO_CTRL), A
0076+  0056             
0077+  0056 78                              LD      A, B
0078+  0057 A7                              AND     A
0079+  0058 28 02                           JR      Z, _no_flowcontrol
0080+  005A             
0081+  005A D3 24                           OUT     (UART_MODEM_CTRL), A
0082+  005C             
0083+  005C 00          _no_flowcontrol     NOP
0084+  005D 00                              NOP
0085+  005E             
0086+  005E             ;
0087+  005E             ; Send 'OK' to UART
0088+  005E             ;
0089+  005E             ;
0090+  005E 01 50 C3                        LD      BC, UART_TIMEOUT
0091+  0061 DB 25       _check_ready1       IN      A, (UART_LINE_STATUS)
0092+  0063 CB 6F                           BIT     5, A
0093+  0065 20 0C                           JR      NZ, _uart_ready1            ; Bit 5 is set when the UART is ready
0094+  0067 0B                              DEC     BC
0095+  0068 78                              LD      A, B
0096+  0069 B1                              OR      C
0097+  006A C2 61 00                        JP      NZ, _check_ready1
0098+  006D             
0099+  006D 21 C0 07                        LD      HL, 07C0h                   ; #C1
0100+  0070 C3 1D 00                        JP      _boot_beep                  ; Beep again if we can't get ready on the UART
0101+  0073             
0102+  0073 3E 4F       _uart_ready1        LD      A, 'O'
0103+  0075 D3 20                           OUT     (UART_TX_RX), A
0104+  0077                                 
0105+  0077             
0106+  0077 01 50 C3                        LD      BC, UART_TIMEOUT
0107+  007A DB 25       _check_ready2       IN      A, (UART_LINE_STATUS)
0108+  007C CB 6F                           BIT     5, A
0109+  007E 20 0C                           JR      NZ, _uart_ready2             ; Bit 5 is set when the UART is ready
0110+  0080 0B                              DEC     BC
0111+  0081 78                              LD      A, B
0112+  0082 B1                              OR      C
0113+  0083 C2 7A 00                        JP      NZ, _check_ready2
0114+  0086             
0115+  0086 21 C0 07                        LD      HL, 07C0h                   ; #C1
0116+  0089 C3 1D 00                        JP      _boot_beep                  ; Beep again if we can't get ready on the UART
0117+  008C             
0118+  008C 3E 4B       _uart_ready2        LD      A, 'K'
0119+  008E D3 20                           OUT     (UART_TX_RX), A
0120+  0090             
0121+  0090             
0122+  0090 01 50 C3                        LD      BC, UART_TIMEOUT
0123+  0093 DB 25       _check_ready3       IN      A, (UART_LINE_STATUS)
0124+  0095 CB 6F                           BIT     5, A
0125+  0097 20 0C                           JR      NZ, _uart_ready3             ; Bit 5 is set when the UART is ready
0126+  0099 0B                              DEC     BC
0127+  009A 78                              LD      A, B
0128+  009B B1                              OR      C
0129+  009C C2 93 00                        JP      NZ, _check_ready3
0130+  009F             
0131+  009F 21 C0 07                        LD      HL, 07C0h                   ; #C1
0132+  00A2 C3 1D 00                        JP      _boot_beep                  ; Beep again if we can't get ready on the UART
0133+  00A5             
0134+  00A5             
0135+  00A5 3E 0D       _uart_ready3        LD      A, CARRIAGE_RETURN
0136+  00A7 D3 20                           OUT     (UART_TX_RX), A
0137+  00A9             
0138+  00A9             
0139+  00A9 01 50 C3                        LD      BC, UART_TIMEOUT
0140+  00AC DB 25       _check_ready4       IN      A, (UART_LINE_STATUS)
0141+  00AE CB 6F                           BIT     5, A
0142+  00B0 20 0C                           JR      NZ, _uart_ready4             ; Bit 5 is set when the UART is ready
0143+  00B2 0B                              DEC     BC
0144+  00B3 78                              LD      A, B
0145+  00B4 B1                              OR      C
0146+  00B5 C2 AC 00                        JP      NZ, _check_ready4
0147+  00B8             
0148+  00B8 21 C0 07                        LD      HL, 07C0h                   ; #C1
0149+  00BB C3 1D 00                        JP      _boot_beep                  ; Beep again if we can't get ready on the UART
0150+  00BE             
0151+  00BE             
0152+  00BE 3E 0A       _uart_ready4        LD      A, NEWLINE
0153+  00C0 D3 20                           OUT     (UART_TX_RX), A
0154+  00C2             
0155+  00C2 00                              NOP
0156+  00C3 00                              NOP
0157+  00C4             
0158+  00C4 01 50 C3                        LD      BC, UART_TIMEOUT            ; Make sure the character is sent before we re-initialise the UART later
0159+  00C7 DB 25       _check_ready5       IN      A, (UART_LINE_STATUS)
0160+  00C9 CB 6F                           BIT     5, A
0161+  00CB 20 06                           JR      NZ, _uart_ready5            ; Bit 5 is set when the UART is ready
0162+  00CD 0B                              DEC     BC
0163+  00CE 78                              LD      A, B
0164+  00CF B1                              OR      C
0165+  00D0 C2 C7 00                        JP      NZ, _check_ready5
0166+  00D3             
0167+  00D3             _uart_ready5
0168+  00D3             ;
0169+  00D3             ; Now enable RAM in page 3 and test
0170+  00D3             ;
0171+  00D3             ;
0172+  00D3 3E 00                           LD      A, 0
0173+  00D5 D3 70                           OUT     (IO_MEM_0), A           ; Page 0 is Flash 0
0174+  00D7 3E 23                           LD      A, 023h
0175+  00D9 D3 73                           OUT     (IO_MEM_3), A           ; Page 3 is RAM 0
0176+  00DB             
0177+  00DB 3E 01                           LD      A, IO_MEM_ENABLE
0178+  00DD D3 74                           OUT     (IO_MEM_CTRL), A
0179+  00DF             
0180+  00DF 3E 37                           LD      A, 37h                  ; Can we write and read a value from Page 3?
0181+  00E1 32 02 FF                        LD      (0FF02h), A
0182+  00E4             
0183+  00E4 3A 02 FF                        LD      A, (0FF02h)
0184+  00E7 21 E0 03                        LD      HL, 03E0h               ; #C2
0185+  00EA FE 37                           CP      37h
0186+  00EC             
0187+  00EC C2 1D 00                        JP      NZ, _boot_beep          ; Beep again if we don't see the value we've written
0188+  00EF 3C                              INC     A
0189+  00F0 32 02 FF                        LD      (0FF02h), A
0190+  00F3 3A 02 FF                        LD      A, (0FF02h)
0191+  00F6 FE 38                           CP      38h
0192+  00F8             
0193+  00F8 C2 1D 00                        JP      NZ, _boot_beep
0194+  00FB             
0195+  00FB             ;
0196+  00FB             ; At this stage we should have a working UART and memory.. we can start calling routines..
0197+  00FB             ;
0198+  00FB CD 7C 0B                        CALL    uart_init               ; Reinitialise the UART to make sure we've not missed anything
0199+  00FE CD 01 0C                        CALL    uart_inline
0200+  0101 4D 69 63 72                     .DB     "MicroBeast starting...\n\r",0
0200+  0105 6F 42 65 61 
0200+  0109 73 74 20 73 
0200+  010D 74 61 72 74 
0200+  0111 69 6E 67 2E 
0200+  0115 2E 2E 0A 0D 
0200+  0119 00 
0201+  011A             
0202+  011A 18 25                           JR      _continue
0203+  011C             
0204+  011C CD 01 0C    panic               CALL    uart_inline
0205+  011F 50 61 6E 69                     .DB     "Panic\n\r",0
0205+  0123 63 0A 0D 00 
0206+  0127 7C                              LD      A, H
0207+  0128 CD E2 0B                        CALL    uart_hex
0208+  012B 7D                              LD      A, L
0209+  012C CD E2 0B                        CALL    uart_hex
0210+  012F 21 80 0E    _beep               LD      HL, 0E80h
0211+  0132 1E 64                           LD      E, 100
0212+  0134 CD 7B 0A                        CALL    play_tone
0213+  0137 21 C0 07                        LD      HL, 07C0h
0214+  013A 1E C8                           LD      E, 200
0215+  013C CD 7B 0A                        CALL    play_tone
0216+  013F 18 EE                           JR      _beep
0217+  0141             
0218+  0141 CD 91 05    _continue           CALL    init_portb
0219+  0144 CD A7 05                        CALL    i2c_bus_reset
0220+  0147             ;
0221+  0147             ; Now: Port B should be all inputs, so D7 (i2c data) should be high
0222+  0147             ;                   
0223+  0147 06 FF                           LD      B, 0ffh
0224+  0149 10 FE                           DJNZ    $
0225+  014B             
0226+  014B DB 11                           IN      A, (PIO_B_DATA)
0227+  014D E6 80                           AND     I2C_DATA_MASK
0228+  014F 28 CB                           JR      Z, panic
0229+  0151             
0230+  0151 CD 97 06                        CALL    i2c_sda_low             ; Set data low
0231+  0154 DB 11                           IN      A, (PIO_B_DATA)
0232+  0156 E6 80                           AND     I2C_DATA_MASK
0233+  0158 20 C2                           JR      NZ, panic
0234+  015A             
0235+  015A CD 01 0C                        CALL    uart_inline
0236+  015D 44 65 74 65                     .DB     "Detected PIO\r\n",0
0236+  0161 63 74 65 64 
0236+  0165 20 50 49 4F 
0236+  0169 0D 0A 00 
0237+  016C             
0238+  016C             ;
0239+  016C             ; All good, let's see what's on the bus...
0240+  016C             ;
0241+  016C CD A7 05                        CALL    i2c_bus_reset
0242+  016F             
0243+  016F CD B6 05                        CALL    i2c_start
0244+  0172 3E 50                           LD      A, DL_ADDRESS
0245+  0174 CD 01 06                        CALL    i2c_address_w
0246+  0177 21 01 F0                        LD      HL, PANIC_0001
0247+  017A 30 A0                           JR      NC, panic
0248+  017C CD C3 05                        CALL    i2c_stop
0249+  017F             
0250+  017F CD 01 0C                        CALL    uart_inline
0251+  0182 44 65 74 65                     .DB     "Detected Display 1/2\r\n", 0
0251+  0186 63 74 65 64 
0251+  018A 20 44 69 73 
0251+  018E 70 6C 61 79 
0251+  0192 20 31 2F 32 
0251+  0196 0D 0A 00 
0252+  0199             
0253+  0199 CD B6 05                        CALL    i2c_start
0254+  019C 3E 53                           LD      A, DR_ADDRESS
0255+  019E CD 01 06                        CALL    i2c_address_w
0256+  01A1 21 02 F0                        LD      HL, PANIC_0002
0257+  01A4 D2 1C 01                        JP      NC, panic
0258+  01A7 CD C3 05                        CALL    i2c_stop
0259+  01AA             
0260+  01AA CD 01 0C                        CALL    uart_inline
0261+  01AD 44 65 74 65                     .DB     "Detected Display 2/2\r\n", 0
0261+  01B1 63 74 65 64 
0261+  01B5 20 44 69 73 
0261+  01B9 70 6C 61 79 
0261+  01BD 20 32 2F 32 
0261+  01C1 0D 0A 00 
0262+  01C4             
0263+  01C4 CD B6 05                        CALL    i2c_start
0264+  01C7 3E 6F                           LD      A, RTC_ADDRESS
0265+  01C9 CD 01 06                        CALL    i2c_address_w
0266+  01CC 21 03 F0                        LD      HL, PANIC_0003
0267+  01CF D2 1C 01                        JP      NC, panic
0268+  01D2 CD C3 05                        CALL    i2c_stop
0269+  01D5             
0270+  01D5 CD 01 0C                        CALL    uart_inline
0271+  01D8 44 65 74 65                     .DB     "Detected RTC\r\n", 0
0271+  01DC 63 74 65 64 
0271+  01E0 20 52 54 43 
0271+  01E4 0D 0A 00 
0272+  01E7             
0273+  01E7             ;
0274+  01E7             ; Now check keys all read as un-pressed, apart from DELETE
0275+  01E7             ;
0276+  01E7 AF                              XOR     A                       ; Reset boot mode
0277+  01E8 32 03 FF                        LD      (boot_mode), A
0278+  01EB             
0279+  01EB 01 00 F7                        LD      BC, 0F700h
0280+  01EE ED 78       _key_loop           IN      A, (C)
0281+  01F0 E6 3F                           AND     03Fh
0282+  01F2 FE 3F                           CP      03Fh
0283+  01F4 CA 1E 02                        JP      Z, _key_ok
0284+  01F7             
0285+  01F7 6F                              LD      L, A
0286+  01F8 78                              LD      A, B
0287+  01F9 FE EF                           CP      0EFh
0288+  01FB CA 02 02                        JP      Z, _delete_row
0289+  01FE             
0290+  01FE 60                              LD      H,B                 ; If it's not the delete row, the panic code is the row and key mask
0291+  01FF C3 1C 01                        JP      panic
0292+  0202             
0293+  0202 7D          _delete_row         LD      A, L
0294+  0203 FE 1F                           CP      01Fh                ; If it is the delete row and not the delete key, panic 0004
0295+  0205 21 04 F0                        LD      HL, PANIC_0004
0296+  0208 C2 1C 01                        JP      NZ, panic
0297+  020B             
0298+  020B 3E FF                           LD      A, 0FFh
0299+  020D 32 03 FF                        LD      (boot_mode), A
0300+  0210             
0301+  0210 CD 01 0C                        CALL    uart_inline
0302+  0213 41 4C 54 20                     .DB     "ALT Boot\r\n", 0
0302+  0217 42 6F 6F 74 
0302+  021B 0D 0A 00 
0303+  021E             
0304+  021E CB 08       _key_ok             RRC     B
0305+  0220 78                              LD      A, B
0306+  0221 FE F7                           CP      0F7h
0307+  0223 C2 EE 01                        JP      NZ, _key_loop
0308+  0226             
0309+  0226 CD 01 0C                        CALL    uart_inline
0310+  0229 4B 65 79 62                     .DB     "Keyboard OK\r\n", 0
0310+  022D 6F 61 72 64 
0310+  0231 20 4F 4B 0D 
0310+  0235 0A 00 
0311+  0237             
0312+  0237                                 .MODULE main0016   0237             
0017   0237 CD 91 05    _main               CALL    init_portb
0018   023A CD A7 05                        CALL    i2c_bus_reset
0019   023D                                 
0020   023D CD 5B 03                        CALL    display_init
0021   0240                      
0022   0240 1E 00                           LD      E, 0                    ; Set brightness to zero
0023   0242 CD 9B 03                        CALL    disp_brightness
0024   0245             
0025   0245 3E 00                           LD      A,  0
0026   0247 21 29 03                        LD      HL, welcome
0027   024A CD 99 04                        CALL    disp_string
0028   024D             
0029   024D                                 ;; Animate it
0030   024D 3E 50                           LD      A, DL_ADDRESS           ; Put both controllers in brightness mode
0031   024F 32 05 FF                        LD      (display_address), A
0032   0252 2E 01                           LD      L, BRIGHT_PAGE
0033   0254 CD D6 03                        CALL    disp_page
0034   0257             
0035   0257 3E 53                           LD      A, DR_ADDRESS
0036   0259 32 05 FF                        LD      (display_address), A
0037   025C 2E 01                           LD      L, BRIGHT_PAGE
0038   025E CD D6 03                        CALL    disp_page
0039   0261             
0040   0261 3E 00                           LD      A, 0                    ; Current animation from 0-24
0041   0263 32 04 FF                        LD      (temp_byte), A
0042   0266                                 
0043   0266                                 ; Update display
0044   0266 CD B6 05    _frame_loop         CALL    i2c_start
0045   0269 3E 50                           LD      A, DL_ADDRESS
0046   026B CD 01 06                        CALL    i2c_address_w
0047   026E AF                              XOR     A                       ; First digit in display
0048   026F CD 03 06                        CALL    i2c_write
0049   0272             
0050   0272 06 0C                           LD      B, 12
0051   0274 3A 04 FF                        LD      A, (temp_byte)
0052   0277 4F                              LD      C, A
0053   0278             
0054   0278 C5          _l_char_loop        PUSH    BC
0055   0279 06 00                           LD      B, 0
0056   027B 21 F3 02                        LD      HL, little_sin
0057   027E 09                              ADD     HL, BC 
0058   027F                                 
0059   027F 1E 10                           LD      E, 16
0060   0281 7E          _write_l_char       LD      A, (HL)
0061   0282 CD 03 06                        CALL    i2c_write
0062   0285 1D                              DEC     E
0063   0286 20 F9                           JR      NZ, _write_l_char
0064   0288             
0065   0288 C1                              POP     BC
0066   0289 0C                              INC     C
0067   028A 0C                              INC     C
0068   028B 79                              LD      A, C
0069   028C FE 18                           CP      24
0070   028E 38 03                           JR      C, _no_loop_l
0071   0290 DE 18                           SBC     A, 24
0072   0292 4F                              LD      C, A
0073   0293 10 E3       _no_loop_l          DJNZ    _l_char_loop
0074   0295 CD C3 05                        CALL    i2c_stop
0075   0298             
0076   0298 C5                              PUSH    BC
0077   0299 CD B6 05                        CALL    i2c_start
0078   029C 3E 53                           LD      A, DR_ADDRESS
0079   029E CD 01 06                        CALL    i2c_address_w
0080   02A1 AF                              XOR     A
0081   02A2 CD 03 06                        CALL    i2c_write
0082   02A5             
0083   02A5 C1                              POP     BC
0084   02A6 06 0C                           LD      B, 12
0085   02A8             
0086   02A8 C5          _r_char_loop        PUSH    BC
0087   02A9 06 00                           LD      B, 0
0088   02AB 21 F3 02                        LD      HL, little_sin
0089   02AE 09                              ADD     HL, BC 
0090   02AF             
0091   02AF 1E 10                           LD      E, 16
0092   02B1 7E          _write_r_char       LD      A, (HL)
0093   02B2 CD 03 06                        CALL    i2c_write
0094   02B5 1D                              DEC     E
0095   02B6 20 F9                           JR      NZ, _write_r_char
0096   02B8             
0097   02B8 C1                              POP     BC
0098   02B9 0C                              INC     C
0099   02BA 0C                              INC     C
0100   02BB 79                              LD      A, C
0101   02BC FE 18                           CP      24
0102   02BE 38 03                           JR      C, _no_loop_r
0103   02C0 DE 18                           SBC     A, 24
0104   02C2 4F                              LD      C, A
0105   02C3 10 E3       _no_loop_r          DJNZ    _r_char_loop
0106   02C5 CD C3 05                        CALL    i2c_stop
0107   02C8             
0108   02C8 3A 04 FF    _next_frame         LD      A, (temp_byte)
0109   02CB 3C                              INC     A
0110   02CC 32 04 FF                        LD      (temp_byte), A
0111   02CF FE 18                           CP      24
0112   02D1 C2 66 02                        JP      NZ, _frame_loop
0113   02D4             
0114   02D4 1E 80                           LD      E, DISP_DEFAULT_BRIGHTNESS      ; Reset brightness
0115   02D6 CD 9B 03                        CALL    disp_brightness
0116   02D9             
0117   02D9 3E 00                           LD      A, 0
0118   02DB 21 42 03                        LD      HL, welcome2
0119   02DE CD 99 04                        CALL    disp_string
0120   02E1             
0121   02E1 CD 0D 03                        CALL    wait_key
0122   02E4             
0123   02E4             ;======================================== SETUP BIOS ========================================
0124   02E4             
0125   02E4 21 23 0C                        LD      HL, bios_seg+4
0126   02E7 ED 5B 1F 0C                     LD      DE, (bios_seg)
0127   02EB D5                              PUSH    DE
0128   02EC ED 4B 21 0C                     LD      BC, (bios_seg+2)
0129   02F0 ED B0                           LDIR
0130   02F2 C9                              RET
0131   02F3                                 
0132   02F3 00 03 09 13 little_sin          .DB     0, 3, 9, 19, 32, 48, 64, 81, 96, 110, 120, 126, 128, 126, 120, 110, 96, 81, 65, 48, 33, 19, 9, 3  ; 24 values
0132   02F7 20 30 40 51 
0132   02FB 60 6E 78 7E 
0132   02FF 80 7E 78 6E 
0132   0303 60 51 41 30 
0132   0307 21 13 09 03 
0133   030B             
0134   030B 18 FE       halt                JR      halt
0135   030D             
0136   030D 01 00 00    wait_key            LD      BC, 0000h   ; Keyboard all rows
0137   0310 ED 78       _wait_key           IN      A, (C)
0138   0312 E6 3F                           AND     3fh
0139   0314 FE 3F                           CP      3fh
0140   0316 CA 10 03                        JP      Z, _wait_key
0141   0319             
0142   0319 16 64       _wait_up            LD      D, 100
0143   031B ED 78       _wait_loop          IN      A, (C)
0144   031D E6 3F                           AND     3fh
0145   031F FE 3F                           CP      3fh
0146   0321 C2 19 03                        JP      NZ, _wait_up
0147   0324 15                              DEC     D
0148   0325 C2 1B 03                        JP      NZ, _wait_loop
0149   0328 C9                              RET
0150   0329             
0151   0329 2A 2A 2A 2A welcome             .db "************************", 0
0151   032D 2A 2A 2A 2A 
0151   0331 2A 2A 2A 2A 
0151   0335 2A 2A 2A 2A 
0151   0339 2A 2A 2A 2A 
0151   033D 2A 2A 2A 2A 
0151   0341 00 
0152   0342 2A 20 4D 49 welcome2            .db "* MICRO BEAST  Ver 0_5 *", 0
0152   0346 43 52 4F 20 
0152   034A 42 45 41 53 
0152   034E 54 20 20 56 
0152   0352 65 72 20 30 
0152   0356 5F 35 20 2A 
0152   035A 00 
0153   035B             
0154   035B             ; =============================================== Font =====================================================
0155   035B             ;
0156   035B                                 .INCLUDE disp.asm
0001+  035B             ; ========================================== Display Routines ===============================================
0002+  035B             ;
0003+  035B                                 .MODULE disp
0004+  035B             
0005+  035B             CONFIG_PAGE         .EQU    3
0006+  035B             BRIGHT_PAGE         .EQU    1
0007+  035B             LED_PAGE            .EQU    0 
0008+  035B             
0009+  035B CD C3 04    display_init        CALL    disp_clear
0010+  035E 1E 80                           LD      E, DISP_DEFAULT_BRIGHTNESS
0011+  0360 CD 9B 03                        CALL    disp_brightness
0012+  0363             
0013+  0363 CD 6F 03                        CALL    disp_select_l
0014+  0366 CD 7B 03                        CALL    disp_config
0015+  0369             
0016+  0369 CD 75 03                        CALL    disp_select_r
0017+  036C CD 7B 03                        CALL    disp_config
0018+  036F             
0019+  036F 3E 50       disp_select_l       LD      A, DL_ADDRESS
0020+  0371 32 05 FF                        LD      (display_address), A
0021+  0374 C9                              RET
0022+  0375             
0023+  0375 3E 53       disp_select_r       LD      A, DR_ADDRESS
0024+  0377 32 05 FF                        LD      (display_address), A
0025+  037A C9                              RET
0026+  037B             
0027+  037B 2E 03       disp_config         LD      L, CONFIG_PAGE
0028+  037D CD D6 03                        CALL    disp_page
0029+  0380 CD B6 05                        CALL    i2c_start
0030+  0383 3A 05 FF                        LD      A, (display_address)
0031+  0386 CD 01 06                        CALL    i2c_address_w
0032+  0389 3E 00                           LD      A, 000h
0033+  038B CD 03 06                        CALL    i2c_write
0034+  038E 3E 01                           LD      A, 001h         ; Turn display on
0035+  0390 CD 03 06                        CALL    i2c_write
0036+  0393 3E 78                           LD      A, 078h         ; 0.020mA
0037+  0395 CD 03 06                        CALL    i2c_write
0038+  0398 C3 C3 05                        JP      i2c_stop
0039+  039B             
0040+  039B             ;
0041+  039B             ; Sets the brightness for the display
0042+  039B             ; Enter with E set to the desired brightness for all segments
0043+  039B             ;
0044+  039B CD 6F 03    disp_brightness     CALL    disp_select_l
0045+  039E CD A4 03                        CALL    _set_bright
0046+  03A1 CD 75 03                        CALL    disp_select_r
0047+  03A4 2E 01       _set_bright         LD      L, BRIGHT_PAGE
0048+  03A6 CD D6 03                        CALL    disp_page
0049+  03A9 2E 0C                           LD      L, 12
0050+  03AB CD B6 05    _bright_loop        CALL    i2c_start
0051+  03AE 3A 05 FF                        LD      A, (display_address)
0052+  03B1 CD 01 06                        CALL    i2c_address_w
0053+  03B4 7D                              LD      A, L
0054+  03B5 3D                              DEC     A
0055+  03B6 CB 27                           SLA     A
0056+  03B8 CB 27                           SLA     A
0057+  03BA CB 27                           SLA     A
0058+  03BC CB 27                           SLA     A
0059+  03BE CD 03 06                        CALL    i2c_write
0060+  03C1 26 10                           LD      H, 010h
0061+  03C3 7B          _bright_byte        LD      A, E
0062+  03C4 CD 03 06                        CALL    i2c_write
0063+  03C7 25                              DEC     H
0064+  03C8 20 F9                           JR      NZ, _bright_byte
0065+  03CA CD C3 05                        CALL    i2c_stop
0066+  03CD 2D                              DEC     L
0067+  03CE 20 DB                           JR      NZ, _bright_loop
0068+  03D0 2E 00                           LD      L, LED_PAGE
0069+  03D2 CD D6 03                        CALL    disp_page
0070+  03D5 C9                              RET
0071+  03D6             
0072+  03D6             ; Set the Page number
0073+  03D6             ; Call with page number in L
0074+  03D6             ;
0075+  03D6             ; Uses A, B, C, D
0076+  03D6 CD EE 03    disp_page           CALL    disp_unlock
0077+  03D9 CD B6 05                        CALL    i2c_start
0078+  03DC 3A 05 FF                        LD      A, (display_address)
0079+  03DF CD 01 06                        CALL    i2c_address_w
0080+  03E2 3E FD                           LD      A, 0FDh
0081+  03E4 CD 03 06                        CALL    i2c_write
0082+  03E7 7D                              LD      A, L
0083+  03E8 CD 03 06                        CALL    i2c_write
0084+  03EB C3 C3 05                        JP      i2c_stop
0085+  03EE             
0086+  03EE CD B6 05    disp_unlock         CALL    i2c_start           ; Must be called before switching pages
0087+  03F1 3A 05 FF                        LD      A, (display_address)
0088+  03F4 CD 01 06                        CALL    i2c_address_w
0089+  03F7 3E FE                           LD      A, DISP_REG_CRWL
0090+  03F9 CD 03 06                        CALL    i2c_write
0091+  03FC 3E C5                           LD      A, DISP_UNLOCK
0092+  03FE CD 03 06                        CALL    i2c_write
0093+  0401 C3 C3 05                        JP      i2c_stop
0094+  0404             
0095+  0404             ; Set the character at column A to brightness C
0096+  0404             ;
0097+  0404             ;
0098+  0404 C5          disp_char_bright    PUSH    BC
0099+  0405 06 50                           LD      B, DL_ADDRESS
0100+  0407 FE 0C                           CP      12
0101+  0409 DA 10 04                        JP      C, _bright_left
0102+  040C 06 53                           LD      B, DR_ADDRESS
0103+  040E D6 0C                           SUB     12
0104+  0410 5F          _bright_left        LD      E, A
0105+  0411 78                              LD      A, B
0106+  0412 32 05 FF                        LD      (display_address), A
0107+  0415 2E 01                           LD      L, BRIGHT_PAGE
0108+  0417 CD D6 03                        CALL    disp_page
0109+  041A             
0110+  041A CD B6 05                        CALL    i2c_start
0111+  041D 3A 05 FF                        LD      A, (display_address)
0112+  0420 CD 01 06                        CALL    i2c_address_w
0113+  0423 7B                              LD      A, E
0114+  0424 CB 27                           SLA     A
0115+  0426 CB 27                           SLA     A
0116+  0428 CB 27                           SLA     A
0117+  042A CB 27                           SLA     A
0118+  042C CD 03 06                        CALL    i2c_write
0119+  042F E1                              POP     HL
0120+  0430 26 10                           LD      H, 010h
0121+  0432 7D          _bright_char_loop   LD      A, L
0122+  0433 CD 03 06                        CALL    i2c_write
0123+  0436 25                              DEC     H
0124+  0437 20 F9                           JR      NZ, _bright_char_loop
0125+  0439 CD C3 05                        CALL    i2c_stop
0126+  043C             
0127+  043C 2E 00                           LD      L, LED_PAGE
0128+  043E CD D6 03                        CALL    disp_page
0129+  0441 C9                              RET
0130+  0442                                 
0131+  0442             ; Display a single character A at column C
0132+  0442             ;
0133+  0442             ; Returns with A pointing to next column
0134+  0442             ;
0135+  0442 FE 20       disp_character      CP      32
0136+  0444 F2 4E 04                        JP      P, _not_control
0137+  0447             
0138+  0447 21 61 48    _invalid_char       LD      HL, INVALID_CHAR_BITMASK
0139+  044A 79                              LD      A, C
0140+  044B C3 63 04                        JP      disp_bitmask
0141+  044E             
0142+  044E CB 7F       _not_control        BIT     7, A
0143+  0450 C2 47 04                        JP      NZ, _invalid_char
0144+  0453 D6 20                           SUB     32
0145+  0455             
0146+  0455 16 00                           LD      D, 0
0147+  0457 5F                              LD      E, A
0148+  0458 CB 23                           SLA     E                   ; Don't need to shift into D, since bit 7 is zero
0149+  045A 21 D1 04                        LD      HL, font  
0150+  045D 19                              ADD     HL, DE
0151+  045E 56                              LD      D, (HL)
0152+  045F 23                              INC     HL
0153+  0460 66                              LD      H, (HL)
0154+  0461 6A                              LD      L, D
0155+  0462 79                              LD      A, C
0156+  0463                                 ; Fall into disp_bitmask
0157+  0463             
0158+  0463             ; Display a bitmask in HL at column A (0 - 23)
0159+  0463             ;
0160+  0463             ; Returns with A pointing to next column
0161+  0463             ;
0162+  0463             ; Uses A, B, C, D, E
0163+  0463 F5          disp_bitmask        PUSH    AF
0164+  0464 06 50                           LD      B, DL_ADDRESS
0165+  0466 FE 0C                           CP      12
0166+  0468 DA 6F 04                        JP      C, _disp_left
0167+  046B 06 53                           LD      B, DR_ADDRESS
0168+  046D D6 0C                           SUB     12
0169+  046F 5F          _disp_left          LD      E, A
0170+  0470 CD B6 05                        CALL    i2c_start
0171+  0473 78                              LD      A, B
0172+  0474 CD 01 06                        CALL    i2c_address_w
0173+  0477 7B                              LD      A, E
0174+  0478 CB 27                           SLA     A
0175+  047A CD 03 06                        CALL    i2c_write
0176+  047D 7D                              LD      A, L
0177+  047E CD 03 06                        CALL    i2c_write
0178+  0481 7C                              LD      A, H
0179+  0482 CD 03 06                        CALL    i2c_write
0180+  0485 CD C3 05                        CALL    i2c_stop
0181+  0488 F1                              POP     AF
0182+  0489 3C                              INC     A
0183+  048A C9                              RET
0184+  048B             
0185+  048B             
0186+  048B C3 63 04                        JP      disp_bitmask
0187+  048E             ;
0188+  048E             ; Clear the display and show an inline string from column 0
0189+  048E             ;
0190+  048E CD C3 04    disp_clear_inline   CALL    disp_clear
0191+  0491 AF                              XOR     A
0192+  0492             ;
0193+  0492             ; Display an inline string to column A->
0194+  0492             ;
0195+  0492 E3          disp_inline         EX      (SP), HL
0196+  0493 CD 99 04                        CALL    disp_string
0197+  0496 23                              INC     HL
0198+  0497 E3                              EX      (SP), HL
0199+  0498 C9                              RET
0200+  0499             
0201+  0499             ; Display a string pointed to by HL to column A->
0202+  0499             ; Note string should be zero terminated...
0203+  0499             ; Returns with HL pointing to the 0 terminator
0204+  0499             ;
0205+  0499 5F          disp_string         LD      E, A
0206+  049A 7E                              LD      A, (HL)
0207+  049B B7                              OR      A
0208+  049C C2 A0 04                        JP      NZ, _char_ok
0209+  049F C9                              RET
0210+  04A0             
0211+  04A0 D6 20       _char_ok            SUB     32
0212+  04A2 F2 AA 04                        JP      P, _char_ok2
0213+  04A5 21 61 48                        LD      HL, INVALID_CHAR_BITMASK
0214+  04A8 18 10                           JR      _show_char
0215+  04AA             
0216+  04AA 06 00       _char_ok2           LD      B, 0
0217+  04AC 4F                              LD      C, A
0218+  04AD E5                              PUSH    HL
0219+  04AE 21 D1 04                        LD      HL, font
0220+  04B1 CB 21                           SLA     C
0221+  04B3 CB 10                           RL      B
0222+  04B5 09                              ADD     HL, BC
0223+  04B6 4E                              LD      C, (HL)
0224+  04B7 23                              INC     HL
0225+  04B8 66                              LD      H, (HL)
0226+  04B9 69                              LD      L, C
0227+  04BA 7B          _show_char          LD      A, E
0228+  04BB CD 63 04                        CALL    disp_bitmask
0229+  04BE E1                              POP     HL
0230+  04BF 23                              INC     HL
0231+  04C0 C3 99 04                        JP      disp_string
0232+  04C3             
0233+  04C3             ; Clear the display
0234+  04C3             ;
0235+  04C3 3E 00       disp_clear          LD      A, 0
0236+  04C5 21 00 00                        LD      HL, 0
0237+  04C8 CD 63 04    _clear_loop         CALL    disp_bitmask
0238+  04CB FE 18                           CP      24
0239+  04CD C2 C8 04                        JP      NZ, _clear_loop
0240+  04D0 C9                              RET
0241+  04D1             
0242+  04D1                                 .MODULE main0157   04D1                                 .INCLUDE font.asm
0001+  04D1             ;
0002+  04D1             ; Font definition
0003+  04D1             ;
0004+  04D1             ;
0005+  04D1             
0006+  04D1             INVALID_CHAR_BITMASK    .EQU 04861h
0007+  04D1             
0008+  04D1             font
0009+  04D1 00 00                           .dw     0000h
0010+  04D3 00 49                           .dw     4900h   ; !
0011+  04D5 02 02                           .dw     0202h   ; "
0012+  04D7 CE 12                           .dw     12ceh   ; #
0013+  04D9 ED 12                           .dw     12edh   ; $
0014+  04DB E4 2D                           .dw     2de4h   ; %
0015+  04DD 59 0B                           .dw     0b59h   ; &
0016+  04DF 00 02                           .dw     0200h   ; '
0017+  04E1 00 0C                           .dw     0c00h   ; (
0018+  04E3 00 21                           .dw     2100h   ; )
0019+  04E5 C0 3F                           .dw     3fc0h   ; *
0020+  04E7 C0 12                           .dw     12c0h   ; +
0021+  04E9 00 20                           .dw     2000h   ; ,
0022+  04EB C0 00                           .dw     00c0h   ; -
0023+  04ED 00 40                           .dw     4000h   ; .
0024+  04EF 00 24                           .dw     2400h   ; /
0025+  04F1             
0026+  04F1 3F 24                           .dw     243fh   ; 0
0027+  04F3 06 04                           .dw     0406h   ; 1
0028+  04F5 DB 00                           .dw     00dbh   ; 2
0029+  04F7 8F 00                           .dw     008fh   ; 3
0030+  04F9 E6 00                           .dw     00e6h   ; 4
0031+  04FB 69 08                           .dw     0869h   ; 5
0032+  04FD FD 00                           .dw     00fdh   ; 6
0033+  04FF 01 14                           .dw     1401h   ; 7
0034+  0501 FF 00                           .dw     00ffh   ; 8
0035+  0503 EF 00                           .dw     00efh   ; 9
0036+  0505 00 12                           .dw     1200h   ; :
0037+  0507 00 22                           .dw     2200h   ; ;
0038+  0509 40 0C                           .dw     0c40h   ; <
0039+  050B C8 00                           .dw     00c8h   ; = 
0040+  050D 80 21                           .dw     2180h   ; >
0041+  050F 83 50                           .dw     5083h   ; ?
0042+  0511             
0043+  0511 BB 02                           .dw     02bbh   ; @
0044+  0513 F7 00                           .dw     00f7h   ; A
0045+  0515 8F 12                           .dw     128fh   ; B
0046+  0517 39 00                           .dw     0039h   ; C
0047+  0519 0F 12                           .dw     120fh   ; D
0048+  051B 79 00                           .dw     0079h   ; E
0049+  051D 71 00                           .dw     0071h   ; F
0050+  051F BD 00                           .dw     00bdh   ; G
0051+  0521 F6 00                           .dw     00f6h   ; H
0052+  0523 09 12                           .dw     1209h   ; I
0053+  0525 1E 00                           .dw     001eh   ; J
0054+  0527 70 0C                           .dw     0c70h   ; K
0055+  0529 38 00                           .dw     0038h   ; L
0056+  052B 36 05                           .dw     0536h   ; M
0057+  052D 36 09                           .dw     0936h   ; N
0058+  052F 3F 00                           .dw     003fh   ; O
0059+  0531             
0060+  0531 F3 00                           .dw     00f3h   ; P
0061+  0533 3F 08                           .dw     083fh   ; Q
0062+  0535 F3 08                           .dw     08f3h   ; R
0063+  0537 ED 00                           .dw     00edh   ; S
0064+  0539 01 12                           .dw     1201h   ; T
0065+  053B 3E 00                           .dw     003eh   ; U
0066+  053D 30 24                           .dw     2430h   ; V
0067+  053F 36 28                           .dw     2836h   ; W
0068+  0541 00 2D                           .dw     2d00h   ; X
0069+  0543 EE 00                           .dw     00eeh   ; Y
0070+  0545 09 24                           .dw     2409h   ; Z
0071+  0547 39 00                           .dw     0039h   ; [
0072+  0549 00 09                           .dw     0900h   ; \
0073+  054B 0F 00                           .dw     000fh   ; ]
0074+  054D 00 28                           .dw     2800h   ; ^
0075+  054F 08 00                           .dw     0008h   ; _
0076+  0551             
0077+  0551 00 01                           .dw     0100h   ; `
0078+  0553 8C 20                           .dw     208ch   ; a
0079+  0555 78 08                           .dw     0878h   ; b
0080+  0557 D8 00                           .dw     00d8h   ; c
0081+  0559 8E 20                           .dw     208eh   ; d 
0082+  055B 58 20                           .dw     2058h   ; e 
0083+  055D C0 14                           .dw     14c0h   ; f
0084+  055F 8E 04                           .dw     048eh   ; g
0085+  0561 70 10                           .dw     1070h   ; h
0086+  0563 00 10                           .dw     1000h   ; i
0087+  0565 10 22                           .dw     2210h   ; j
0088+  0567 00 1E                           .dw     1e00h   ; k
0089+  0569 30 00                           .dw     0030h   ; l
0090+  056B D4 10                           .dw     10d4h   ; m
0091+  056D 50 10                           .dw     1050h   ; n
0092+  056F DC 00                           .dw     00dch   ; o
0093+  0571             
0094+  0571 70 01                           .dw     0170h   ; p
0095+  0573 86 04                           .dw     0486h   ; q
0096+  0575 50 00                           .dw     0050h   ; r
0097+  0577 88 08                           .dw     0888h   ; s
0098+  0579 78 00                           .dw     0078h   ; t
0099+  057B 1C 00                           .dw     001ch   ; u
0100+  057D 10 20                           .dw     2010h   ; v
0101+  057F 14 28                           .dw     2814h   ; w
0102+  0581 00 2D                           .dw     2d00h   ; x
0103+  0583 8E 02                           .dw     028eh   ; y
0104+  0585 48 20                           .dw     2048h   ; z
0105+  0587 49 21                           .dw     2149h   ; {
0106+  0589 00 12                           .dw     1200h   ; |
0107+  058B 89 0C                           .dw     0c89h   ; }
0108+  058D C0 24                           .dw     24c0h   ; ~
0109+  058F 00 00                           .dw     0000h   ; 0158   0591                                 .INCLUDE  i2c.asm
0001+  0591             ; ============================================ I2C Routines =================================================
0002+  0591             ; Assume I2C clock is on Port B bit 6
0003+  0591             ;            data is on Port B bit 7
0004+  0591             ;
0005+  0591             
0006+  0591                                 .MODULE i2c
0007+  0591             
0008+  0591 3E CF       init_portb          LD      A, PIO_MODE_3           ; Port B mode 3
0009+  0593 32 00 FF                        LD      (port_b_mode), A
0010+  0596 D3 13                           OUT     (PIO_B_CTRL), A
0011+  0598             
0012+  0598 3E FF                           LD      A, PORT_B_IOMASK        ;
0013+  059A 32 01 FF                        LD      (port_b_dir), A
0014+  059D D3 13                           OUT     (PIO_B_CTRL), A
0015+  059F             
0016+  059F 3E 3F                           LD      A, 03Fh                 ; All bits high apart from D7, D6
0017+  05A1 32 02 FF                        LD      (port_b_data),A
0018+  05A4 D3 11                           OUT     (PIO_B_DATA), A         ; Changing D7 or D6 to an output will drive the lines low
0019+  05A6 C9                              RET
0020+  05A7             
0021+  05A7             ; Reset the bus
0022+  05A7             ;
0023+  05A7             ; Uses A, B, D
0024+  05A7 06 0A       i2c_bus_reset       LD      B, 0ah          ; ten cycles
0025+  05A9 CD B7 06    _loop_b             CALL    i2c_scl_cycle
0026+  05AC 10 FB                           DJNZ    _loop_b
0027+  05AE CD A7 06                        CALL    i2c_scl_high
0028+  05B1 06 F0                           LD      B, 0F0h
0029+  05B3 10 FE                           DJNZ    $
0030+  05B5 C9                              RET
0031+  05B6             
0032+  05B6             ;
0033+  05B6             ; Uses A
0034+  05B6 CD 87 06    i2c_start           CALL    i2c_sda_high
0035+  05B9 CD A7 06                        CALL    i2c_scl_high
0036+  05BC CD 97 06                        CALL    i2c_sda_low     ; Drive data low
0037+  05BF CD 77 06                        CALL    i2c_scl_low     ; Drive clock low
0038+  05C2 C9                              RET
0039+  05C3             
0040+  05C3             ;
0041+  05C3             ; Uses A
0042+  05C3 CD 97 06    i2c_stop            CALL    i2c_sda_low     ; Drive data low
0043+  05C6 CD A7 06                        CALL    i2c_scl_high
0044+  05C9 CD 87 06                        CALL    i2c_sda_high
0045+  05CC C9                              RET
0046+  05CD             
0047+  05CD             ;
0048+  05CD             ; Read a byte from Device address H, Register L
0049+  05CD             ; Calls i2c_start, but does NOT call i2c_stop
0050+  05CD             ; Returns With Carry SET and A containing the register value, or Carry CLEAR if no acknowledge
0051+  05CD             ; Uses A, B, C, D, H, L
0052+  05CD             ; Preserves H, L
0053+  05CD CD B6 05    i2c_read_from       CALL    i2c_start
0054+  05D0 7C                              LD      A, H
0055+  05D1 CD 01 06                        CALL    i2c_address_w
0056+  05D4 30 17                           JR      NC, _read_end
0057+  05D6 7D                              LD      A, L
0058+  05D7 CD 03 06                        CALL    i2c_write
0059+  05DA 30 11                           JR      NC, _read_end
0060+  05DC 06 32                           LD      B, 50
0061+  05DE 10 FE       _read_pause         DJNZ    _read_pause
0062+  05E0 CD B6 05                        CALL    i2c_start
0063+  05E3 7C                              LD      A, H
0064+  05E4 CD FB 05                        CALL    i2c_address_r
0065+  05E7 30 04                           JR      NC, _read_end
0066+  05E9 CD 10 06                        CALL    i2c_read
0067+  05EC 37                              SCF
0068+  05ED C9          _read_end           RET
0069+  05EE             
0070+  05EE             ;
0071+  05EE             ; Prepare to write to Device address H, Register L
0072+  05EE             ; Calls i2c_start, but does NOT call i2c_stop
0073+  05EE             ; Returns with Carry SET if OK, CLEAR if no acknowledgement
0074+  05EE             ;
0075+  05EE             ; Preserves H, L
0076+  05EE CD B6 05    i2c_write_to        CALL    i2c_start
0077+  05F1 7C                              LD      A, H
0078+  05F2 CD 01 06                        CALL    i2c_address_w
0079+  05F5 D0                              RET     NC
0080+  05F6 7D                              LD      A, L
0081+  05F7 CD 03 06                        CALL    i2c_write
0082+  05FA C9                              RET
0083+  05FB             
0084+  05FB             ; Start reading from device address held in A
0085+  05FB             ;
0086+  05FB             ; Uses A, B, C, D
0087+  05FB CB 27       i2c_address_r       SLA     A
0088+  05FD F6 01                           OR      1
0089+  05FF 18 02                           JR      i2c_write
0090+  0601             
0091+  0601             ; Start writing to device address held in A
0092+  0601             ;
0093+  0601             ; Uses A, B, C, D
0094+  0601 CB 27       i2c_address_w       SLA     A
0095+  0603             
0096+  0603             ; Write A as a byte to i2c bus
0097+  0603             ; Returns Carry CLEAR if no acknowledge
0098+  0603             ;
0099+  0603             ; Uses A, B, C, D
0100+  0603 CD 2B 06    i2c_write           CALL    i2c_send_byte
0101+  0606 CB 7A                           BIT     I2C_DATA_BIT, D     ; D contains acknowledge bit
0102+  0608 37                              SCF
0103+  0609 C8                              RET     Z               ; Return with carry set if acknowledge bit is low
0104+  060A             
0105+  060A CD C3 05                        CALL    i2c_stop        ; Stop bus if error
0106+  060D 37                              SCF
0107+  060E 3F                              CCF
0108+  060F C9                              RET                     ; Clear carry if acknowledge is high
0109+  0610             
0110+  0610             ; Read byte from i2C into A, without ACK
0111+  0610             ;
0112+  0610             ; Uses A, B, C, D
0113+  0610 06 08       i2c_read            LD      B, 8h
0114+  0612 DB 11       _loop_r             IN      A, (PIO_B_DATA)
0115+  0614 37                              SCF
0116+  0615 CB 7F                           BIT     I2C_DATA_BIT, A
0117+  0617 20 01                           JR      NZ, _data_high
0118+  0619 3F                              CCF
0119+  061A CB 11       _data_high          RL      C
0120+  061C CD B7 06                        CALL    i2c_scl_cycle
0121+  061F 10 F1                           DJNZ    _loop_r
0122+  0621                                 ; CALL    i2c_scl_cycle
0123+  0621             
0124+  0621 79                              LD      A, C
0125+  0622 C9                              RET
0126+  0623             
0127+  0623             ;
0128+  0623             ; Send an ACK..
0129+  0623             ;
0130+  0623 CD 97 06    i2c_ack             CALL    i2c_sda_low
0131+  0626 CD B7 06                        CALL    i2c_scl_cycle
0132+  0629 18 5C                           JR      i2c_sda_high
0133+  062B             
0134+  062B             ;
0135+  062B             ; Send a byte in A, returning the ACK state in D
0136+  062B             ; Uses A, B, C,
0137+  062B             ;
0138+  062B E5          i2c_send_byte       PUSH    HL
0139+  062C D5                              PUSH    DE
0140+  062D 2A 00 FF                        LD      HL, (port_b_mode)           ; L = port_b_mode, H = port_b_dir
0141+  0630 57                              LD      D, A
0142+  0631                                 
0143+  0631 3E 3F                           LD      A, ~(I2C_DATA_MASK|I2C_CLK_MASK)           ; Set SDA and SCL (port_b_dir bit) LOW
0144+  0633 A4                              AND     H
0145+  0634 CB 27                           SLA     A
0146+  0636 67                              LD      H, A
0147+  0637             
0148+  0637 0E 13                           LD      C, PIO_B_CTRL
0149+  0639 06 08                           LD      B, 8
0150+  063B             
0151+  063B 1E 40                           LD      E, I2C_CLK_MASK
0152+  063D             
0153+  063D 7C          _fast_loop          LD      A, H
0154+  063E CB 22                           SLA     D
0155+  0640 CB 1F                           RR      A
0156+  0642 ED 69                           OUT     (C),L
0157+  0644 D3 13                           OUT     (PIO_B_CTRL), A
0158+  0646             
0159+  0646 B3                              OR      E
0160+  0647 ED 69                           OUT     (C), L
0161+  0649 D3 13                           OUT     (PIO_B_CTRL), A                 ; Clock high
0162+  064B             
0163+  064B AB                              XOR     E
0164+  064C ED 69                           OUT     (C), L
0165+  064E D3 13                           OUT     (PIO_B_CTRL),A                  ; Clock low
0166+  0650 10 EB                           DJNZ    _fast_loop
0167+  0652             
0168+  0652 7C                              LD      A, H
0169+  0653 37                              SCF
0170+  0654 CB 1F                           RR      A
0171+  0656 ED 69                           OUT     (C),L                           ; Release SDA
0172+  0658 D3 13                           OUT     (PIO_B_CTRL), A
0173+  065A             
0174+  065A B3                              OR      E
0175+  065B ED 69                           OUT     (C), L
0176+  065D D3 13                           OUT     (PIO_B_CTRL), A                 ; Clock high
0177+  065F             
0178+  065F ED 69                           OUT     (C), L
0179+  0661 AB                              XOR     E
0180+  0662 6F                              LD      L, A
0181+  0663 32 01 FF                        LD      (port_b_dir), A
0182+  0666             
0183+  0666 DB 11                           IN      A, (PIO_B_DATA)                 ; Read ACK
0184+  0668 ED 69                           OUT     (C),L                           ; Clock low
0185+  066A             
0186+  066A D1                              POP     DE
0187+  066B E1                              POP     HL
0188+  066C 57                              LD      D, A
0189+  066D C9                              RET
0190+  066E             
0191+  066E             ; Cycle SCL, returning SDA,SCL in D
0192+  066E             ;
0193+  066E             ; Uses A, D
0194+  066E CD 77 06    i2c_scl_cycle2      CALL    i2c_scl_low
0195+  0671 CD A7 06                        CALL    i2c_scl_high
0196+  0674 DB 11                           IN      A, (PIO_B_DATA)
0197+  0676 57                              LD      D, A
0198+  0677                                 ; Fall into scl_low...
0199+  0677             
0200+  0677             ; SCL/SDA toggle routines
0201+  0677             ;
0202+  0677             ; All use A
0203+  0677 3A 00 FF    i2c_scl_low         LD      A, (port_b_mode)
0204+  067A D3 13                           OUT     (PIO_B_CTRL), A
0205+  067C             
0206+  067C 3A 01 FF                        LD      A, (port_b_dir)
0207+  067F CB B7                           RES     I2C_CLK_BIT, A
0208+  0681 D3 13                           OUT     (PIO_B_CTRL), A
0209+  0683 32 01 FF                        LD      (port_b_dir), A
0210+  0686 C9                              RET
0211+  0687             
0212+  0687 3A 00 FF    i2c_sda_high        LD      A, (port_b_mode)
0213+  068A D3 13                           OUT     (PIO_B_CTRL), A
0214+  068C             
0215+  068C 3A 01 FF                        LD      A, (port_b_dir)
0216+  068F CB FF                           SET     I2C_DATA_BIT, A
0217+  0691 D3 13                           OUT     (PIO_B_CTRL), A
0218+  0693 32 01 FF                        LD      (port_b_dir), A
0219+  0696 C9                              RET
0220+  0697             
0221+  0697 3A 00 FF    i2c_sda_low         LD      A, (port_b_mode)
0222+  069A D3 13                           OUT     (PIO_B_CTRL), A
0223+  069C             
0224+  069C 3A 01 FF                        LD      A, (port_b_dir)
0225+  069F CB BF                           RES     I2C_DATA_BIT, A
0226+  06A1 D3 13                           OUT     (PIO_B_CTRL), A
0227+  06A3 32 01 FF                        LD      (port_b_dir), A
0228+  06A6 C9                              RET
0229+  06A7             
0230+  06A7 3A 00 FF    i2c_scl_high        LD      A, (port_b_mode)
0231+  06AA D3 13                           OUT     (PIO_B_CTRL), A
0232+  06AC             
0233+  06AC 3A 01 FF                        LD      A, (port_b_dir)
0234+  06AF CB F7                           SET     I2C_CLK_BIT, A
0235+  06B1 D3 13                           OUT     (PIO_B_CTRL), A
0236+  06B3 32 01 FF                        LD      (port_b_dir), A
0237+  06B6 C9                              RET
0238+  06B7             
0239+  06B7 C5          i2c_scl_cycle       PUSH   BC
0240+  06B8 01 13 00                        LD     BC, PIO_B_CTRL
0241+  06BB 3A 00 FF                        LD     A, (port_b_mode)
0242+  06BE 57                              LD     D, A
0243+  06BF 3A 01 FF                        LD     A, (port_b_dir)
0244+  06C2             
0245+  06C2 CB B7                           RES    I2C_CLK_BIT, A
0246+  06C4 32 01 FF                        LD     (port_b_dir), A
0247+  06C7 ED 51                           OUT    (C), D
0248+  06C9 D3 13                           OUT    (PIO_B_CTRL), A
0249+  06CB                                 
0250+  06CB CB F7                           SET    I2C_CLK_BIT, A
0251+  06CD ED 51                           OUT    (C), D
0252+  06CF D3 13                           OUT    (PIO_B_CTRL), A
0253+  06D1                                 
0254+  06D1 DB 11                           IN     A, (PIO_B_DATA)
0255+  06D3 ED 51                           OUT    (C), D
0256+  06D5 57                              LD     D, A
0257+  06D6 3A 01 FF                        LD     A, (port_b_dir)
0258+  06D9 D3 13                           OUT    (PIO_B_CTRL), A
0259+  06DB C1                              POP    BC
0260+  06DC C9                              RET
0261+  06DD             
0262+  06DD                                 .MODULE main
0159   06DD                                 .INCLUDE  rtc.asm
0001+  06DD             ; RTC Routines
0002+  06DD             ;
0003+  06DD             ;
0004+  06DD             ;
0005+  06DD                                     .MODULE rtc
0006+  06DD                                     ;  Initial time on power up..
0007+  06DD 23          timestamp               .db  23h            ; Seconds
0008+  06DE 59                                  .db  59h            ; Minutes
0009+  06DF 08                                  .db  08h            ; Hours    (24 hr clock)
0010+  06E0 06                                  .db  06h            ; Weekday  (1-7. Monday=1)
0011+  06E1 05                                  .db  05h            ; Date
0012+  06E2 11                                  .db  11h            ; Month
0013+  06E3 22                                  .db  22h            ; Year 
0014+  06E4 FF                                  .db  0ffh           ; 0ffh end marker
0015+  06E5             
0016+  06E5             ; Set the initial time and start the clock
0017+  06E5             ;
0018+  06E5             ;
0019+  06E5 CD 01 0C    rtc_reset               CALL    uart_inline
0020+  06E8 43 68 65 63                         .DB     "Checking RTC\n\r",0
0020+  06EC 6B 69 6E 67 
0020+  06F0 20 52 54 43 
0020+  06F4 0A 0D 00 
0021+  06F7             
0022+  06F7 26 6F                               LD      H, RTC_ADDRESS
0023+  06F9 2E 00                               LD      L, RTC_REG_SEC      ; Read the seconds register
0024+  06FB CD CD 05                            CALL    i2c_read_from
0025+  06FE 5F                                  LD      E, A
0026+  06FF D2 D8 07                            JP      NC, rtc_ack_error
0027+  0702 CD C3 05                            CALL    i2c_stop
0028+  0705 CD D3 07                            CALL    _pause
0029+  0708 CB 7B                               BIT     7, E                ; Check to see if the clock is running
0030+  070A 28 07                               JR      Z, _do_reset        ; If not, reset the time
0031+  070C             
0032+  070C CD F5 07                            CALL    _check_ctrl         ; If it is, check that ctrl is set correctly
0033+  070F C2 99 07                            JP      NZ, _set_ctrl
0034+  0712 C9                                  RET
0035+  0713             
0036+  0713 CD 01 0C    _do_reset               CALL    uart_inline
0037+  0716 52 65 73 65                         .DB     "Reset time\n\r",0
0037+  071A 74 20 74 69 
0037+  071E 6D 65 0A 0D 
0037+  0722 00 
0038+  0723             
0039+  0723 26 6F                               LD      H, RTC_ADDRESS      ; Clock isn't running, reset to default time
0040+  0725 2E 00                               LD      L, RTC_REG_SEC
0041+  0727 CD EE 05                            CALL    i2c_write_to
0042+  072A D2 D8 07                            JP      NC, rtc_ack_error
0043+  072D             
0044+  072D 21 DD 06                            LD      HL, timestamp
0045+  0730 7E          _reset_loop             LD      A, (HL)
0046+  0731 23                                  INC     HL
0047+  0732 FE FF                               CP      0ffh
0048+  0734 CA 3F 07                            JP      Z, _start_clock
0049+  0737 CD 03 06                            CALL    i2c_write
0050+  073A D2 D8 07                            JP      NC, rtc_ack_error
0051+  073D 18 F1                               JR      _reset_loop
0052+  073F             
0053+  073F CD C3 05    _start_clock            CALL    i2c_stop            ; Enable VBAT and start the clock
0054+  0742             
0055+  0742 CD 01 0C                            CALL    uart_inline
0056+  0745 53 74 61 72                         .DB     "Starting clock\n\r",0
0056+  0749 74 69 6E 67 
0056+  074D 20 63 6C 6F 
0056+  0751 63 6B 0A 0D 
0056+  0755 00 
0057+  0756             
0058+  0756 26 6F                               LD      H, RTC_ADDRESS      ; Enable VBAT
0059+  0758 2E 03                               LD      L, RTC_REG_WKDAY
0060+  075A CD CD 05                            CALL    i2c_read_from
0061+  075D D2 D8 07                            JP      NC, rtc_ack_error
0062+  0760 5F                                  LD      E, A
0063+  0761 CD C3 05                            CALL    i2c_stop
0064+  0764 CB DB                               SET     3, E
0065+  0766 CD D3 07                            CALL    _pause
0066+  0769             
0067+  0769 CD EE 05                            CALL    i2c_write_to
0068+  076C D2 D8 07                            JP      NC, rtc_ack_error
0069+  076F 7B                                  LD      A, E
0070+  0770 CD 03 06                            CALL    i2c_write
0071+  0773 D2 D8 07                            JP      NC, rtc_ack_error
0072+  0776 CD C3 05                            CALL    i2c_stop
0073+  0779             
0074+  0779 26 6F                               LD      H, RTC_ADDRESS      ; Enable clock
0075+  077B 2E 00                               LD      L, RTC_REG_SEC      ; Read the seconds register
0076+  077D CD CD 05                            CALL    i2c_read_from
0077+  0780 D2 D8 07                            JP      NC, rtc_ack_error
0078+  0783 5F                                  LD      E, A
0079+  0784 CD C3 05                            CALL    i2c_stop
0080+  0787 CB FB                               SET     7, E                ; Set bit 7 to enable clock
0081+  0789                                     
0082+  0789 CD EE 05                            CALL    i2c_write_to
0083+  078C D2 D8 07                            JP      NC, rtc_ack_error
0084+  078F 7B                                  LD      A, E
0085+  0790 CD 03 06                            CALL    i2c_write
0086+  0793 D2 D8 07                            JP      NC, rtc_ack_error
0087+  0796 CD C3 05                            CALL    i2c_stop
0088+  0799             
0089+  0799 06 04       _set_ctrl               LD      B, 4
0090+  079B C5          _set_ctrl_loop          PUSH    BC
0091+  079C 26 6F                               LD      H, RTC_ADDRESS      ; Set Coarse mode and Output Pin to Square wave - gives 64 Hz pulse
0092+  079E 2E 07                               LD      L, RTC_REG_CTRL
0093+  07A0 CD EE 05                            CALL    i2c_write_to
0094+  07A3 D2 D8 07                            JP      NC, rtc_ack_error
0095+  07A6 3E 44                               LD      A, 044h
0096+  07A8 CD 03 06                            CALL    i2c_write
0097+  07AB D2 D8 07                            JP      NC, rtc_ack_error
0098+  07AE AF                                  XOR     A
0099+  07AF CD 03 06                            CALL    i2c_write
0100+  07B2 D2 D8 07                            JP      NC, rtc_ack_error
0101+  07B5 CD C3 05                            CALL    i2c_stop
0102+  07B8             
0103+  07B8 CD D3 07                            CALL    _pause
0104+  07BB             
0105+  07BB CD F5 07                            CALL    _check_ctrl
0106+  07BE C1                                  POP     BC
0107+  07BF C8                                  RET     Z
0108+  07C0             
0109+  07C0 CD 01 0C                            CALL    uart_inline
0110+  07C3 52 65 73 65                         .DB     "Reset trim\r\n",0
0110+  07C7 74 20 74 72 
0110+  07CB 69 6D 0D 0A 
0110+  07CF 00 
0111+  07D0 10 C9                               DJNZ    _set_ctrl_loop
0112+  07D2 C9                                  RET
0113+  07D3             
0114+  07D3 06 00       _pause                  LD      B, 0
0115+  07D5 10 FE                               DJNZ    $
0116+  07D7 C9                                  RET
0117+  07D8             
0118+  07D8 CD C3 05    rtc_ack_error           CALL    i2c_stop
0119+  07DB                                     
0120+  07DB CD 01 0C                            CALL    uart_inline
0121+  07DE 52 54 43 20                         .DB     "RTC Panic\n\r",0
0121+  07E2 50 61 6E 69 
0121+  07E6 63 0A 0D 00 
0122+  07EA 7C                                  LD      A, H
0123+  07EB CD E2 0B                            CALL    uart_hex
0124+  07EE 7D                                  LD      A, L
0125+  07EF CD E2 0B                            CALL    uart_hex
0126+  07F2 C3 F2 07                            JP      $
0127+  07F5             
0128+  07F5             ; Check that the control is set to coarse trim and 0 offset
0129+  07F5             ; Returns with Zero flag set if settings are good.
0130+  07F5             ;
0131+  07F5 26 6F       _check_ctrl             LD      H, RTC_ADDRESS      
0132+  07F7 2E 07                               LD      L, RTC_REG_CTRL
0133+  07F9 CD CD 05                            CALL    i2c_read_from
0134+  07FC D2 D8 07                            JP      NC, rtc_ack_error
0135+  07FF 5F                                  LD      E, A
0136+  0800 CD 23 06                            CALL    i2c_ack
0137+  0803 CD 10 06                            CALL    i2c_read
0138+  0806 57                                  LD      D, A
0139+  0807 CD C3 05                            CALL    i2c_stop
0140+  080A 7B                                  LD      A, E
0141+  080B 06 04                               LD      B, 4
0142+  080D FE 44                               CP      044h
0143+  080F C0                                  RET     NZ
0144+  0810 7A                                  LD      A, D
0145+  0811 A7                                  AND     A
0146+  0812 C9                                  RET 
0147+  0813             
0148+  0813 52 54 43 20 ack_error               .DB "RTC Ack error 0",0
0148+  0817 41 63 6B 20 
0148+  081B 65 72 72 6F 
0148+  081F 72 20 30 00 
0149+  0823             
0150+  0823             ;
0151+  0823             ;
0152+  0823             ; 00 - Second
0153+  0823             ; 01 - Minute
0154+  0823             ; 02 - Hour
0155+  0823             ; 03 - Wkday
0156+  0823             ; 04 - Date
0157+  0823             ; 05 - Month
0158+  0823             ; 06 - Year
0159+  0823             ;
0160+  0823             _offset_sec             .EQU    0
0161+  0823             _offset_min             .EQU    1
0162+  0823             _offset_hour            .EQU    2
0163+  0823             _offset_wkday           .EQU    3
0164+  0823             _offset_date            .EQU    4
0165+  0823             _offset_month           .EQU    5
0166+  0823             _offset_year            .EQU    6
0167+  0823             
0168+  0823             ;
0169+  0823             ; Read the time into the temp_data area
0170+  0823             ; Returns with Carry SET if successful, else Carry CLEAR
0171+  0823             ;
0172+  0823 26 6F       rtc_get_time2           LD      H, RTC_ADDRESS
0173+  0825 2E 00                               LD      L, RTC_REG_SEC
0174+  0827 CD CD 05                            CALL    i2c_read_from
0175+  082A 30 3E                               JR      NC, _get_error
0176+  082C 21 42 FF                            LD      HL, temp_data
0177+  082F 06 07                               LD      B, 7
0178+  0831 18 0D                               JR      _store_time2
0179+  0833 C5          _get_loop2              PUSH    BC
0180+  0834 CD B6 05                            CALL    i2c_start
0181+  0837 3E 6F                               LD      A, RTC_ADDRESS  
0182+  0839 CD FB 05                            CALL    i2c_address_r   
0183+  083C CD 10 06                            CALL    i2c_read
0184+  083F C1                                  POP     BC
0185+  0840 77          _store_time2            LD      (HL), A
0186+  0841 CD C3 05                            CALL    i2c_stop
0187+  0844 23                                  INC     HL
0188+  0845 10 EC                               DJNZ    _get_loop2
0189+  0847 37                                  SCF
0190+  0848 C9                                  RET
0191+  0849             
0192+  0849 26 6F       rtc_get_time            LD      H, RTC_ADDRESS
0193+  084B 2E 00                               LD      L, RTC_REG_SEC
0194+  084D CD CD 05                            CALL    i2c_read_from
0195+  0850 30 18                               JR      NC, _get_error
0196+  0852 21 42 FF                            LD      HL, temp_data
0197+  0855 06 07                               LD      B, 7
0198+  0857 18 08                               JR      _store_time
0199+  0859 C5          _get_loop               PUSH    BC 
0200+  085A CD 23 06                            CALL    i2c_ack
0201+  085D CD 10 06                            CALL    i2c_read
0202+  0860 C1                                  POP     BC
0203+  0861 77          _store_time             LD      (HL), A
0204+  0862 23                                  INC     HL
0205+  0863 10 F4                               DJNZ    _get_loop
0206+  0865 CD C3 05                            CALL    i2c_stop
0207+  0868 37                                  SCF
0208+  0869 C9                                  RET
0209+  086A             
0210+  086A CD C3 05    _get_error              CALL    i2c_stop
0211+  086D CD 01 0C                            CALL    uart_inline 
0212+  0870 45 72 72 6F                         .DB     "Error getting time\r\n", 0
0212+  0874 72 20 67 65 
0212+  0878 74 74 69 6E 
0212+  087C 67 20 74 69 
0212+  0880 6D 65 0D 0A 
0212+  0884 00 
0213+  0885 AF                                  XOR     A
0214+  0886 C9                                  RET
0215+  0887             
0216+  0887 CD 49 08    rtc_display_time        CALL    rtc_get_time
0217+  088A 11 28 FF                            LD      DE, scratch_pad
0218+  088D 3A 45 FF                            LD      A, (temp_data+_offset_wkday)
0219+  0890 21 22 09                            LD      HL, _weekdays
0220+  0893 E6 07                               AND     7
0221+  0895 4F                                  LD      C, A
0222+  0896             
0223+  0896 CD 11 09                            CALL    _search_word
0224+  0899 CD 1A 09                            CALL    _copy_word
0225+  089C                                     
0226+  089C CD F7 08    _get_date               CALL    _space
0227+  089F 3A 46 FF                            LD      A, (temp_data+_offset_date)
0228+  08A2 E6 3F                               AND     03Fh
0229+  08A4 CD FC 08                            CALL    _two_chars
0230+  08A7 CD F7 08                            CALL    _space
0231+  08AA             
0232+  08AA 3A 47 FF                            LD      A, (temp_data+_offset_month)
0233+  08AD 21 3E 09                            LD      HL, _months
0234+  08B0 E6 1F                               AND     01fh
0235+  08B2 CB 67                               BIT     4, A
0236+  08B4 28 02                               JR      Z, _month_ok
0237+  08B6 D6 06                               SUB     6
0238+  08B8 4F          _month_ok               LD      C,A
0239+  08B9             
0240+  08B9 CD 11 09                            CALL    _search_word
0241+  08BC CD 1A 09                            CALL    _copy_word
0242+  08BF CD F7 08                            CALL    _space
0243+  08C2 3E 20                               LD      A, 20h
0244+  08C4 CD FC 08                            CALL    _two_chars
0245+  08C7             
0246+  08C7 3A 48 FF                            LD      A, (temp_data+_offset_year)
0247+  08CA CD FC 08                            CALL    _two_chars
0248+  08CD CD F7 08                            CALL    _space
0249+  08D0             
0250+  08D0 3A 44 FF                            LD      A, (temp_data+_offset_hour)
0251+  08D3 E6 3F                               AND     03fh
0252+  08D5 CD FC 08                            CALL    _two_chars
0253+  08D8 CD F7 08                            CALL    _space
0254+  08DB             
0255+  08DB 3A 43 FF                            LD      A, (temp_data+_offset_min)
0256+  08DE E6 7F                               AND     07fh
0257+  08E0 CD FC 08                            CALL    _two_chars
0258+  08E3 CD F7 08                            CALL    _space
0259+  08E6             
0260+  08E6 3A 42 FF                            LD      A, (temp_data+_offset_sec)
0261+  08E9 E6 7F                               AND     07fh
0262+  08EB CD FC 08                            CALL    _two_chars
0263+  08EE AF                                  XOR     A
0264+  08EF 12                                  LD      (DE),A
0265+  08F0             
0266+  08F0 21 28 FF                            LD      HL, scratch_pad
0267+  08F3 CD 99 04                            CALL    disp_string
0268+  08F6 C9                                  RET
0269+  08F7             
0270+  08F7 3E 20       _space                  LD      A, ' '
0271+  08F9 12                                  LD      (DE), A
0272+  08FA 13                                  INC     DE
0273+  08FB C9                                  RET
0274+  08FC             
0275+  08FC 4F          _two_chars              LD      C,A
0276+  08FD CB 3F                               SRL     A
0277+  08FF CB 3F                               SRL     A
0278+  0901 CB 3F                               SRL     A
0279+  0903 CB 3F                               SRL     A
0280+  0905 C6 30                               ADD     A, '0'
0281+  0907 12                                  LD      (DE), A
0282+  0908 13                                  INC     DE
0283+  0909 79                                  LD      A,C
0284+  090A E6 0F                               AND     0fh
0285+  090C C6 30                               ADD     A, '0'
0286+  090E 12                                  LD      (DE), A
0287+  090F 13                                  INC     DE
0288+  0910 C9                                  RET
0289+  0911             ;
0290+  0911             ; Search table pointed to by HL for the C'th word (1-based)
0291+  0911             ; Returns with HL pointing to the word indexed by C, where the first word has index 1
0292+  0911             ;
0293+  0911 0D          _search_word            DEC     C
0294+  0912 C8                                  RET     Z
0295+  0913 7E          _next_char              LD      A, (HL)
0296+  0914 23                                  INC     HL
0297+  0915 A7                                  AND     A
0298+  0916 20 FB                               JR      NZ, _next_char
0299+  0918 18 F7                               JR      _search_word
0300+  091A             
0301+  091A             ;
0302+  091A             ; Copy from (DE) to (HL) until we encounter a 0
0303+  091A             ; Return with DE pointing to the next location, and HL pointing to the zero byte
0304+  091A             ;
0305+  091A 7E          _copy_word              LD      A, (HL)              ; HL -> Day of week string..
0306+  091B A7                                  AND     A
0307+  091C C8                                  RET     Z             
0308+  091D 12                                  LD      (DE), A
0309+  091E 23                                  INC     HL
0310+  091F 13                                  INC     DE
0311+  0920 18 F8                               JR      _copy_word
0312+  0922             
0313+  0922 4D 6F 6E 00 _weekdays               .DB "Mon",0
0314+  0926 54 75 65 00                         .DB "Tue",0
0315+  092A 57 65 64 00                         .DB "Wed",0
0316+  092E 54 68 75 00                         .DB "Thu",0
0317+  0932 46 72 69 00                         .DB "Fri",0
0318+  0936 53 61 74 00                         .DB "Sat",0
0319+  093A 53 75 6E 00                         .DB "Sun",0
0320+  093E             
0321+  093E 4A 61 6E 00 _months                 .DB "Jan",0
0322+  0942 46 65 62 00                         .DB "Feb",0
0323+  0946 4D 61 72 00                         .DB "Mar",0
0324+  094A 41 70 72 00                         .DB "Apr",0
0325+  094E 4D 61 79 00                         .DB "May",0
0326+  0952 4A 75 6E 00                         .DB "Jun",0
0327+  0956 4A 75 6C 00                         .DB "Jul",0
0328+  095A 41 75 67 00                         .DB "Aug",0
0329+  095E 53 65 70 00                         .DB "Sep",0
0330+  0962 4F 63 74 00                         .DB "Oct",0
0331+  0966 4E 6F 76 00                         .DB "Nov",0
0332+  096A 44 65 63 00                         .DB "Dec",0
0333+  096E             
0334+  096E                                     .MODULE main0160   096E                                 .INCLUDE  io.asm
0001+  096E             ;
0002+  096E             ; I/O routines.. specifically keyboard and serial
0003+  096E             ;
0004+  096E             ;
0005+  096E             
0006+  096E             
0007+  096E 21 08 FF    io_init             LD      HL, keyboard_state
0008+  0971 06 1D                           LD      B, io_data_end - keyboard_state
0009+  0973 AF                              XOR     A
0010+  0974 77          _init_loop          LD      (HL),A
0011+  0975 23                              INC     HL
0012+  0976 05                              DEC     B
0013+  0977 C2 74 09                        JP      NZ, _init_loop
0014+  097A AF                              XOR     A
0015+  097B 32 25 FF                        LD      (input_size),A
0016+  097E 32 24 FF                        LD      (input_free),A
0017+  0981 32 23 FF                        LD      (input_pos),A
0018+  0984 C9                              RET
0019+  0985             
0020+  0985             ; Poll the keyboard, adding raw codes to the keyboard_state buffer, and decoded characters to the input_buffer
0021+  0985             ;
0022+  0985 01 00 FE    keyboard_poll       LD      BC, 0FE00h          ; Keyboard row 0
0023+  0988 21 BC 0A                        LD      HL, keyboard
0024+  098B ED 78       _poll_loop          IN      A, (C)              ; BC -> Keyboard row port..
0025+  098D 16 01                           LD      D, 1                ; D -> Current Bit
0026+  098F 5F                              LD      E, A                ; E -> Key row bit set
0027+  0990 22 10 FF    _next_key           LD      (keyboard_pos), HL
0028+  0993 A2                              AND     D
0029+  0994 C2 10 0A                        JP      NZ, _released
0030+  0997                                                             ; Key is pressed... add it to state buffer
0031+  0997 C5                              PUSH    BC
0032+  0998 7E                              LD      A, (HL)             ; Raw key code in A
0033+  0999             
0034+  0999 21 08 FF                        LD      HL, keyboard_state
0035+  099C 06 08                           LD      B, _key_state_size
0036+  099E BE          _check_pressed      CP      (HL)
0037+  099F CA 3A 0A                        JP      Z, _do_nothing      ; Key already in state table - nothing to do..
0038+  09A2 23                              INC     HL
0039+  09A3 05                              DEC     B
0040+  09A4 C2 9E 09                        JP      NZ, _check_pressed
0041+  09A7                                                             ; Key wasn't pressed, so add it to the first free slot
0042+  09A7 21 08 FF                        LD      HL, keyboard_state
0043+  09AA 06 08                           LD      B, _key_state_size
0044+  09AC 4F                              LD      C, A
0045+  09AD AF                              XOR     A
0046+  09AE BE          _find_free          CP      (HL)
0047+  09AF CA BA 09                        JP      Z, _key_pressed
0048+  09B2 23                              INC     HL
0049+  09B3 05                              DEC     B
0050+  09B4 C2 AE 09                        JP      NZ, _find_free
0051+  09B7 C3 3A 0A                        JP      _do_nothing         ; No free slots, so ignore the key
0052+  09BA             
0053+  09BA 71          _key_pressed        LD      (HL), C             ; Found free slot, store the raw key code
0054+  09BB             
0055+  09BB                                                             ; Now find the actual character code and add it to the input buffer
0056+  09BB 3E 84                           LD      A, KEY_SHIFT        ; Handle modifier keys
0057+  09BD B9                              CP      C
0058+  09BE 06 01                           LD      B, KEY_SHIFT_BIT
0059+  09C0 CA 06 0A                        JP      Z, _modifier
0060+  09C3 3E 86                           LD      A, KEY_CTRL
0061+  09C5 B9                              CP      C
0062+  09C6 06 02                           LD      B, KEY_CTRL_BIT
0063+  09C8 CA 06 0A                        JP      Z, _modifier         
0064+  09CB             
0065+  09CB 2A 10 FF                        LD      HL, (keyboard_pos)  ; Get the current keyboard character location
0066+  09CE 01 30 00                        LD      BC, _keyboard_size
0067+  09D1 3A 12 FF                        LD      A, (key_shift_state)
0068+  09D4 A7                              AND     A
0069+  09D5 CA DD 09                        JP      Z, _get_key
0070+  09D8 09          _modifier_offset    ADD     HL, BC
0071+  09D9 3D                              DEC     A
0072+  09DA C2 D8 09                        JP      NZ, _modifier_offset
0073+  09DD             
0074+  09DD                                                             ; Write the character to the input buffer
0075+  09DD 7E          _get_key            LD      A, (HL)             ; Get the actual character...
0076+  09DE A7                              AND     A                   ; Skip blank character codes
0077+  09DF CA 3A 0A                        JP      Z, _do_nothing
0078+  09E2             
0079+  09E2 6F                              LD      L, A                ; Store it in L
0080+  09E3             
0081+  09E3 3A 25 FF                        LD      A, (input_size)     ; Now check we have space
0082+  09E6 FE 10                           CP      _input_buffer_size
0083+  09E8 CA 3A 0A                        JP      Z, _do_nothing
0084+  09EB             
0085+  09EB 3C                              INC     A
0086+  09EC 32 25 FF                        LD      (input_size), A
0087+  09EF             
0088+  09EF 06 00                           LD      B, 0
0089+  09F1 3A 24 FF                        LD      A, (input_free)
0090+  09F4 4F                              LD      C, A
0091+  09F5 7D                              LD      A, L                ; Get the character from L
0092+  09F6 21 13 FF                        LD      HL, input_buffer
0093+  09F9 09                              ADD     HL, BC
0094+  09FA 77                              LD      (HL), A             ; Store the character
0095+  09FB             
0096+  09FB 0C                              INC     C                   ; Point to next byte in input
0097+  09FC 3E 0F                           LD      A, 0Fh
0098+  09FE A1                              AND     C
0099+  09FF 32 24 FF                        LD      (input_free), A
0100+  0A02             
0101+  0A02 C1                              POP     BC
0102+  0A03 C3 3B 0A                        JP      _poll_next
0103+  0A06             
0104+  0A06 3A 12 FF    _modifier           LD      A, (key_shift_state)
0105+  0A09 B0                              OR      B
0106+  0A0A 32 12 FF                        LD      (key_shift_state), A
0107+  0A0D C3 3A 0A                        JP      _do_nothing
0108+  0A10             
0109+  0A10                                                             ; Key is not pressed... remove it from the state buffer if it was pressed (key up event)
0110+  0A10                                                             ; TODO: This is rather inefficient...
0111+  0A10 C5          _released           PUSH    BC
0112+  0A11 7E                              LD      A, (HL)             ; Raw key code in A
0113+  0A12 A7                              AND     A
0114+  0A13 CA 3A 0A                        JP      Z, _do_nothing      ; Ignore character zero
0115+  0A16             
0116+  0A16 21 08 FF                        LD      HL, keyboard_state
0117+  0A19 06 08                           LD      B, _key_state_size
0118+  0A1B BE          _check_released     CP      (HL)
0119+  0A1C CA 27 0A                        JP      Z, _handle_release
0120+  0A1F 23                              INC     HL
0121+  0A20 05                              DEC     B
0122+  0A21 C2 1B 0A                        JP      NZ, _check_released
0123+  0A24 C3 3A 0A                        JP      _do_nothing         ; Code not in state buffer, not released
0124+  0A27             
0125+  0A27 4F          _handle_release     LD      C, A
0126+  0A28 AF                              XOR     A
0127+  0A29 77                              LD      (HL), A             ; Remove it from the buffer 
0128+  0A2A             
0129+  0A2A                                                             ; TODO: We should probably tell someone about this...
0130+  0A2A 3E 84                           LD      A, KEY_SHIFT        ; Handle modifier keys
0131+  0A2C B9                              CP      C
0132+  0A2D 06 01                           LD      B, KEY_SHIFT_BIT
0133+  0A2F CA 50 0A                        JP      Z, _modifier_up
0134+  0A32 3E 86                           LD      A, KEY_CTRL
0135+  0A34 B9                              CP      C
0136+  0A35 06 02                           LD      B, KEY_CTRL_BIT
0137+  0A37 CA 50 0A                        JP      Z, _modifier_up     
0138+  0A3A             
0139+  0A3A C1          _do_nothing         POP     BC
0140+  0A3B             
0141+  0A3B 2A 10 FF    _poll_next          LD      HL, (keyboard_pos)
0142+  0A3E 7B                              LD      A, E                ; Get the bitmask back
0143+  0A3F 23                              INC     HL
0144+  0A40 CB 22                           SLA     D
0145+  0A42 CB 72                           BIT     6, D
0146+  0A44 CA 90 09                        JP      Z, _next_key
0147+  0A47             
0148+  0A47 CB 00                           RLC     B                   ; Move to the next key row
0149+  0A49 3E FE                           LD      A, 0FEh
0150+  0A4B B8                              CP      B
0151+  0A4C C2 8B 09                        JP      NZ, _poll_loop
0152+  0A4F C9                              RET
0153+  0A50             
0154+  0A50 3A 12 FF    _modifier_up        LD      A, (key_shift_state)
0155+  0A53 A8                              XOR     B
0156+  0A54 32 12 FF                        LD      (key_shift_state), A
0157+  0A57 C3 3A 0A                        JP      _do_nothing
0158+  0A5A             
0159+  0A5A             ;
0160+  0A5A             ; Reads the next available character in A, returning that or 0 if none are available
0161+  0A5A             ; Z flag is set if no character
0162+  0A5A             ; Uses HL, BC, A
0163+  0A5A 3A 25 FF    read_character      LD      A, (input_size)
0164+  0A5D A7                              AND     A
0165+  0A5E C8                              RET     Z
0166+  0A5F             
0167+  0A5F F3                              DI                          ; Make sure we don't get into a race condition..
0168+  0A60 3A 25 FF                        LD      A, (input_size)
0169+  0A63 3D                              DEC     A
0170+  0A64 32 25 FF                        LD      (input_size),A
0171+  0A67 3A 23 FF                        LD      A, (input_pos)
0172+  0A6A 4F                              LD      C, A
0173+  0A6B 3C                              INC     A
0174+  0A6C E6 0F                           AND     0Fh
0175+  0A6E 32 23 FF                        LD      (input_pos),A
0176+  0A71 06 00                           LD      B, 0
0177+  0A73 21 13 FF                        LD      HL, input_buffer
0178+  0A76 09                              ADD     HL, BC
0179+  0A77 7E                              LD      A, (HL)
0180+  0A78 B7                              OR      A
0181+  0A79 FB                              EI
0182+  0A7A C9                              RET
0183+  0A7B             
0184+  0A7B             ;
0185+  0A7B             ; Beep  - Middle C is 261.625Hz = 30578 cycles at 8Mhz - 15289 per half cycle
0186+  0A7B             ; Call with: HL - cycle time ( 0E80h = Middle C )
0187+  0A7B             ;             E - Number of cycles
0188+  0A7B             ;
0189+  0A7B             
0190+  0A7B             
0191+  0A7B DB 24       play_tone           IN      A, (AUDIO_PORT)        ; 200 cycles = 2/3 of a sec
0192+  0A7D 57                              LD      D, A
0193+  0A7E 7A          _beep_loop          LD      A, D
0194+  0A7F EE 08                           XOR     AUDIO_MASK
0195+  0A81 D3 24                           OUT     (AUDIO_PORT), A
0196+  0A83             
0197+  0A83 4D                              LD      C, L
0198+  0A84 44          _beep_delay0        LD      B, H
0199+  0A85 10 FE       _beep_delay1        DJNZ    _beep_delay1        ; 13 * (count-2) + 8
0200+  0A87 0D                              DEC     C
0201+  0A88 20 FA                           JR      NZ, _beep_delay0
0202+  0A8A             
0203+  0A8A 7A                              LD      A, D          
0204+  0A8B D3 24                           OUT     (AUDIO_PORT), A
0205+  0A8D             
0206+  0A8D 4D                              LD      C, L
0207+  0A8E 44          _beep_delay2        LD      B, H
0208+  0A8F 10 FE       _beep_delay3        DJNZ    _beep_delay3        ; 13 * (count-2) + 8
0209+  0A91 0D                              DEC     C
0210+  0A92 20 FA                           JR      NZ, _beep_delay2      
0211+  0A94             
0212+  0A94 1D                              DEC     E
0213+  0A95 20 E7                           JR      NZ, _beep_loop
0214+  0A97 C9                              RET
0215+  0A98             
0216+  0A98             ;
0217+  0A98             ; Get the next key press
0218+  0A98             ;
0219+  0A98 CD 5A 0A    get_key             CALL    read_character
0220+  0A9B 06 00                           LD      B, 0
0221+  0A9D 10 FE                           DJNZ    $
0222+  0A9F 28 F7                           JR      Z, get_key
0223+  0AA1 C9                              RET
0224+  0AA2             ;
0225+  0AA2             ; Wait for a key to be pressed and released
0226+  0AA2             ;
0227+  0AA2             ;
0228+  0AA2 CD 5A 0A    wait_for_key        CALL    read_character
0229+  0AA5 06 00                           LD      B, 0
0230+  0AA7 10 FE                           DJNZ    $
0231+  0AA9 28 F7                           JR      Z, wait_for_key
0232+  0AAB             
0233+  0AAB             ;
0234+  0AAB             ; wait until there are no keys being pressed
0235+  0AAB             ;
0236+  0AAB             ;
0237+  0AAB CD 5A 0A    wait_no_keys        CALL    read_character
0238+  0AAE 20 FB                           JR      NZ, wait_no_keys
0239+  0AB0 01 00 00                        LD      BC, 0h              ; Make sure key is released
0240+  0AB3 ED 78                           IN      A, (C)
0241+  0AB5 E6 3F                           AND     03Fh
0242+  0AB7 FE 3F                           CP      03Fh
0243+  0AB9 20 F0                           JR      NZ, wait_no_keys
0244+  0ABB C9                              RET
0245+  0ABC             
0246+  0ABC             ; Non-printing key codes
0247+  0ABC             ;
0248+  0ABC             KEY_ENTER       .EQU    13
0249+  0ABC             KEY_DELETE      .EQU    127
0250+  0ABC             
0251+  0ABC             
0252+  0ABC             ; Modifier and special keys have key codes with the top bit set..
0253+  0ABC             ;
0254+  0ABC             KEY_UP          .EQU    128
0255+  0ABC             KEY_DOWN        .EQU    129
0256+  0ABC             KEY_LEFT        .EQU    130
0257+  0ABC             KEY_RIGHT       .EQU    131
0258+  0ABC             KEY_SHIFT       .EQU    132
0259+  0ABC             KEY_CTRL        .EQU    134
0260+  0ABC             
0261+  0ABC             _keyboard_size  .EQU    48
0262+  0ABC             
0263+  0ABC             KEY_SHIFT_BIT   .EQU    1
0264+  0ABC             KEY_CTRL_BIT    .EQU    2
0265+  0ABC             
0266+  0ABC 76 63 78 7A keyboard        .DB    "vcxz", KEY_SHIFT, 0
0266+  0AC0 84 00 
0267+  0AC2 67 66 64 73                 .DB    "gfdsa", KEY_CTRL
0267+  0AC6 61 86 
0268+  0AC8 74 72 65 77                 .DB    "trewq", KEY_DOWN
0268+  0ACC 71 81 
0269+  0ACE 35 34 33 32                 .DB    "54321", KEY_UP  
0269+  0AD2 31 80 
0270+  0AD4 36 37 38 39                 .DB    "67890", KEY_DELETE
0270+  0AD8 30 7F 
0271+  0ADA 79 75 69 6F                 .DB    "yuiop;"
0271+  0ADE 70 3B 
0272+  0AE0 68 6A 6B 6C                 .DB    "hjkl.", KEY_ENTER
0272+  0AE4 2E 0D 
0273+  0AE6 62 6E 6D 20                 .DB    "bnm ", KEY_LEFT, KEY_RIGHT
0273+  0AEA 82 83 
0274+  0AEC             
0275+  0AEC 56 43 58 5A _shifted        .DB     "VCXZ", 0, 0
0275+  0AF0 00 00 
0276+  0AF2 47 46 44 53                 .DB     "GFDSA", 0
0276+  0AF6 41 00 
0277+  0AF8 54 52 45 57                 .DB     "TREWQ", 0              ; Shift + down?
0277+  0AFC 51 00 
0278+  0AFE 25 24 23 22                 .DB     "%$", 35, 34, "!", 0    ; Shift + up
0278+  0B02 21 00 
0279+  0B04 5E 26 2A 28                 .DB     "^&*()", 0              ; Shift + delete
0279+  0B08 29 00 
0280+  0B0A 59 55 49 4F                 .DB     "YUIOP:"
0280+  0B0E 50 3A 
0281+  0B10 48 4A 4B 4C                 .DB     "HJKL,", 0              ; Shift + enter
0281+  0B14 2C 00 
0282+  0B16 42 4E 4D 00                 .DB     "BNM", 0,0,0            ; Shift left + right
0282+  0B1A 00 00 
0283+  0B1C             
0284+  0B1C 00 00 00 00 _ctrl           .DB    0,0,0,0,0,0
0284+  0B20 00 00 
0285+  0B22 00 00 00 00                 .DB    0,0,0,0,0,0
0285+  0B26 00 00 
0286+  0B28 00 00 00 00                 .DB    0,0,0,0,0,0
0286+  0B2C 00 00 
0287+  0B2E 00 00 00 00                 .DB    0,0,0,0,0,0
0287+  0B32 00 00 
0288+  0B34 00 00 00 00                 .DB    0,0,0,0,0,0
0288+  0B38 00 00 
0289+  0B3A 00 00 2B 3D                 .DB    0,0, "+=-", 0
0289+  0B3E 2D 00 
0290+  0B40 00 3C 40 3E                 .DB    0, "<@>_", 0
0290+  0B44 5F 00 
0291+  0B46 00 3F 2F 00                 .DB    0, "?/", 0,0,0
0291+  0B4A 00 00 
0292+  0B4C             
0293+  0B4C 00 00 00 00 _shift_ctrl     .DB    0,0,0,0,0,0
0293+  0B50 00 00 
0294+  0B52 00 00 00 00                 .DB    0,0,0,0,0,0
0294+  0B56 00 00 
0295+  0B58 00 00 00 00                 .DB    0,0,0,0,0,0
0295+  0B5C 00 00 
0296+  0B5E 00 00 00 00                 .DB    0,0,0,0,0,0
0296+  0B62 00 00 
0297+  0B64 00 00 00 00                 .DB    0,0,0,0,0,0
0297+  0B68 00 00 
0298+  0B6A 00 00 00 00                 .DB    0,0,0,0,0,0
0298+  0B6E 00 00 
0299+  0B70 00 00 00 00                 .DB    0,0,0,0,0,0
0299+  0B74 00 00 
0300+  0B76 00 00 00 00                 .DB    0,0,0,0,0,0
0300+  0B7A 00 00 
0161   0B7C                                 .INCLUDE  uart.asm
0001+  0B7C             ;
0002+  0B7C             ; UART routines..
0003+  0B7C             ;
0004+  0B7C             ;
0005+  0B7C             
0006+  0B7C                                 .MODULE     uart
0007+  0B7C             
0008+  0B7C             ;
0009+  0B7C             ; Baud rates, assuming 1.8432Mhz crystal
0010+  0B7C             ;
0011+  0B7C             UART_9600           .EQU    12
0012+  0B7C             UART_19200          .EQU    6
0013+  0B7C             UART_38400          .EQU    3
0014+  0B7C             
0015+  0B7C             UART_MODE_AUTO      .EQU    022h   ; Auto flow mode
0016+  0B7C             UART_MODE_NO_FLOW   .EQU    000h   ; Auto RTS and CTS disabled
0017+  0B7C             UART_MODE_DIAG      .EQU    030h   ; Loopback mode
0018+  0B7C             
0019+  0B7C             ;
0020+  0B7C             ; Various constants
0021+  0B7C             ;
0022+  0B7C             UART_8N1            .EQU    003h
0023+  0B7C             UART_TIMEOUT        .EQU    50000
0024+  0B7C             
0025+  0B7C             _CTS_STATUS_MASK    .EQU    010h
0026+  0B7C             
0027+  0B7C             ;
0028+  0B7C             ; Set up the UART. Assume it has had time to settle after reset...
0029+  0B7C             ;
0030+  0B7C             ;
0031+  0B7C 01 06 00    uart_init           LD      BC, UART_19200              ; B is flow control, 0 -> No auto flow control
0032+  0B7F             
0033+  0B7F DB 26                           IN      A,(UART_MODEM_STATUS)       ; If CTS is enabled, assume we can use flow control
0034+  0B81 E6 10                           AND     _CTS_STATUS_MASK
0035+  0B83 28 02                           JR      Z, _no_listener
0036+  0B85             
0037+  0B85 06 22                           LD      B, UART_MODE_AUTO
0038+  0B87                                     
0039+  0B87 3E 80       _no_listener        LD      A, 80h                      ; Divisor Latch Setting Mode
0040+  0B89 D3 23                           OUT     (UART_LINE_CTRL), A         ;  - entered by writing 1 to bit 7 of LCR
0041+  0B8B 00                              NOP
0042+  0B8C 00                              NOP
0043+  0B8D 79                              LD      A, C
0044+  0B8E D3 20                           OUT     (UART_TX_RX), A
0045+  0B90 00                              NOP
0046+  0B91 00                              NOP
0047+  0B92 AF                              XOR     A
0048+  0B93 D3 21                           OUT     (UART_INT_ENABLE), A
0049+  0B95 00                              NOP
0050+  0B96 00                              NOP
0051+  0B97             
0052+  0B97 3E 03                           LD      A, UART_8N1                 ; Set 8N1 and exit divisor latch setting mode
0053+  0B99 D3 23                           OUT     (UART_LINE_CTRL), A
0054+  0B9B             
0055+  0B9B 3E 07                           LD      A, 07h                      ; Enable and clear FIFO registers
0056+  0B9D D3 22                           OUT     (UART_FIFO_CTRL), A
0057+  0B9F             
0058+  0B9F 78                              LD      A, B
0059+  0BA0 A7                              AND     A
0060+  0BA1 28 02                           JR      Z, _no_flowcontrol
0061+  0BA3             
0062+  0BA3 D3 24                           OUT     (UART_MODEM_CTRL), A
0063+  0BA5             
0064+  0BA5 00          _no_flowcontrol     NOP
0065+  0BA6 00                              NOP
0066+  0BA7 C9                              RET
0067+  0BA8             
0068+  0BA8             ;
0069+  0BA8             ; Send character in A to UART
0070+  0BA8             ; Preserves all registers
0071+  0BA8             ;
0072+  0BA8             ; Carry flag is set on return if the UART send succeeded, clear if it timed out
0073+  0BA8             ;
0074+  0BA8 C5          uart_send           PUSH    BC
0075+  0BA9 F5                              PUSH    AF
0076+  0BAA 01 50 C3                        LD      BC, UART_TIMEOUT
0077+  0BAD DB 25       _check_ready        IN      A, (UART_LINE_STATUS)
0078+  0BAF CB 6F                           BIT     5, A
0079+  0BB1 C2 BF 0B                        JP      NZ, _uart_ready             ; Bit 5 is set when the UART is ready
0080+  0BB4 0B                              DEC     BC
0081+  0BB5 78                              LD      A, B
0082+  0BB6 B1                              OR      C
0083+  0BB7 C2 AD 0B                        JP      NZ, _check_ready
0084+  0BBA             
0085+  0BBA F1                              POP     AF
0086+  0BBB C1                              POP     BC
0087+  0BBC 37                              SCF
0088+  0BBD 3F                              CCF
0089+  0BBE C9                              RET
0090+  0BBF             
0091+  0BBF F1          _uart_ready         POP     AF
0092+  0BC0 C1                              POP     BC
0093+  0BC1 D3 20                           OUT     (UART_TX_RX), A
0094+  0BC3 37                              SCF
0095+  0BC4 C9                              RET
0096+  0BC5             
0097+  0BC5             ;
0098+  0BC5             ; Check to see if there are any characters to receive
0099+  0BC5             ; Preserves all registers
0100+  0BC5             ;
0101+  0BC5             ; Returns with carry set if there are characters ready, clear if not
0102+  0BC5             ;
0103+  0BC5 F5          uart_ready          PUSH    AF
0104+  0BC6 DB 25                           IN      A, (UART_LINE_STATUS)
0105+  0BC8 CB 47                           BIT     0, A
0106+  0BCA CA D0 0B                        JP      Z, _not_ready
0107+  0BCD F1                              POP     AF
0108+  0BCE 37                              SCF
0109+  0BCF C9                              RET
0110+  0BD0             
0111+  0BD0 F1          _not_ready          POP     AF
0112+  0BD1 37                              SCF
0113+  0BD2 3F                              CCF
0114+  0BD3 C9                              RET
0115+  0BD4             
0116+  0BD4             ;
0117+  0BD4             ; Receive a character from the UART in A
0118+  0BD4             ; 
0119+  0BD4             ; Returns with a character in A and the carry flag set. If no characters
0120+  0BD4             ; are available, returns with the carry flag clear.
0121+  0BD4             ;
0122+  0BD4 DB 25       uart_receive        IN      A, (UART_LINE_STATUS)
0123+  0BD6 CB 47                           BIT     0, A
0124+  0BD8 CA DF 0B                        JP      Z, _no_character
0125+  0BDB DB 20                           IN      A, (UART_TX_RX)
0126+  0BDD 37                              SCF
0127+  0BDE C9                              RET
0128+  0BDF             
0129+  0BDF 37          _no_character       SCF
0130+  0BE0 3F                              CCF
0131+  0BE1 C9                              RET
0132+  0BE2             
0133+  0BE2             ;
0134+  0BE2             ; Write A has a hex byte
0135+  0BE2             ; Overwrites A...
0136+  0BE2             ;
0137+  0BE2 F5          uart_hex            PUSH    AF
0138+  0BE3 CB 2F                           SRA     A
0139+  0BE5 CB 2F                           SRA     A
0140+  0BE7 CB 2F                           SRA     A
0141+  0BE9 CB 2F                           SRA     A
0142+  0BEB CD F8 0B                        CALL    to_hex
0143+  0BEE CD A8 0B                        CALL    uart_send
0144+  0BF1 F1                              POP     AF
0145+  0BF2 CD F8 0B                        CALL    to_hex
0146+  0BF5 C3 A8 0B                        JP      uart_send
0147+  0BF8             ;
0148+  0BF8             ; Returns the low nibble of A as a hex digit
0149+  0BF8             ;
0150+  0BF8 E6 0F       to_hex              AND $0F      ;LOW NIBBLE ONLY
0151+  0BFA C6 90                           ADD A,$90
0152+  0BFC 27                              DAA 
0153+  0BFD CE 40                           ADC A,$40
0154+  0BFF 27                              DAA 
0155+  0C00 C9                              RET 
0156+  0C01             ;
0157+  0C01             ; Inline send. Sends the zero terminated string immediately following the call to this function to the UART.
0158+  0C01             ;
0159+  0C01             ; Returns with Carry set if the string was successfully sent, otherwise, carry is clear.
0160+  0C01             ;
0161+  0C01             ; Uses A 
0162+  0C01             ;
0163+  0C01 E3          uart_inline         EX      (SP), HL
0164+  0C02 CD 10 0C                        CALL    uart_string
0165+  0C05 DA 0E 0C                        JP      C, _inline_end      
0166+  0C08 7E          _find_end           LD      A, (HL)             ; Get the current character  (Carry preserved)
0167+  0C09 23                              INC     HL                  ; Point to next character    (Carry preserved)
0168+  0C0A A7                              AND     A                   ; Test if the current character was zero (Clears carry)
0169+  0C0B C2 08 0C                        JP      NZ, _find_end       ; If it was, we're done, otherwise repeat
0170+  0C0E E3          _inline_end         EX      (SP), HL
0171+  0C0F C9                              RET
0172+  0C10             ;
0173+  0C10             ; Send a zero terminated string pointed to by HL to the UART
0174+  0C10             ;
0175+  0C10             ; Returns with Carry Set if the string was sent sucessfully, clear otherwise
0176+  0C10             ;                    
0177+  0C10 7E          uart_string         LD      A,(HL)
0178+  0C11 23                              INC     HL
0179+  0C12 A7                              AND     A
0180+  0C13 CA 1D 0C                        JP      Z, _string_end
0181+  0C16 CD A8 0B                        CALL    uart_send
0182+  0C19 DA 10 0C                        JP      C, uart_string
0183+  0C1C C9                              RET
0184+  0C1D 37          _string_end         SCF
0185+  0C1E C9                              RET
0186+  0C1F             
0187+  0C1F                                 .MODULE main0162   0C1F             
0163   0C1F             bios_seg            .INCLUDE  bios.inc
0001+  0C1F             ; Autogenerated by hex2inc from bios.obj
0002+  0C1F             ;
0003+  0C1F             ; Start address E600, endAddress FC10 - total bytes 5649
0004+  0C1F             ;
0005+  0C1F 00 E6 11 16                      .DW 0e600h, 01611h ; Start, length 
0006+  0C23             
0007+  0C23 31 00 00 3E                      .DB 031h, 000h, 000h, 03Eh, 020h, 0D3h, 070h, 03Ch, 0D3h, 071h, 03Ch, 0D3h, 072h, 021h, 000h, 0FEh, 006h, 000h, 036h, 0FDh, 023h, 010h, 0FBh, 03Eh
0007+  0C27 20 D3 70 3C 
0007+  0C2B D3 71 3C D3 
0007+  0C2F 72 21 00 FE 
0007+  0C33 06 00 36 FD 
0007+  0C37 23 10 FB 3E 
0008+  0C3B C3 32 FD FD                      .DB 0C3h, 032h, 0FDh, 0FDh, 021h, 0D2h, 0E8h, 022h, 0FEh, 0FDh, 03Eh, 002h, 0D3h, 013h, 03Eh, 0B7h, 0D3h, 013h, 000h, 03Eh, 0CFh, 0D3h, 013h, 03Eh
0008+  0C3F 21 D2 E8 22 
0008+  0C43 FE FD 3E 02 
0008+  0C47 D3 13 3E B7 
0008+  0C4B D3 13 00 3E 
0008+  0C4F CF D3 13 3E 
0009+  0C53 FE ED 47 ED                      .DB 0FEh, 0EDh, 047h, 0EDh, 05Eh, 0FBh, 03Eh, 000h, 0CDh, 0CEh, 0EDh, 0CDh, 053h, 0EEh, 050h, 068h, 061h, 073h, 065h, 020h, 032h, 03Ah, 00Ah, 00Dh
0009+  0C57 5E FB 3E 00 
0009+  0C5B CD CE ED CD 
0009+  0C5F 53 EE 50 68 
0009+  0C63 61 73 65 20 
0009+  0C67 32 3A 0A 0D 
0010+  0C6B 00 CD FB F1                      .DB 000h, 0CDh, 0FBh, 0F1h, 03Eh, 001h, 032h, 006h, 0FFh, 03Eh, 003h, 0CDh, 0C3h, 0E8h, 079h, 0B0h, 020h, 01Eh, 0CDh, 053h, 0EEh, 04Eh, 06Fh, 020h
0010+  0C6F 3E 01 32 06 
0010+  0C73 FF 3E 03 CD 
0010+  0C77 C3 E8 79 B0 
0010+  0C7B 20 1E CD 53 
0010+  0C7F EE 4E 6F 20 
0011+  0C83 69 6E 74 65                      .DB 069h, 06Eh, 074h, 065h, 072h, 072h, 075h, 070h, 074h, 020h, 072h, 065h, 063h, 069h, 065h, 076h, 065h, 064h, 00Ah, 00Dh, 000h, 0C3h, 03Fh, 0E7h
0011+  0C87 72 72 75 70 
0011+  0C8B 74 20 72 65 
0011+  0C8F 63 69 65 76 
0011+  0C93 65 64 0A 0D 
0011+  0C97 00 C3 3F E7 
0012+  0C9B 3E 07 CD C3                      .DB 03Eh, 007h, 0CDh, 0C3h, 0E8h, 079h, 0B0h, 028h, 0D9h, 0C5h, 0E1h, 00Eh, 00Dh, 0CDh, 021h, 0EBh, 0E5h, 0D1h, 0CDh, 02Eh, 0EBh, 03Ah, 066h, 0EBh
0012+  0C9F E8 79 B0 28 
0012+  0CA3 D9 C5 E1 0E 
0012+  0CA7 0D CD 21 EB 
0012+  0CAB E5 D1 CD 2E 
0012+  0CAF EB 3A 66 EB 
0013+  0CB3 FE 06 38 11                      .DB 0FEh, 006h, 038h, 011h, 02Ah, 067h, 0EBh, 006h, 004h, 07Eh, 03Ch, 077h, 0FEh, 00Ah, 038h, 005h, 0AFh, 077h, 023h, 010h, 0F4h, 03Ah, 069h, 0EBh
0013+  0CB7 2A 67 EB 06 
0013+  0CBB 04 7E 3C 77 
0013+  0CBF FE 0A 38 05 
0013+  0CC3 AF 77 23 10 
0013+  0CC7 F4 3A 69 EB 
0014+  0CCB A7 28 05 C6                      .DB 0A7h, 028h, 005h, 0C6h, 030h, 032h, 0CFh, 0E6h, 03Ah, 068h, 0EBh, 0C6h, 030h, 032h, 0D0h, 0E6h, 03Ah, 067h, 0EBh, 0C6h, 030h, 032h, 0D2h, 0E6h
0014+  0CCF 30 32 CF E6 
0014+  0CD3 3A 68 EB C6 
0014+  0CD7 30 32 D0 E6 
0014+  0CDB 3A 67 EB C6 
0014+  0CDF 30 32 D2 E6 
0015+  0CE3 CD 53 EE 43                      .DB 0CDh, 053h, 0EEh, 043h, 06Ch, 06Fh, 063h, 06Bh, 020h, 073h, 070h, 065h, 065h, 064h, 020h, 020h, 030h, 02Ch, 030h, 04Dh, 068h, 07Ah, 000h, 0CDh
0015+  0CE7 6C 6F 63 6B 
0015+  0CEB 20 73 70 65 
0015+  0CEF 65 64 20 20 
0015+  0CF3 30 2C 30 4D 
0015+  0CF7 68 7A 00 CD 
0016+  0CFB 53 EE 0A 0D                      .DB 053h, 0EEh, 00Ah, 00Dh, 000h, 0CDh, 025h, 0F1h, 021h, 0C3h, 0E6h, 0AFh, 0CDh, 0FBh, 0F0h, 0CDh, 053h, 0EEh, 052h, 065h, 064h, 069h, 072h, 065h
0016+  0CFF 00 CD 25 F1 
0016+  0D03 21 C3 E6 AF 
0016+  0D07 CD FB F0 CD 
0016+  0D0B 53 EE 52 65 
0016+  0D0F 64 69 72 65 
0017+  0D13 63 74 69 6E                      .DB 063h, 074h, 069h, 06Eh, 067h, 020h, 069h, 06Eh, 074h, 065h, 072h, 072h, 075h, 070h, 074h, 073h, 020h, 00Ah, 00Dh, 000h, 0CDh, 0C0h, 0EBh, 0F3h
0017+  0D17 67 20 69 6E 
0017+  0D1B 74 65 72 72 
0017+  0D1F 75 70 74 73 
0017+  0D23 20 0A 0D 00 
0017+  0D27 CD C0 EB F3 
0018+  0D2B 21 DF E8 22                      .DB 021h, 0DFh, 0E8h, 022h, 0FEh, 0FDh, 0FBh, 0CDh, 053h, 0EEh, 057h, 061h, 069h, 074h, 069h, 06Eh, 067h, 020h, 066h, 06Fh, 072h, 020h, 061h, 020h
0018+  0D2F FE FD FB CD 
0018+  0D33 53 EE 57 61 
0018+  0D37 69 74 69 6E 
0018+  0D3B 67 20 66 6F 
0018+  0D3F 72 20 61 20 
0019+  0D43 6B 65 79 0A                      .DB 06Bh, 065h, 079h, 00Ah, 00Dh, 000h, 0CDh, 0F4h, 0ECh, 0CDh, 053h, 0EEh, 053h, 074h, 061h, 072h, 074h, 075h, 070h, 020h, 063h, 06Fh, 06Dh, 070h
0019+  0D47 0D 00 CD F4 
0019+  0D4B EC CD 53 EE 
0019+  0D4F 53 74 61 72 
0019+  0D53 74 75 70 20 
0019+  0D57 63 6F 6D 70 
0020+  0D5B 6C 65 74 65                      .DB 06Ch, 065h, 074h, 065h, 00Ah, 00Dh, 000h, 0CDh, 09Dh, 0F3h, 006h, 000h, 010h, 0FEh, 0CDh, 0ACh, 0ECh, 0C4h, 052h, 0E7h, 018h, 0F1h, 076h, 0C3h
0020+  0D5F 0A 0D 00 CD 
0020+  0D63 9D F3 06 00 
0020+  0D67 10 FE CD AC 
0020+  0D6B EC C4 52 E7 
0020+  0D6F 18 F1 76 C3 
0021+  0D73 4E E7 21 73                      .DB 04Eh, 0E7h, 021h, 073h, 0E7h, 03Eh, 0FFh, 0CDh, 0BCh, 0E7h, 03Ah, 007h, 0FFh, 032h, 050h, 0FFh, 0CDh, 0ACh, 0ECh, 0C4h, 025h, 0E8h, 03Ah, 050h
0021+  0D77 E7 3E FF CD 
0021+  0D7B BC E7 3A 07 
0021+  0D7F FF 32 50 FF 
0021+  0D83 CD AC EC C4 
0021+  0D87 25 E8 3A 50 
0022+  0D8B FF 4F 3A 07                      .DB 0FFh, 04Fh, 03Ah, 007h, 0FFh, 091h, 0FEh, 004h, 038h, 0EEh, 0C9h, 053h, 065h, 06Ch, 065h, 063h, 074h, 020h, 061h, 063h, 074h, 069h, 06Fh, 06Eh
0022+  0D8F FF 91 FE 04 
0022+  0D93 38 EE C9 53 
0022+  0D97 65 6C 65 63 
0022+  0D9B 74 20 61 63 
0022+  0D9F 74 69 6F 6E 
0023+  0DA3 00 6B EB 31                      .DB 000h, 06Bh, 0EBh, 031h, 029h, 020h, 053h, 074h, 061h, 072h, 074h, 020h, 043h, 050h, 02Fh, 04Dh, 000h, 027h, 0EAh, 032h, 029h, 020h, 04Dh, 06Fh
0023+  0DA7 29 20 53 74 
0023+  0DAB 61 72 74 20 
0023+  0DAF 43 50 2F 4D 
0023+  0DB3 00 27 EA 32 
0023+  0DB7 29 20 4D 6F 
0024+  0DBB 6E 69 74 6F                      .DB 06Eh, 069h, 074h, 06Fh, 072h, 000h, 0F1h, 0E8h, 033h, 029h, 020h, 059h, 04Dh, 06Fh, 064h, 065h, 06Dh, 000h, 08Ch, 0E8h, 034h, 029h, 020h, 04Dh
0024+  0DBF 72 00 F1 E8 
0024+  0DC3 33 29 20 59 
0024+  0DC7 4D 6F 64 65 
0024+  0DCB 6D 00 8C E8 
0024+  0DCF 34 29 20 4D 
0025+  0DD3 75 73 69 63                      .DB 075h, 073h, 069h, 063h, 020h, 064h, 065h, 06Dh, 06Fh, 000h, 000h, 000h, 032h, 051h, 0FFh, 022h, 04Ah, 0FFh, 0CDh, 025h, 0F1h, 02Ah, 04Ah, 0FFh
0025+  0DD7 20 64 65 6D 
0025+  0DDB 6F 00 00 00 
0025+  0DDF 32 51 FF 22 
0025+  0DE3 4A FF CD 25 
0025+  0DE7 F1 2A 4A FF 
0026+  0DEB AF CD FB F0                      .DB 0AFh, 0CDh, 0FBh, 0F0h, 023h, 022h, 04Ch, 0FFh, 0AFh, 032h, 04Fh, 0FFh, 04Fh, 07Eh, 023h, 0B6h, 028h, 009h, 023h, 07Eh, 023h, 0A7h, 020h, 0FBh
0026+  0DEF 23 22 4C FF 
0026+  0DF3 AF 32 4F FF 
0026+  0DF7 4F 7E 23 B6 
0026+  0DFB 28 09 23 7E 
0026+  0DFF 23 A7 20 FB 
0027+  0E03 0C 18 F2 79                      .DB 00Ch, 018h, 0F2h, 079h, 032h, 04Eh, 0FFh, 0C9h, 0CDh, 025h, 0F1h, 03Ah, 04Fh, 0FFh, 0A7h, 020h, 00Ch, 01Eh, 080h, 0CDh, 0FDh, 0EFh, 02Ah, 04Ah
0027+  0E07 32 4E FF C9 
0027+  0E0B CD 25 F1 3A 
0027+  0E0F 4F FF A7 20 
0027+  0E13 0C 1E 80 CD 
0027+  0E17 FD EF 2A 4A 
0028+  0E1B FF AF C3 FB                      .DB 0FFh, 0AFh, 0C3h, 0FBh, 0F0h, 04Fh, 016h, 001h, 02Ah, 04Ch, 0FFh, 023h, 023h, 00Dh, 079h, 028h, 009h, 0CBh, 022h, 07Eh, 023h, 0A7h, 020h, 0FBh
0028+  0E1F F0 4F 16 01 
0028+  0E23 2A 4C FF 23 
0028+  0E27 23 0D 79 28 
0028+  0E2B 09 CB 22 7E 
0028+  0E2F 23 A7 20 FB 
0029+  0E33 18 F1 3A 51                      .DB 018h, 0F1h, 03Ah, 051h, 0FFh, 0A2h, 01Eh, 018h, 028h, 002h, 01Eh, 080h, 0E5h, 0CDh, 0FDh, 0EFh, 0E1h, 0AFh, 0C3h, 0FBh, 0F0h, 04Fh, 03Ah, 007h
0029+  0E37 FF A2 1E 18 
0029+  0E3B 28 02 1E 80 
0029+  0E3F E5 CD FD EF 
0029+  0E43 E1 AF C3 FB 
0029+  0E47 F0 4F 3A 07 
0030+  0E4B FF 32 50 FF                      .DB 0FFh, 032h, 050h, 0FFh, 079h, 0FEh, 080h, 020h, 00Bh, 03Ah, 04Fh, 0FFh, 0A7h, 0C8h, 03Dh, 032h, 04Fh, 0FFh, 018h, 0ACh, 0FEh, 081h, 020h, 00Ch
0030+  0E4F 79 FE 80 20 
0030+  0E53 0B 3A 4F FF 
0030+  0E57 A7 C8 3D 32 
0030+  0E5B 4F FF 18 AC 
0030+  0E5F FE 81 20 0C 
0031+  0E63 3A 4E FF 4F                      .DB 03Ah, 04Eh, 0FFh, 04Fh, 03Ah, 04Fh, 0FFh, 0B9h, 0D0h, 03Ch, 018h, 0EBh, 0FEh, 00Dh, 020h, 024h, 03Ah, 04Fh, 0FFh, 0A7h, 0C8h, 02Ah, 04Ch, 0FFh
0031+  0E67 3A 4F FF B9 
0031+  0E6B D0 3C 18 EB 
0031+  0E6F FE 0D 20 24 
0031+  0E73 3A 4F FF A7 
0031+  0E77 C8 2A 4C FF 
0032+  0E7B 4F 16 01 0D                      .DB 04Fh, 016h, 001h, 00Dh, 020h, 00Bh, 03Ah, 051h, 0FFh, 0A2h, 0C8h, 0C1h, 04Eh, 023h, 046h, 0C5h, 0C9h, 023h, 023h, 0CBh, 022h, 07Eh, 023h, 0A7h
0032+  0E7F 20 0B 3A 51 
0032+  0E83 FF A2 C8 C1 
0032+  0E87 4E 23 46 C5 
0032+  0E8B C9 23 23 CB 
0032+  0E8F 22 7E 23 A7 
0033+  0E93 20 FB 18 E7                      .DB 020h, 0FBh, 018h, 0E7h, 057h, 02Ah, 04Ch, 0FFh, 07Eh, 04Fh, 023h, 046h, 0B6h, 0C8h, 023h, 07Eh, 0BAh, 020h, 002h, 0C5h, 0C9h, 07Eh, 023h, 0A7h
0033+  0E97 57 2A 4C FF 
0033+  0E9B 7E 4F 23 46 
0033+  0E9F B6 C8 23 7E 
0033+  0EA3 BA 20 02 C5 
0033+  0EA7 C9 7E 23 A7 
0034+  0EAB 20 FB 18 EC                      .DB 020h, 0FBh, 018h, 0ECh, 0CDh, 0FDh, 0ECh, 021h, 0FDh, 0F9h, 011h, 000h, 0EBh, 0CDh, 0C3h, 0F7h, 0E1h, 0E5h, 07Ch, 0CDh, 034h, 0EEh, 07Dh, 0CDh
0034+  0EAF CD FD EC 21 
0034+  0EB3 FD F9 11 00 
0034+  0EB7 EB CD C3 F7 
0034+  0EBB E1 E5 7C CD 
0034+  0EBF 34 EE 7D CD 
0035+  0EC3 34 EE CD 53                      .DB 034h, 0EEh, 0CDh, 053h, 0EEh, 020h, 047h, 06Fh, 074h, 020h, 062h, 061h, 063h, 06Bh, 020h, 066h, 072h, 06Fh, 06Dh, 020h, 06Dh, 075h, 073h, 069h
0035+  0EC7 EE 20 47 6F 
0035+  0ECB 74 20 62 61 
0035+  0ECF 63 6B 20 66 
0035+  0ED3 72 6F 6D 20 
0035+  0ED7 6D 75 73 69 
0036+  0EDB 63 0A 0D 00                      .DB 063h, 00Ah, 00Dh, 000h, 0CDh, 071h, 0EEh, 0CDh, 0FDh, 0ECh, 0C9h, 001h, 000h, 000h, 057h, 03Ah, 006h, 0FFh, 0A2h, 0C8h, 003h, 079h, 0B0h, 020h
0036+  0EDF CD 71 EE CD 
0036+  0EE3 FD EC C9 01 
0036+  0EE7 00 00 57 3A 
0036+  0EEB 06 FF A2 C8 
0036+  0EEF 03 79 B0 20 
0037+  0EF3 F6 C9 F3 E5                      .DB 0F6h, 0C9h, 0F3h, 0E5h, 02Ah, 006h, 0FFh, 023h, 022h, 006h, 0FFh, 0E1h, 0FBh, 0EDh, 04Dh, 0F3h, 0F5h, 0D9h, 0CDh, 0D7h, 0EBh, 02Ah, 006h, 0FFh
0037+  0EF7 2A 06 FF 23 
0037+  0EFB 22 06 FF E1 
0037+  0EFF FB ED 4D F3 
0037+  0F03 F5 D9 CD D7 
0037+  0F07 EB 2A 06 FF 
0038+  0F0B 23 22 06 FF                      .DB 023h, 022h, 006h, 0FFh, 0D9h, 0F1h, 0FBh, 0EDh, 04Dh, 0CDh, 0F0h, 0F0h, 053h, 074h, 061h, 072h, 074h, 020h, 074h, 072h, 061h, 06Eh, 073h, 066h
0038+  0F0F D9 F1 FB ED 
0038+  0F13 4D CD F0 F0 
0038+  0F17 53 74 61 72 
0038+  0F1B 74 20 74 72 
0038+  0F1F 61 6E 73 66 
0039+  0F23 65 72 00 21                      .DB 065h, 072h, 000h, 021h, 074h, 0E5h, 011h, 0FFh, 0FFh, 0CDh, 084h, 0F4h, 0A7h, 020h, 073h, 00Eh, 013h, 03Ah, 074h, 0E5h, 0CBh, 07Fh, 020h, 00Bh
0039+  0F27 74 E5 11 FF 
0039+  0F2B FF CD 84 F4 
0039+  0F2F A7 20 73 0E 
0039+  0F33 13 3A 74 E5 
0039+  0F37 CB 7F 20 0B 
0040+  0F3B A7 28 04 3E                      .DB 0A7h, 028h, 004h, 03Eh, 004h, 018h, 002h, 03Eh, 008h, 0B1h, 04Fh, 021h, 0CEh, 0E9h, 079h, 0CDh, 0BCh, 0E7h, 0CDh, 0ACh, 0ECh, 0C4h, 025h, 0E8h
0040+  0F3F 04 18 02 3E 
0040+  0F43 08 B1 4F 21 
0040+  0F47 CE E9 79 CD 
0040+  0F4B BC E7 CD AC 
0040+  0F4F EC C4 25 E8 
0041+  0F53 18 F8 ED 5B                      .DB 018h, 0F8h, 0EDh, 05Bh, 078h, 0E5h, 0C3h, 02Ah, 0EAh, 02Ah, 078h, 0E5h, 0E5h, 0C9h, 0CDh, 0F0h, 0F0h, 057h, 072h, 069h, 074h, 069h, 06Eh, 067h
0041+  0F57 78 E5 C3 2A 
0041+  0F5B EA 2A 78 E5 
0041+  0F5F E5 C9 CD F0 
0041+  0F63 F0 57 72 69 
0041+  0F67 74 69 6E 67 
0042+  0F6B 00 3A 74 E5                      .DB 000h, 03Ah, 074h, 0E5h, 057h, 02Ah, 078h, 0E5h, 0EDh, 04Bh, 076h, 0E5h, 0CDh, 097h, 0F7h, 03Ah, 077h, 0E5h, 021h, 072h, 0E9h, 0CDh, 0D7h, 0EAh
0042+  0F6F 57 2A 78 E5 
0042+  0F73 ED 4B 76 E5 
0042+  0F77 CD 97 F7 3A 
0042+  0F7B 77 E5 21 72 
0042+  0F7F E9 CD D7 EA 
0043+  0F83 3A 76 E5 21                      .DB 03Ah, 076h, 0E5h, 021h, 074h, 0E9h, 0CDh, 0D7h, 0EAh, 0CDh, 0F0h, 0F0h, 057h, 072h, 06Fh, 074h, 065h, 020h, 030h, 030h, 030h, 030h, 068h, 020h
0043+  0F87 74 E9 CD D7 
0043+  0F8B EA CD F0 F0 
0043+  0F8F 57 72 6F 74 
0043+  0F93 65 20 30 30 
0043+  0F97 30 30 68 20 
0044+  0F9B 62 79 74 65                      .DB 062h, 079h, 074h, 065h, 073h, 000h, 0CDh, 0EAh, 0ECh, 0C9h, 0C6h, 030h, 032h, 0A7h, 0E9h, 032h, 0C4h, 0E9h, 079h, 0F5h, 0FEh, 00Ah, 038h, 001h
0044+  0F9F 73 00 CD EA 
0044+  0FA3 EC C9 C6 30 
0044+  0FA7 32 A7 E9 32 
0044+  0FAB C4 E9 79 F5 
0044+  0FAF FE 0A 38 01 
0045+  0FB3 AF C6 30 32                      .DB 0AFh, 0C6h, 030h, 032h, 0A8h, 0E9h, 032h, 0C5h, 0E9h, 0CDh, 0F0h, 0F0h, 045h, 072h, 072h, 06Fh, 072h, 020h, 063h, 06Fh, 064h, 065h, 020h, 000h
0045+  0FB7 A8 E9 32 C5 
0045+  0FBB E9 CD F0 F0 
0045+  0FBF 45 72 72 6F 
0045+  0FC3 72 20 63 6F 
0045+  0FC7 64 65 20 00 
0046+  0FCB 00 20 00 CD                      .DB 000h, 020h, 000h, 0CDh, 0F4h, 0ECh, 0F1h, 0CDh, 034h, 0EEh, 0CDh, 053h, 0EEh, 00Dh, 00Ah, 04Dh, 06Fh, 064h, 065h, 06Dh, 020h, 065h, 072h, 072h
0046+  0FCF F4 EC F1 CD 
0046+  0FD3 34 EE CD 53 
0046+  0FD7 EE 0D 0A 4D 
0046+  0FDB 6F 64 65 6D 
0046+  0FDF 20 65 72 72 
0047+  0FE3 6F 72 3A 20                      .DB 06Fh, 072h, 03Ah, 020h, 000h, 000h, 00Dh, 00Ah, 000h, 011h, 074h, 0E5h, 018h, 05Ch, 046h, 069h, 06Ch, 065h, 020h, 04Fh, 04Bh, 02Eh, 020h, 053h
0047+  0FE7 00 00 0D 0A 
0047+  0FEB 00 11 74 E5 
0047+  0FEF 18 5C 46 69 
0047+  0FF3 6C 65 20 4F 
0047+  0FF7 4B 2E 20 53 
0048+  0FFB 65 6C 65 63                      .DB 065h, 06Ch, 065h, 063h, 074h, 020h, 061h, 063h, 074h, 069h, 06Fh, 06Eh, 000h, 032h, 0E9h, 056h, 069h, 065h, 077h, 020h, 066h, 069h, 06Ch, 065h
0048+  0FFF 74 20 61 63 
0048+  1003 74 69 6F 6E 
0048+  1007 00 32 E9 56 
0048+  100B 69 65 77 20 
0048+  100F 66 69 6C 65 
0049+  1013 00 39 E9 45                      .DB 000h, 039h, 0E9h, 045h, 078h, 065h, 063h, 075h, 074h, 065h, 000h, 03Eh, 0E9h, 057h, 072h, 069h, 074h, 065h, 020h, 074h, 06Fh, 020h, 066h, 06Ch
0049+  1017 78 65 63 75 
0049+  101B 74 65 00 3E 
0049+  101F E9 57 72 69 
0049+  1023 74 65 20 74 
0049+  1027 6F 20 66 6C 
0050+  102B 61 73 68 00                      .DB 061h, 073h, 068h, 000h, 03Eh, 0E9h, 055h, 070h, 064h, 061h, 074h, 065h, 020h, 066h, 069h, 072h, 06Dh, 077h, 061h, 072h, 065h, 000h, 03Dh, 0E9h
0050+  102F 3E E9 55 70 
0050+  1033 64 61 74 65 
0050+  1037 20 66 69 72 
0050+  103B 6D 77 61 72 
0050+  103F 65 00 3D E9 
0051+  1043 45 78 69 74                      .DB 045h, 078h, 069h, 074h, 000h, 000h, 000h, 011h, 000h, 080h, 0CDh, 0FDh, 0ECh, 0AFh, 032h, 004h, 0FFh, 0CDh, 0EFh, 0EAh, 0D5h, 03Ah, 004h, 0FFh
0051+  1047 00 00 00 11 
0051+  104B 00 80 CD FD 
0051+  104F EC AF 32 04 
0051+  1053 FF CD EF EA 
0051+  1057 D5 3A 04 FF 
0052+  105B A7 20 05 CD                      .DB 0A7h, 020h, 005h, 0CDh, 09Ch, 0EAh, 018h, 003h, 0CDh, 08Ah, 0EAh, 0CDh, 0ACh, 0ECh, 028h, 0FBh, 0D1h, 0FEh, 080h, 020h, 00Ch, 062h, 06Bh, 011h
0052+  105F 9C EA 18 03 
0052+  1063 CD 8A EA CD 
0052+  1067 AC EC 28 FB 
0052+  106B D1 FE 80 20 
0052+  106F 0C 62 6B 11 
0053+  1073 08 00 A7 ED                      .DB 008h, 000h, 0A7h, 0EDh, 052h, 054h, 05Dh, 018h, 0DBh, 0FEh, 081h, 020h, 008h, 021h, 008h, 000h, 019h, 054h, 05Dh, 018h, 0CFh, 0FEh, 07Fh, 020h
0053+  1077 52 54 5D 18 
0053+  107B DB FE 81 20 
0053+  107F 08 21 08 00 
0053+  1083 19 54 5D 18 
0053+  1087 CF FE 7F 20 
0054+  108B 09 1E 80 CD                      .DB 009h, 01Eh, 080h, 0CDh, 0FDh, 0EFh, 0CDh, 0FDh, 0ECh, 0C9h, 0FEh, 00Dh, 020h, 0BEh, 03Ah, 004h, 0FFh, 02Fh, 032h, 004h, 0FFh, 0A7h, 020h, 005h
0054+  108F FD EF CD FD 
0054+  1093 EC C9 FE 0D 
0054+  1097 20 BE 3A 04 
0054+  109B FF 2F 32 04 
0054+  109F FF A7 20 05 
0055+  10A3 CD EF EA 18                      .DB 0CDh, 0EFh, 0EAh, 018h, 0AFh, 0CDh, 012h, 0EBh, 018h, 0AAh, 021h, 028h, 0FFh, 006h, 008h, 0D5h, 01Ah, 013h, 0CDh, 0D7h, 0EAh, 010h, 0F9h, 0D1h
0055+  10A7 AF CD 12 EB 
0055+  10AB 18 AA 21 28 
0055+  10AF FF 06 08 D5 
0055+  10B3 1A 13 CD D7 
0055+  10B7 EA 10 F9 D1 
0056+  10BB 06 08 18 1B                      .DB 006h, 008h, 018h, 01Bh, 021h, 028h, 0FFh, 07Ah, 0CDh, 0D7h, 0EAh, 07Bh, 0CDh, 0D7h, 0EAh, 036h, 020h, 023h, 006h, 008h, 0D5h, 01Ah, 013h, 0CDh
0056+  10BF 21 28 FF 7A 
0056+  10C3 CD D7 EA 7B 
0056+  10C7 CD D7 EA 36 
0056+  10CB 20 23 06 08 
0056+  10CF D5 1A 13 CD 
0057+  10D3 D7 EA 10 F9                      .DB 0D7h, 0EAh, 010h, 0F9h, 0D1h, 006h, 003h, 01Ah, 013h, 0CDh, 0C6h, 0EAh, 010h, 0F9h, 0AFh, 077h, 021h, 028h, 0FFh, 0C3h, 0FBh, 0F0h, 0FEh, 020h
0057+  10D7 D1 06 03 1A 
0057+  10DB 13 CD C6 EA 
0057+  10DF 10 F9 AF 77 
0057+  10E3 21 28 FF C3 
0057+  10E7 FB F0 FE 20 
0058+  10EB D2 CD EA 3E                      .DB 0D2h, 0CDh, 0EAh, 03Eh, 02Eh, 0FEh, 080h, 0DAh, 0D4h, 0EAh, 03Eh, 02Eh, 077h, 023h, 0C9h, 04Fh, 0CBh, 03Fh, 0CBh, 03Fh, 0CBh, 03Fh, 0CBh, 03Fh
0058+  10EF 2E FE 80 DA 
0058+  10F3 D4 EA 3E 2E 
0058+  10F7 77 23 C9 4F 
0058+  10FB CB 3F CB 3F 
0058+  10FF CB 3F CB 3F 
0059+  1103 CD E4 EA 79                      .DB 0CDh, 0E4h, 0EAh, 079h, 0E6h, 00Fh, 0C6h, 090h, 027h, 0CEh, 040h, 027h, 077h, 023h, 0C9h, 0D5h, 01Eh, 080h, 0CDh, 0FDh, 0EFh, 03Eh, 000h, 006h
0059+  1107 E6 0F C6 90 
0059+  110B 27 CE 40 27 
0059+  110F 77 23 C9 D5 
0059+  1113 1E 80 CD FD 
0059+  1117 EF 3E 00 06 
0060+  111B 04 CD 05 EB                      .DB 004h, 0CDh, 005h, 0EBh, 03Eh, 015h, 006h, 003h, 0CDh, 005h, 0EBh, 0D1h, 0C9h, 04Fh, 0C5h, 00Eh, 018h, 0CDh, 066h, 0F0h, 0C1h, 079h, 03Ch, 010h
0060+  111F 3E 15 06 03 
0060+  1123 CD 05 EB D1 
0060+  1127 C9 4F C5 0E 
0060+  112B 18 CD 66 F0 
0060+  112F C1 79 3C 10 
0061+  1133 F4 C9 D5 1E                      .DB 0F4h, 0C9h, 0D5h, 01Eh, 080h, 0CDh, 0FDh, 0EFh, 03Eh, 010h, 006h, 008h, 0CDh, 005h, 0EBh, 0D1h, 0C9h, 006h, 010h, 0AFh, 029h, 017h, 0B9h, 038h
0061+  1137 80 CD FD EF 
0061+  113B 3E 10 06 08 
0061+  113F CD 05 EB D1 
0061+  1143 C9 06 10 AF 
0061+  1147 29 17 B9 38 
0062+  114B 02 2C 91 10                      .DB 002h, 02Ch, 091h, 010h, 0F7h, 0C9h, 0AFh, 021h, 066h, 0EBh, 006h, 005h, 077h, 023h, 010h, 0FCh, 006h, 010h, 00Eh, 005h, 021h, 066h, 0EBh, 07Eh
0062+  114F F7 C9 AF 21 
0062+  1153 66 EB 06 05 
0062+  1157 77 23 10 FC 
0062+  115B 06 10 0E 05 
0062+  115F 21 66 EB 7E 
0063+  1163 FE 05 38 03                      .DB 0FEh, 005h, 038h, 003h, 0C6h, 003h, 077h, 023h, 00Dh, 020h, 0F4h, 021h, 066h, 0EBh, 00Eh, 005h, 0CBh, 023h, 0CBh, 012h, 07Eh, 0CBh, 017h, 0CBh
0063+  1167 C6 03 77 23 
0063+  116B 0D 20 F4 21 
0063+  116F 66 EB 0E 05 
0063+  1173 CB 23 CB 12 
0063+  1177 7E CB 17 CB 
0064+  117B 67 28 03 E6                      .DB 067h, 028h, 003h, 0E6h, 00Fh, 037h, 077h, 023h, 00Dh, 020h, 0F1h, 010h, 0D5h, 0C9h, 000h, 000h, 000h, 000h, 000h, 021h, 028h, 0FFh, 03Eh, 03Eh
0064+  117F 0F 37 77 23 
0064+  1183 0D 20 F1 10 
0064+  1187 D5 C9 00 00 
0064+  118B 00 00 00 21 
0064+  118F 28 FF 3E 3E 
0065+  1193 06 19 77 23                      .DB 006h, 019h, 077h, 023h, 0AFh, 010h, 0FBh, 032h, 052h, 0FFh, 0CDh, 025h, 0F1h, 0AFh, 021h, 028h, 0FFh, 0CDh, 0FBh, 0F0h, 0CDh, 0ACh, 0ECh, 028h
0065+  1197 AF 10 FB 32 
0065+  119B 52 FF CD 25 
0065+  119F F1 AF 21 28 
0065+  11A3 FF CD FB F0 
0065+  11A7 CD AC EC 28 
0066+  11AB FB 4F FE 7F                      .DB 0FBh, 04Fh, 0FEh, 07Fh, 028h, 01Dh, 0FEh, 00Dh, 028h, 02Dh, 0CBh, 07Fh, 020h, 0EEh, 03Ah, 052h, 0FFh, 0FEh, 017h, 028h, 0E7h, 03Ch, 032h, 052h
0066+  11AF 28 1D FE 0D 
0066+  11B3 28 2D CB 7F 
0066+  11B7 20 EE 3A 52 
0066+  11BB FF FE 17 28 
0066+  11BF E7 3C 32 52 
0067+  11C3 FF 21 28 FF                      .DB 0FFh, 021h, 028h, 0FFh, 05Fh, 016h, 000h, 019h, 071h, 018h, 0D2h, 03Ah, 052h, 0FFh, 0A7h, 028h, 0D3h, 021h, 028h, 0FFh, 05Fh, 016h, 000h, 019h
0067+  11C7 5F 16 00 19 
0067+  11CB 71 18 D2 3A 
0067+  11CF 52 FF A7 28 
0067+  11D3 D3 21 28 FF 
0067+  11D7 5F 16 00 19 
0068+  11DB 72 3D 32 52                      .DB 072h, 03Dh, 032h, 052h, 0FFh, 018h, 0BBh, 0C9h, 021h, 008h, 0FFh, 006h, 01Dh, 0AFh, 077h, 023h, 005h, 0C2h, 0C6h, 0EBh, 0AFh, 032h, 025h, 0FFh
0068+  11DF FF 18 BB C9 
0068+  11E3 21 08 FF 06 
0068+  11E7 1D AF 77 23 
0068+  11EB 05 C2 C6 EB 
0068+  11EF AF 32 25 FF 
0069+  11F3 32 24 FF 32                      .DB 032h, 024h, 0FFh, 032h, 023h, 0FFh, 0C9h, 001h, 000h, 0FEh, 021h, 00Eh, 0EDh, 0EDh, 078h, 016h, 001h, 05Fh, 022h, 010h, 0FFh, 0A2h, 0C2h, 062h
0069+  11F7 23 FF C9 01 
0069+  11FB 00 FE 21 0E 
0069+  11FF ED ED 78 16 
0069+  1203 01 5F 22 10 
0069+  1207 FF A2 C2 62 
0070+  120B EC C5 7E 21                      .DB 0ECh, 0C5h, 07Eh, 021h, 008h, 0FFh, 006h, 008h, 0BEh, 0CAh, 08Ch, 0ECh, 023h, 005h, 0C2h, 0F0h, 0EBh, 021h, 008h, 0FFh, 006h, 008h, 04Fh, 0AFh
0070+  120F 08 FF 06 08 
0070+  1213 BE CA 8C EC 
0070+  1217 23 05 C2 F0 
0070+  121B EB 21 08 FF 
0070+  121F 06 08 4F AF 
0071+  1223 BE CA 0C EC                      .DB 0BEh, 0CAh, 00Ch, 0ECh, 023h, 005h, 0C2h, 000h, 0ECh, 0C3h, 08Ch, 0ECh, 071h, 03Eh, 084h, 0B9h, 006h, 001h, 0CAh, 058h, 0ECh, 03Eh, 086h, 0B9h
0071+  1227 23 05 C2 00 
0071+  122B EC C3 8C EC 
0071+  122F 71 3E 84 B9 
0071+  1233 06 01 CA 58 
0071+  1237 EC 3E 86 B9 
0072+  123B 06 02 CA 58                      .DB 006h, 002h, 0CAh, 058h, 0ECh, 02Ah, 010h, 0FFh, 001h, 030h, 000h, 03Ah, 012h, 0FFh, 0A7h, 0CAh, 02Fh, 0ECh, 009h, 03Dh, 0C2h, 02Ah, 0ECh, 07Eh
0072+  123F EC 2A 10 FF 
0072+  1243 01 30 00 3A 
0072+  1247 12 FF A7 CA 
0072+  124B 2F EC 09 3D 
0072+  124F C2 2A EC 7E 
0073+  1253 A7 CA 8C EC                      .DB 0A7h, 0CAh, 08Ch, 0ECh, 06Fh, 03Ah, 025h, 0FFh, 0FEh, 010h, 0CAh, 08Ch, 0ECh, 03Ch, 032h, 025h, 0FFh, 006h, 000h, 03Ah, 024h, 0FFh, 04Fh, 07Dh
0073+  1257 6F 3A 25 FF 
0073+  125B FE 10 CA 8C 
0073+  125F EC 3C 32 25 
0073+  1263 FF 06 00 3A 
0073+  1267 24 FF 4F 7D 
0074+  126B 21 13 FF 09                      .DB 021h, 013h, 0FFh, 009h, 077h, 00Ch, 03Eh, 00Fh, 0A1h, 032h, 024h, 0FFh, 0C1h, 0C3h, 08Dh, 0ECh, 03Ah, 012h, 0FFh, 0B0h, 032h, 012h, 0FFh, 0C3h
0074+  126F 77 0C 3E 0F 
0074+  1273 A1 32 24 FF 
0074+  1277 C1 C3 8D EC 
0074+  127B 3A 12 FF B0 
0074+  127F 32 12 FF C3 
0075+  1283 8C EC C5 7E                      .DB 08Ch, 0ECh, 0C5h, 07Eh, 0A7h, 0CAh, 08Ch, 0ECh, 021h, 008h, 0FFh, 006h, 008h, 0BEh, 0CAh, 079h, 0ECh, 023h, 005h, 0C2h, 06Dh, 0ECh, 0C3h, 08Ch
0075+  1287 A7 CA 8C EC 
0075+  128B 21 08 FF 06 
0075+  128F 08 BE CA 79 
0075+  1293 EC 23 05 C2 
0075+  1297 6D EC C3 8C 
0076+  129B EC 4F AF 77                      .DB 0ECh, 04Fh, 0AFh, 077h, 03Eh, 084h, 0B9h, 006h, 001h, 0CAh, 0A2h, 0ECh, 03Eh, 086h, 0B9h, 006h, 002h, 0CAh, 0A2h, 0ECh, 0C1h, 02Ah, 010h, 0FFh
0076+  129F 3E 84 B9 06 
0076+  12A3 01 CA A2 EC 
0076+  12A7 3E 86 B9 06 
0076+  12AB 02 CA A2 EC 
0076+  12AF C1 2A 10 FF 
0077+  12B3 7B 23 CB 22                      .DB 07Bh, 023h, 0CBh, 022h, 0CBh, 072h, 0CAh, 0E2h, 0EBh, 0CBh, 000h, 03Eh, 0FEh, 0B8h, 0C2h, 0DDh, 0EBh, 0C9h, 03Ah, 012h, 0FFh, 0A8h, 032h, 012h
0077+  12B7 CB 72 CA E2 
0077+  12BB EB CB 00 3E 
0077+  12BF FE B8 C2 DD 
0077+  12C3 EB C9 3A 12 
0077+  12C7 FF A8 32 12 
0078+  12CB FF C3 8C EC                      .DB 0FFh, 0C3h, 08Ch, 0ECh, 03Ah, 025h, 0FFh, 0A7h, 0C8h, 0F3h, 03Ah, 025h, 0FFh, 03Dh, 032h, 025h, 0FFh, 03Ah, 023h, 0FFh, 04Fh, 03Ch, 0E6h, 00Fh
0078+  12CF 3A 25 FF A7 
0078+  12D3 C8 F3 3A 25 
0078+  12D7 FF 3D 32 25 
0078+  12DB FF 3A 23 FF 
0078+  12DF 4F 3C E6 0F 
0079+  12E3 32 23 FF 06                      .DB 032h, 023h, 0FFh, 006h, 000h, 021h, 013h, 0FFh, 009h, 07Eh, 0B7h, 0FBh, 0C9h, 0DBh, 024h, 057h, 07Ah, 0EEh, 008h, 0D3h, 024h, 04Dh, 044h, 010h
0079+  12E7 00 21 13 FF 
0079+  12EB 09 7E B7 FB 
0079+  12EF C9 DB 24 57 
0079+  12F3 7A EE 08 D3 
0079+  12F7 24 4D 44 10 
0080+  12FB FE 0D 20 FA                      .DB 0FEh, 00Dh, 020h, 0FAh, 07Ah, 0D3h, 024h, 04Dh, 044h, 010h, 0FEh, 00Dh, 020h, 0FAh, 01Dh, 020h, 0E7h, 0C9h, 0CDh, 0ACh, 0ECh, 006h, 000h, 010h
0080+  12FF 7A D3 24 4D 
0080+  1303 44 10 FE 0D 
0080+  1307 20 FA 1D 20 
0080+  130B E7 C9 CD AC 
0080+  130F EC 06 00 10 
0081+  1313 FE 28 F7 C9                      .DB 0FEh, 028h, 0F7h, 0C9h, 0CDh, 0ACh, 0ECh, 006h, 000h, 010h, 0FEh, 028h, 0F7h, 0CDh, 0ACh, 0ECh, 020h, 0FBh, 001h, 000h, 000h, 0EDh, 078h, 0E6h
0081+  1317 CD AC EC 06 
0081+  131B 00 10 FE 28 
0081+  131F F7 CD AC EC 
0081+  1323 20 FB 01 00 
0081+  1327 00 ED 78 E6 
0082+  132B 3F FE 3F 20                      .DB 03Fh, 0FEh, 03Fh, 020h, 0F0h, 0C9h, 076h, 063h, 078h, 07Ah, 084h, 000h, 067h, 066h, 064h, 073h, 061h, 086h, 074h, 072h, 065h, 077h, 071h, 081h
0082+  132F F0 C9 76 63 
0082+  1333 78 7A 84 00 
0082+  1337 67 66 64 73 
0082+  133B 61 86 74 72 
0082+  133F 65 77 71 81 
0083+  1343 35 34 33 32                      .DB 035h, 034h, 033h, 032h, 031h, 080h, 036h, 037h, 038h, 039h, 030h, 07Fh, 079h, 075h, 069h, 06Fh, 070h, 03Bh, 068h, 06Ah, 06Bh, 06Ch, 02Eh, 00Dh
0083+  1347 31 80 36 37 
0083+  134B 38 39 30 7F 
0083+  134F 79 75 69 6F 
0083+  1353 70 3B 68 6A 
0083+  1357 6B 6C 2E 0D 
0084+  135B 62 6E 6D 20                      .DB 062h, 06Eh, 06Dh, 020h, 082h, 083h, 056h, 043h, 058h, 05Ah, 000h, 000h, 047h, 046h, 044h, 053h, 041h, 000h, 054h, 052h, 045h, 057h, 051h, 000h
0084+  135F 82 83 56 43 
0084+  1363 58 5A 00 00 
0084+  1367 47 46 44 53 
0084+  136B 41 00 54 52 
0084+  136F 45 57 51 00 
0085+  1373 25 24 23 22                      .DB 025h, 024h, 023h, 022h, 021h, 000h, 05Eh, 026h, 02Ah, 028h, 029h, 000h, 059h, 055h, 049h, 04Fh, 050h, 03Ah, 048h, 04Ah, 04Bh, 04Ch, 02Ch, 000h
0085+  1377 21 00 5E 26 
0085+  137B 2A 28 29 00 
0085+  137F 59 55 49 4F 
0085+  1383 50 3A 48 4A 
0085+  1387 4B 4C 2C 00 
0086+  138B 42 4E 4D 00                      .DB 042h, 04Eh, 04Dh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0086+  138F 00 00 00 00 
0086+  1393 00 00 00 00 
0086+  1397 00 00 00 00 
0086+  139B 00 00 00 00 
0086+  139F 00 00 00 00 
0087+  13A3 00 00 00 00                      .DB 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 02Bh, 03Dh, 02Dh, 000h, 000h, 03Ch, 040h, 03Eh, 05Fh, 000h
0087+  13A7 00 00 00 00 
0087+  13AB 00 00 00 00 
0087+  13AF 00 00 2B 3D 
0087+  13B3 2D 00 00 3C 
0087+  13B7 40 3E 5F 00 
0088+  13BB 00 3F 2F 00                      .DB 000h, 03Fh, 02Fh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0088+  13BF 00 00 00 00 
0088+  13C3 00 00 00 00 
0088+  13C7 00 00 00 00 
0088+  13CB 00 00 00 00 
0088+  13CF 00 00 00 00 
0089+  13D3 00 00 00 00                      .DB 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0089+  13D7 00 00 00 00 
0089+  13DB 00 00 00 00 
0089+  13DF 00 00 00 00 
0089+  13E3 00 00 00 00 
0089+  13E7 00 00 00 00 
0090+  13EB 00 00 00 00                      .DB 000h, 000h, 000h, 000h, 000h, 000h, 001h, 006h, 000h, 0DBh, 026h, 0E6h, 010h, 028h, 002h, 006h, 022h, 03Eh, 080h, 0D3h, 023h, 000h, 000h, 079h
0090+  13EF 00 00 01 06 
0090+  13F3 00 DB 26 E6 
0090+  13F7 10 28 02 06 
0090+  13FB 22 3E 80 D3 
0090+  13FF 23 00 00 79 
0091+  1403 D3 20 00 00                      .DB 0D3h, 020h, 000h, 000h, 0AFh, 0D3h, 021h, 000h, 000h, 03Eh, 003h, 0D3h, 023h, 03Eh, 007h, 0D3h, 022h, 078h, 0A7h, 028h, 002h, 0D3h, 024h, 000h
0091+  1407 AF D3 21 00 
0091+  140B 00 3E 03 D3 
0091+  140F 23 3E 07 D3 
0091+  1413 22 78 A7 28 
0091+  1417 02 D3 24 00 
0092+  141B 00 C9 C5 F5                      .DB 000h, 0C9h, 0C5h, 0F5h, 001h, 050h, 0C3h, 0DBh, 025h, 0CBh, 06Fh, 0C2h, 011h, 0EEh, 00Bh, 078h, 0B1h, 0C2h, 0FFh, 0EDh, 0F1h, 0C1h, 037h, 03Fh
0092+  141F 01 50 C3 DB 
0092+  1423 25 CB 6F C2 
0092+  1427 11 EE 0B 78 
0092+  142B B1 C2 FF ED 
0092+  142F F1 C1 37 3F 
0093+  1433 C9 F1 C1 D3                      .DB 0C9h, 0F1h, 0C1h, 0D3h, 020h, 037h, 0C9h, 0F5h, 0DBh, 025h, 0CBh, 047h, 0CAh, 022h, 0EEh, 0F1h, 037h, 0C9h, 0F1h, 037h, 03Fh, 0C9h, 0DBh, 025h
0093+  1437 20 37 C9 F5 
0093+  143B DB 25 CB 47 
0093+  143F CA 22 EE F1 
0093+  1443 37 C9 F1 37 
0093+  1447 3F C9 DB 25 
0094+  144B CB 47 CA 31                      .DB 0CBh, 047h, 0CAh, 031h, 0EEh, 0DBh, 020h, 037h, 0C9h, 037h, 03Fh, 0C9h, 0F5h, 0CBh, 02Fh, 0CBh, 02Fh, 0CBh, 02Fh, 0CBh, 02Fh, 0CDh, 04Ah, 0EEh
0094+  144F EE DB 20 37 
0094+  1453 C9 37 3F C9 
0094+  1457 F5 CB 2F CB 
0094+  145B 2F CB 2F CB 
0094+  145F 2F CD 4A EE 
0095+  1463 CD FA ED F1                      .DB 0CDh, 0FAh, 0EDh, 0F1h, 0CDh, 04Ah, 0EEh, 0C3h, 0FAh, 0EDh, 0E6h, 00Fh, 0C6h, 090h, 027h, 0CEh, 040h, 027h, 0C9h, 0E3h, 0CDh, 062h, 0EEh, 0DAh
0095+  1467 CD 4A EE C3 
0095+  146B FA ED E6 0F 
0095+  146F C6 90 27 CE 
0095+  1473 40 27 C9 E3 
0095+  1477 CD 62 EE DA 
0096+  147B 60 EE 7E 23                      .DB 060h, 0EEh, 07Eh, 023h, 0A7h, 0C2h, 05Ah, 0EEh, 0E3h, 0C9h, 07Eh, 023h, 0A7h, 0CAh, 06Fh, 0EEh, 0CDh, 0FAh, 0EDh, 0DAh, 062h, 0EEh, 0C9h, 037h
0096+  147F A7 C2 5A EE 
0096+  1483 E3 C9 7E 23 
0096+  1487 A7 CA 6F EE 
0096+  148B CD FA ED DA 
0096+  148F 62 EE C9 37 
0097+  1493 C9 3E CF 32                      .DB 0C9h, 03Eh, 0CFh, 032h, 000h, 0FFh, 0D3h, 013h, 03Eh, 0FFh, 032h, 001h, 0FFh, 0D3h, 013h, 03Eh, 03Fh, 032h, 002h, 0FFh, 0D3h, 011h, 0C9h, 006h
0097+  1497 00 FF D3 13 
0097+  149B 3E FF 32 01 
0097+  149F FF D3 13 3E 
0097+  14A3 3F 32 02 FF 
0097+  14A7 D3 11 C9 06 
0098+  14AB 0A CD 97 EF                      .DB 00Ah, 0CDh, 097h, 0EFh, 010h, 0FBh, 0CDh, 087h, 0EFh, 006h, 0F0h, 010h, 0FEh, 0C9h, 0CDh, 067h, 0EFh, 0CDh, 087h, 0EFh, 0CDh, 077h, 0EFh, 0CDh
0098+  14AF 10 FB CD 87 
0098+  14B3 EF 06 F0 10 
0098+  14B7 FE C9 CD 67 
0098+  14BB EF CD 87 EF 
0098+  14BF CD 77 EF CD 
0099+  14C3 57 EF C9 CD                      .DB 057h, 0EFh, 0C9h, 0CDh, 077h, 0EFh, 0CDh, 087h, 0EFh, 0CDh, 067h, 0EFh, 0C9h, 0CDh, 096h, 0EEh, 07Ch, 0CDh, 0E1h, 0EEh, 030h, 017h, 07Dh, 0CDh
0099+  14C7 77 EF CD 87 
0099+  14CB EF CD 67 EF 
0099+  14CF C9 CD 96 EE 
0099+  14D3 7C CD E1 EE 
0099+  14D7 30 17 7D CD 
0100+  14DB E3 EE 30 11                      .DB 0E3h, 0EEh, 030h, 011h, 006h, 032h, 010h, 0FEh, 0CDh, 096h, 0EEh, 07Ch, 0CDh, 0DBh, 0EEh, 030h, 004h, 0CDh, 0F0h, 0EEh, 037h, 0C9h, 0CDh, 096h
0100+  14DF 06 32 10 FE 
0100+  14E3 CD 96 EE 7C 
0100+  14E7 CD DB EE 30 
0100+  14EB 04 CD F0 EE 
0100+  14EF 37 C9 CD 96 
0101+  14F3 EE 7C CD E1                      .DB 0EEh, 07Ch, 0CDh, 0E1h, 0EEh, 0D0h, 07Dh, 0CDh, 0E3h, 0EEh, 0C9h, 0CBh, 027h, 0F6h, 001h, 018h, 002h, 0CBh, 027h, 0CDh, 00Bh, 0EFh, 0CBh, 07Ah
0101+  14F7 EE D0 7D CD 
0101+  14FB E3 EE C9 CB 
0101+  14FF 27 F6 01 18 
0101+  1503 02 CB 27 CD 
0101+  1507 0B EF CB 7A 
0102+  150B 37 C8 CD A3                      .DB 037h, 0C8h, 0CDh, 0A3h, 0EEh, 037h, 03Fh, 0C9h, 006h, 008h, 0DBh, 011h, 037h, 0CBh, 07Fh, 020h, 001h, 03Fh, 0CBh, 011h, 0CDh, 097h, 0EFh, 010h
0102+  150F EE 37 3F C9 
0102+  1513 06 08 DB 11 
0102+  1517 37 CB 7F 20 
0102+  151B 01 3F CB 11 
0102+  151F CD 97 EF 10 
0103+  1523 F1 79 C9 CD                      .DB 0F1h, 079h, 0C9h, 0CDh, 077h, 0EFh, 0CDh, 097h, 0EFh, 018h, 05Ch, 0E5h, 0D5h, 02Ah, 000h, 0FFh, 057h, 03Eh, 03Fh, 0A4h, 0CBh, 027h, 067h, 00Eh
0103+  1527 77 EF CD 97 
0103+  152B EF 18 5C E5 
0103+  152F D5 2A 00 FF 
0103+  1533 57 3E 3F A4 
0103+  1537 CB 27 67 0E 
0104+  153B 13 06 08 1E                      .DB 013h, 006h, 008h, 01Eh, 040h, 07Ch, 0CBh, 022h, 0CBh, 01Fh, 0EDh, 069h, 0D3h, 013h, 0B3h, 0EDh, 069h, 0D3h, 013h, 0ABh, 0EDh, 069h, 0D3h, 013h
0104+  153F 40 7C CB 22 
0104+  1543 CB 1F ED 69 
0104+  1547 D3 13 B3 ED 
0104+  154B 69 D3 13 AB 
0104+  154F ED 69 D3 13 
0105+  1553 10 EB 7C 37                      .DB 010h, 0EBh, 07Ch, 037h, 0CBh, 01Fh, 0EDh, 069h, 0D3h, 013h, 0B3h, 0EDh, 069h, 0D3h, 013h, 0EDh, 069h, 0ABh, 06Fh, 032h, 001h, 0FFh, 0DBh, 011h
0105+  1557 CB 1F ED 69 
0105+  155B D3 13 B3 ED 
0105+  155F 69 D3 13 ED 
0105+  1563 69 AB 6F 32 
0105+  1567 01 FF DB 11 
0106+  156B ED 69 D1 E1                      .DB 0EDh, 069h, 0D1h, 0E1h, 057h, 0C9h, 0CDh, 057h, 0EFh, 0CDh, 087h, 0EFh, 0DBh, 011h, 057h, 03Ah, 000h, 0FFh, 0D3h, 013h, 03Ah, 001h, 0FFh, 0CBh
0106+  156F 57 C9 CD 57 
0106+  1573 EF CD 87 EF 
0106+  1577 DB 11 57 3A 
0106+  157B 00 FF D3 13 
0106+  157F 3A 01 FF CB 
0107+  1583 B7 D3 13 32                      .DB 0B7h, 0D3h, 013h, 032h, 001h, 0FFh, 0C9h, 03Ah, 000h, 0FFh, 0D3h, 013h, 03Ah, 001h, 0FFh, 0CBh, 0FFh, 0D3h, 013h, 032h, 001h, 0FFh, 0C9h, 03Ah
0107+  1587 01 FF C9 3A 
0107+  158B 00 FF D3 13 
0107+  158F 3A 01 FF CB 
0107+  1593 FF D3 13 32 
0107+  1597 01 FF C9 3A 
0108+  159B 00 FF D3 13                      .DB 000h, 0FFh, 0D3h, 013h, 03Ah, 001h, 0FFh, 0CBh, 0BFh, 0D3h, 013h, 032h, 001h, 0FFh, 0C9h, 03Ah, 000h, 0FFh, 0D3h, 013h, 03Ah, 001h, 0FFh, 0CBh
0108+  159F 3A 01 FF CB 
0108+  15A3 BF D3 13 32 
0108+  15A7 01 FF C9 3A 
0108+  15AB 00 FF D3 13 
0108+  15AF 3A 01 FF CB 
0109+  15B3 F7 D3 13 32                      .DB 0F7h, 0D3h, 013h, 032h, 001h, 0FFh, 0C9h, 0C5h, 001h, 013h, 000h, 03Ah, 000h, 0FFh, 057h, 03Ah, 001h, 0FFh, 0CBh, 0B7h, 032h, 001h, 0FFh, 0EDh
0109+  15B7 01 FF C9 C5 
0109+  15BB 01 13 00 3A 
0109+  15BF 00 FF 57 3A 
0109+  15C3 01 FF CB B7 
0109+  15C7 32 01 FF ED 
0110+  15CB 51 D3 13 CB                      .DB 051h, 0D3h, 013h, 0CBh, 0F7h, 0EDh, 051h, 0D3h, 013h, 0DBh, 011h, 0EDh, 051h, 057h, 03Ah, 001h, 0FFh, 0D3h, 013h, 0C1h, 0C9h, 0CDh, 025h, 0F1h
0110+  15CF F7 ED 51 D3 
0110+  15D3 13 DB 11 ED 
0110+  15D7 51 57 3A 01 
0110+  15DB FF D3 13 C1 
0110+  15DF C9 CD 25 F1 
0111+  15E3 1E 80 CD FD                      .DB 01Eh, 080h, 0CDh, 0FDh, 0EFh, 0CDh, 0D1h, 0EFh, 0CDh, 0DDh, 0EFh, 0CDh, 0D7h, 0EFh, 0CDh, 0DDh, 0EFh, 03Eh, 050h, 032h, 005h, 0FFh, 0C9h, 03Eh
0111+  15E7 EF CD D1 EF 
0111+  15EB CD DD EF CD 
0111+  15EF D7 EF CD DD 
0111+  15F3 EF 3E 50 32 
0111+  15F7 05 FF C9 3E 
0112+  15FB 53 32 05 FF                      .DB 053h, 032h, 005h, 0FFh, 0C9h, 02Eh, 003h, 0CDh, 038h, 0F0h, 0CDh, 096h, 0EEh, 03Ah, 005h, 0FFh, 0CDh, 0E1h, 0EEh, 03Eh, 000h, 0CDh, 0E3h, 0EEh
0112+  15FF C9 2E 03 CD 
0112+  1603 38 F0 CD 96 
0112+  1607 EE 3A 05 FF 
0112+  160B CD E1 EE 3E 
0112+  160F 00 CD E3 EE 
0113+  1613 3E 01 CD E3                      .DB 03Eh, 001h, 0CDh, 0E3h, 0EEh, 03Eh, 078h, 0CDh, 0E3h, 0EEh, 0C3h, 0A3h, 0EEh, 0CDh, 0D1h, 0EFh, 0CDh, 006h, 0F0h, 0CDh, 0D7h, 0EFh, 02Eh, 001h
0113+  1617 EE 3E 78 CD 
0113+  161B E3 EE C3 A3 
0113+  161F EE CD D1 EF 
0113+  1623 CD 06 F0 CD 
0113+  1627 D7 EF 2E 01 
0114+  162B CD 38 F0 2E                      .DB 0CDh, 038h, 0F0h, 02Eh, 00Ch, 0CDh, 096h, 0EEh, 03Ah, 005h, 0FFh, 0CDh, 0E1h, 0EEh, 07Dh, 03Dh, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h
0114+  162F 0C CD 96 EE 
0114+  1633 3A 05 FF CD 
0114+  1637 E1 EE 7D 3D 
0114+  163B CB 27 CB 27 
0114+  163F CB 27 CB 27 
0115+  1643 CD E3 EE 26                      .DB 0CDh, 0E3h, 0EEh, 026h, 010h, 07Bh, 0CDh, 0E3h, 0EEh, 025h, 020h, 0F9h, 0CDh, 0A3h, 0EEh, 02Dh, 020h, 0DBh, 02Eh, 000h, 0CDh, 038h, 0F0h, 0C9h
0115+  1647 10 7B CD E3 
0115+  164B EE 25 20 F9 
0115+  164F CD A3 EE 2D 
0115+  1653 20 DB 2E 00 
0115+  1657 CD 38 F0 C9 
0116+  165B CD 50 F0 CD                      .DB 0CDh, 050h, 0F0h, 0CDh, 096h, 0EEh, 03Ah, 005h, 0FFh, 0CDh, 0E1h, 0EEh, 03Eh, 0FDh, 0CDh, 0E3h, 0EEh, 07Dh, 0CDh, 0E3h, 0EEh, 0C3h, 0A3h, 0EEh
0116+  165F 96 EE 3A 05 
0116+  1663 FF CD E1 EE 
0116+  1667 3E FD CD E3 
0116+  166B EE 7D CD E3 
0116+  166F EE C3 A3 EE 
0117+  1673 CD 96 EE 3A                      .DB 0CDh, 096h, 0EEh, 03Ah, 005h, 0FFh, 0CDh, 0E1h, 0EEh, 03Eh, 0FEh, 0CDh, 0E3h, 0EEh, 03Eh, 0C5h, 0CDh, 0E3h, 0EEh, 0C3h, 0A3h, 0EEh, 0C5h, 006h
0117+  1677 05 FF CD E1 
0117+  167B EE 3E FE CD 
0117+  167F E3 EE 3E C5 
0117+  1683 CD E3 EE C3 
0117+  1687 A3 EE C5 06 
0118+  168B 50 FE 0C DA                      .DB 050h, 0FEh, 00Ch, 0DAh, 072h, 0F0h, 006h, 053h, 0D6h, 00Ch, 05Fh, 078h, 032h, 005h, 0FFh, 02Eh, 001h, 0CDh, 038h, 0F0h, 0CDh, 096h, 0EEh, 03Ah
0118+  168F 72 F0 06 53 
0118+  1693 D6 0C 5F 78 
0118+  1697 32 05 FF 2E 
0118+  169B 01 CD 38 F0 
0118+  169F CD 96 EE 3A 
0119+  16A3 05 FF CD E1                      .DB 005h, 0FFh, 0CDh, 0E1h, 0EEh, 07Bh, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h, 0CDh, 0E3h, 0EEh, 0E1h, 026h, 010h, 07Dh, 0CDh, 0E3h, 0EEh
0119+  16A7 EE 7B CB 27 
0119+  16AB CB 27 CB 27 
0119+  16AF CB 27 CD E3 
0119+  16B3 EE E1 26 10 
0119+  16B7 7D CD E3 EE 
0120+  16BB 25 20 F9 CD                      .DB 025h, 020h, 0F9h, 0CDh, 0A3h, 0EEh, 02Eh, 000h, 0CDh, 038h, 0F0h, 0C9h, 0FEh, 020h, 0F2h, 0B0h, 0F0h, 021h, 061h, 048h, 079h, 0C3h, 0C5h, 0F0h
0120+  16BF A3 EE 2E 00 
0120+  16C3 CD 38 F0 C9 
0120+  16C7 FE 20 F2 B0 
0120+  16CB F0 21 61 48 
0120+  16CF 79 C3 C5 F0 
0121+  16D3 CB 7F C2 A9                      .DB 0CBh, 07Fh, 0C2h, 0A9h, 0F0h, 0D6h, 020h, 016h, 000h, 05Fh, 0CBh, 023h, 021h, 033h, 0F1h, 019h, 056h, 023h, 066h, 06Ah, 079h, 0F5h, 006h, 050h
0121+  16D7 F0 D6 20 16 
0121+  16DB 00 5F CB 23 
0121+  16DF 21 33 F1 19 
0121+  16E3 56 23 66 6A 
0121+  16E7 79 F5 06 50 
0122+  16EB FE 0C DA D1                      .DB 0FEh, 00Ch, 0DAh, 0D1h, 0F0h, 006h, 053h, 0D6h, 00Ch, 05Fh, 0CDh, 096h, 0EEh, 078h, 0CDh, 0E1h, 0EEh, 07Bh, 0CBh, 027h, 0CDh, 0E3h, 0EEh, 07Dh
0122+  16EF F0 06 53 D6 
0122+  16F3 0C 5F CD 96 
0122+  16F7 EE 78 CD E1 
0122+  16FB EE 7B CB 27 
0122+  16FF CD E3 EE 7D 
0123+  1703 CD E3 EE 7C                      .DB 0CDh, 0E3h, 0EEh, 07Ch, 0CDh, 0E3h, 0EEh, 0CDh, 0A3h, 0EEh, 0F1h, 03Ch, 0C9h, 0C3h, 0C5h, 0F0h, 0CDh, 025h, 0F1h, 0AFh, 0E3h, 0CDh, 0FBh, 0F0h
0123+  1707 CD E3 EE CD 
0123+  170B A3 EE F1 3C 
0123+  170F C9 C3 C5 F0 
0123+  1713 CD 25 F1 AF 
0123+  1717 E3 CD FB F0 
0124+  171B 23 E3 C9 5F                      .DB 023h, 0E3h, 0C9h, 05Fh, 07Eh, 0B7h, 0C2h, 002h, 0F1h, 0C9h, 0D6h, 020h, 0F2h, 00Ch, 0F1h, 021h, 061h, 048h, 018h, 010h, 006h, 000h, 04Fh, 0E5h
0124+  171F 7E B7 C2 02 
0124+  1723 F1 C9 D6 20 
0124+  1727 F2 0C F1 21 
0124+  172B 61 48 18 10 
0124+  172F 06 00 4F E5 
0125+  1733 21 33 F1 CB                      .DB 021h, 033h, 0F1h, 0CBh, 021h, 0CBh, 010h, 009h, 04Eh, 023h, 066h, 069h, 07Bh, 0CDh, 0C5h, 0F0h, 0E1h, 023h, 0C3h, 0FBh, 0F0h, 03Eh, 000h, 021h
0125+  1737 21 CB 10 09 
0125+  173B 4E 23 66 69 
0125+  173F 7B CD C5 F0 
0125+  1743 E1 23 C3 FB 
0125+  1747 F0 3E 00 21 
0126+  174B 00 00 CD C5                      .DB 000h, 000h, 0CDh, 0C5h, 0F0h, 0FEh, 018h, 0C2h, 02Ah, 0F1h, 0C9h, 000h, 000h, 000h, 049h, 002h, 002h, 0CEh, 012h, 0EDh, 012h, 0E4h, 02Dh, 059h
0126+  174F F0 FE 18 C2 
0126+  1753 2A F1 C9 00 
0126+  1757 00 00 49 02 
0126+  175B 02 CE 12 ED 
0126+  175F 12 E4 2D 59 
0127+  1763 0B 00 02 00                      .DB 00Bh, 000h, 002h, 000h, 00Ch, 000h, 021h, 0C0h, 03Fh, 0C0h, 012h, 000h, 020h, 0C0h, 000h, 000h, 040h, 000h, 024h, 03Fh, 024h, 006h, 004h, 0DBh
0127+  1767 0C 00 21 C0 
0127+  176B 3F C0 12 00 
0127+  176F 20 C0 00 00 
0127+  1773 40 00 24 3F 
0127+  1777 24 06 04 DB 
0128+  177B 00 8F 00 E6                      .DB 000h, 08Fh, 000h, 0E6h, 000h, 069h, 008h, 0FDh, 000h, 001h, 014h, 0FFh, 000h, 0EFh, 000h, 000h, 012h, 000h, 022h, 040h, 00Ch, 0C8h, 000h, 080h
0128+  177F 00 69 08 FD 
0128+  1783 00 01 14 FF 
0128+  1787 00 EF 00 00 
0128+  178B 12 00 22 40 
0128+  178F 0C C8 00 80 
0129+  1793 21 83 50 BB                      .DB 021h, 083h, 050h, 0BBh, 002h, 0F7h, 000h, 08Fh, 012h, 039h, 000h, 00Fh, 012h, 079h, 000h, 071h, 000h, 0BDh, 000h, 0F6h, 000h, 009h, 012h, 01Eh
0129+  1797 02 F7 00 8F 
0129+  179B 12 39 00 0F 
0129+  179F 12 79 00 71 
0129+  17A3 00 BD 00 F6 
0129+  17A7 00 09 12 1E 
0130+  17AB 00 70 0C 38                      .DB 000h, 070h, 00Ch, 038h, 000h, 036h, 005h, 036h, 009h, 03Fh, 000h, 0F3h, 000h, 03Fh, 008h, 0F3h, 008h, 0EDh, 000h, 001h, 012h, 03Eh, 000h, 030h
0130+  17AF 00 36 05 36 
0130+  17B3 09 3F 00 F3 
0130+  17B7 00 3F 08 F3 
0130+  17BB 08 ED 00 01 
0130+  17BF 12 3E 00 30 
0131+  17C3 24 36 28 00                      .DB 024h, 036h, 028h, 000h, 02Dh, 0EEh, 000h, 009h, 024h, 039h, 000h, 000h, 009h, 00Fh, 000h, 000h, 028h, 008h, 000h, 000h, 001h, 08Ch, 020h, 078h
0131+  17C7 2D EE 00 09 
0131+  17CB 24 39 00 00 
0131+  17CF 09 0F 00 00 
0131+  17D3 28 08 00 00 
0131+  17D7 01 8C 20 78 
0132+  17DB 08 D8 00 8E                      .DB 008h, 0D8h, 000h, 08Eh, 020h, 058h, 020h, 0C0h, 014h, 08Eh, 004h, 070h, 010h, 000h, 010h, 010h, 022h, 000h, 01Eh, 030h, 000h, 0D4h, 010h, 050h
0132+  17DF 20 58 20 C0 
0132+  17E3 14 8E 04 70 
0132+  17E7 10 00 10 10 
0132+  17EB 22 00 1E 30 
0132+  17EF 00 D4 10 50 
0133+  17F3 10 DC 00 70                      .DB 010h, 0DCh, 000h, 070h, 001h, 086h, 004h, 050h, 000h, 088h, 008h, 078h, 000h, 01Ch, 000h, 010h, 020h, 014h, 028h, 000h, 02Dh, 08Eh, 002h, 048h
0133+  17F7 01 86 04 50 
0133+  17FB 00 88 08 78 
0133+  17FF 00 1C 00 10 
0133+  1803 20 14 28 00 
0133+  1807 2D 8E 02 48 
0134+  180B 20 49 21 00                      .DB 020h, 049h, 021h, 000h, 012h, 089h, 00Ch, 0C0h, 024h, 000h, 000h, 023h, 059h, 008h, 006h, 005h, 011h, 022h, 0FFh, 0CDh, 053h, 0EEh, 043h, 068h
0134+  180F 12 89 0C C0 
0134+  1813 24 00 00 23 
0134+  1817 59 08 06 05 
0134+  181B 11 22 FF CD 
0134+  181F 53 EE 43 68 
0135+  1823 65 63 6B 69                      .DB 065h, 063h, 06Bh, 069h, 06Eh, 067h, 020h, 052h, 054h, 043h, 00Ah, 00Dh, 000h, 026h, 06Fh, 02Eh, 000h, 0CDh, 0ADh, 0EEh, 05Fh, 0D2h, 0EEh, 0F2h
0135+  1827 6E 67 20 52 
0135+  182B 54 43 0A 0D 
0135+  182F 00 26 6F 2E 
0135+  1833 00 CD AD EE 
0135+  1837 5F D2 EE F2 
0136+  183B CD A3 EE CD                      .DB 0CDh, 0A3h, 0EEh, 0CDh, 0E9h, 0F2h, 0CBh, 07Bh, 028h, 007h, 0CDh, 00Bh, 0F3h, 0C2h, 0AFh, 0F2h, 0C9h, 0CDh, 053h, 0EEh, 052h, 065h, 073h, 065h
0136+  183F E9 F2 CB 7B 
0136+  1843 28 07 CD 0B 
0136+  1847 F3 C2 AF F2 
0136+  184B C9 CD 53 EE 
0136+  184F 52 65 73 65 
0137+  1853 74 20 74 69                      .DB 074h, 020h, 074h, 069h, 06Dh, 065h, 00Ah, 00Dh, 000h, 026h, 06Fh, 02Eh, 000h, 0CDh, 0CEh, 0EEh, 0D2h, 0EEh, 0F2h, 021h, 0F3h, 0F1h, 07Eh, 023h
0137+  1857 6D 65 0A 0D 
0137+  185B 00 26 6F 2E 
0137+  185F 00 CD CE EE 
0137+  1863 D2 EE F2 21 
0137+  1867 F3 F1 7E 23 
0138+  186B FE FF CA 55                      .DB 0FEh, 0FFh, 0CAh, 055h, 0F2h, 0CDh, 0E3h, 0EEh, 0D2h, 0EEh, 0F2h, 018h, 0F1h, 0CDh, 0A3h, 0EEh, 0CDh, 053h, 0EEh, 053h, 074h, 061h, 072h, 074h
0138+  186F F2 CD E3 EE 
0138+  1873 D2 EE F2 18 
0138+  1877 F1 CD A3 EE 
0138+  187B CD 53 EE 53 
0138+  187F 74 61 72 74 
0139+  1883 69 6E 67 20                      .DB 069h, 06Eh, 067h, 020h, 063h, 06Ch, 06Fh, 063h, 06Bh, 00Ah, 00Dh, 000h, 026h, 06Fh, 02Eh, 003h, 0CDh, 0ADh, 0EEh, 0D2h, 0EEh, 0F2h, 05Fh, 0CDh
0139+  1887 63 6C 6F 63 
0139+  188B 6B 0A 0D 00 
0139+  188F 26 6F 2E 03 
0139+  1893 CD AD EE D2 
0139+  1897 EE F2 5F CD 
0140+  189B A3 EE CB DB                      .DB 0A3h, 0EEh, 0CBh, 0DBh, 0CDh, 0E9h, 0F2h, 0CDh, 0CEh, 0EEh, 0D2h, 0EEh, 0F2h, 07Bh, 0CDh, 0E3h, 0EEh, 0D2h, 0EEh, 0F2h, 0CDh, 0A3h, 0EEh, 026h
0140+  189F CD E9 F2 CD 
0140+  18A3 CE EE D2 EE 
0140+  18A7 F2 7B CD E3 
0140+  18AB EE D2 EE F2 
0140+  18AF CD A3 EE 26 
0141+  18B3 6F 2E 00 CD                      .DB 06Fh, 02Eh, 000h, 0CDh, 0ADh, 0EEh, 0D2h, 0EEh, 0F2h, 05Fh, 0CDh, 0A3h, 0EEh, 0CBh, 0FBh, 0CDh, 0CEh, 0EEh, 0D2h, 0EEh, 0F2h, 07Bh, 0CDh, 0E3h
0141+  18B7 AD EE D2 EE 
0141+  18BB F2 5F CD A3 
0141+  18BF EE CB FB CD 
0141+  18C3 CE EE D2 EE 
0141+  18C7 F2 7B CD E3 
0142+  18CB EE D2 EE F2                      .DB 0EEh, 0D2h, 0EEh, 0F2h, 0CDh, 0A3h, 0EEh, 006h, 004h, 0C5h, 026h, 06Fh, 02Eh, 007h, 0CDh, 0CEh, 0EEh, 0D2h, 0EEh, 0F2h, 03Eh, 044h, 0CDh, 0E3h
0142+  18CF CD A3 EE 06 
0142+  18D3 04 C5 26 6F 
0142+  18D7 2E 07 CD CE 
0142+  18DB EE D2 EE F2 
0142+  18DF 3E 44 CD E3 
0143+  18E3 EE D2 EE F2                      .DB 0EEh, 0D2h, 0EEh, 0F2h, 0AFh, 0CDh, 0E3h, 0EEh, 0D2h, 0EEh, 0F2h, 0CDh, 0A3h, 0EEh, 0CDh, 0E9h, 0F2h, 0CDh, 00Bh, 0F3h, 0C1h, 0C8h, 0CDh, 053h
0143+  18E7 AF CD E3 EE 
0143+  18EB D2 EE F2 CD 
0143+  18EF A3 EE CD E9 
0143+  18F3 F2 CD 0B F3 
0143+  18F7 C1 C8 CD 53 
0144+  18FB EE 52 65 73                      .DB 0EEh, 052h, 065h, 073h, 065h, 074h, 020h, 074h, 072h, 069h, 06Dh, 00Dh, 00Ah, 000h, 010h, 0C9h, 0C9h, 006h, 000h, 010h, 0FEh, 0C9h, 0CDh, 0A3h
0144+  18FF 65 74 20 74 
0144+  1903 72 69 6D 0D 
0144+  1907 0A 00 10 C9 
0144+  190B C9 06 00 10 
0144+  190F FE C9 CD A3 
0145+  1913 EE CD 53 EE                      .DB 0EEh, 0CDh, 053h, 0EEh, 052h, 054h, 043h, 020h, 050h, 061h, 06Eh, 069h, 063h, 00Ah, 00Dh, 000h, 07Ch, 0CDh, 034h, 0EEh, 07Dh, 0CDh, 034h, 0EEh
0145+  1917 52 54 43 20 
0145+  191B 50 61 6E 69 
0145+  191F 63 0A 0D 00 
0145+  1923 7C CD 34 EE 
0145+  1927 7D CD 34 EE 
0146+  192B C3 08 F3 26                      .DB 0C3h, 008h, 0F3h, 026h, 06Fh, 02Eh, 007h, 0CDh, 0ADh, 0EEh, 0D2h, 0EEh, 0F2h, 05Fh, 0CDh, 003h, 0EFh, 0CDh, 0F0h, 0EEh, 057h, 0CDh, 0A3h, 0EEh
0146+  192F 6F 2E 07 CD 
0146+  1933 AD EE D2 EE 
0146+  1937 F2 5F CD 03 
0146+  193B EF CD F0 EE 
0146+  193F 57 CD A3 EE 
0147+  1943 7B 06 04 FE                      .DB 07Bh, 006h, 004h, 0FEh, 044h, 0C0h, 07Ah, 0A7h, 0C9h, 052h, 054h, 043h, 020h, 041h, 063h, 06Bh, 020h, 065h, 072h, 072h, 06Fh, 072h, 020h, 030h
0147+  1947 44 C0 7A A7 
0147+  194B C9 52 54 43 
0147+  194F 20 41 63 6B 
0147+  1953 20 65 72 72 
0147+  1957 6F 72 20 30 
0148+  195B 00 26 6F 2E                      .DB 000h, 026h, 06Fh, 02Eh, 000h, 0CDh, 0ADh, 0EEh, 030h, 03Eh, 021h, 042h, 0FFh, 006h, 007h, 018h, 00Dh, 0C5h, 0CDh, 096h, 0EEh, 03Eh, 06Fh, 0CDh
0148+  195F 00 CD AD EE 
0148+  1963 30 3E 21 42 
0148+  1967 FF 06 07 18 
0148+  196B 0D C5 CD 96 
0148+  196F EE 3E 6F CD 
0149+  1973 DB EE CD F0                      .DB 0DBh, 0EEh, 0CDh, 0F0h, 0EEh, 0C1h, 077h, 0CDh, 0A3h, 0EEh, 023h, 010h, 0ECh, 037h, 0C9h, 026h, 06Fh, 02Eh, 000h, 0CDh, 0ADh, 0EEh, 030h, 018h
0149+  1977 EE C1 77 CD 
0149+  197B A3 EE 23 10 
0149+  197F EC 37 C9 26 
0149+  1983 6F 2E 00 CD 
0149+  1987 AD EE 30 18 
0150+  198B 21 42 FF 06                      .DB 021h, 042h, 0FFh, 006h, 007h, 018h, 008h, 0C5h, 0CDh, 003h, 0EFh, 0CDh, 0F0h, 0EEh, 0C1h, 077h, 023h, 010h, 0F4h, 0CDh, 0A3h, 0EEh, 037h, 0C9h
0150+  198F 07 18 08 C5 
0150+  1993 CD 03 EF CD 
0150+  1997 F0 EE C1 77 
0150+  199B 23 10 F4 CD 
0150+  199F A3 EE 37 C9 
0151+  19A3 CD A3 EE CD                      .DB 0CDh, 0A3h, 0EEh, 0CDh, 053h, 0EEh, 045h, 072h, 072h, 06Fh, 072h, 020h, 067h, 065h, 074h, 074h, 069h, 06Eh, 067h, 020h, 074h, 069h, 06Dh, 065h
0151+  19A7 53 EE 45 72 
0151+  19AB 72 6F 72 20 
0151+  19AF 67 65 74 74 
0151+  19B3 69 6E 67 20 
0151+  19B7 74 69 6D 65 
0152+  19BB 0D 0A 00 AF                      .DB 00Dh, 00Ah, 000h, 0AFh, 0C9h, 0CDh, 05Fh, 0F3h, 011h, 028h, 0FFh, 03Ah, 045h, 0FFh, 021h, 038h, 0F4h, 0E6h, 007h, 04Fh, 0CDh, 027h, 0F4h, 0CDh
0152+  19BF C9 CD 5F F3 
0152+  19C3 11 28 FF 3A 
0152+  19C7 45 FF 21 38 
0152+  19CB F4 E6 07 4F 
0152+  19CF CD 27 F4 CD 
0153+  19D3 30 F4 CD 0D                      .DB 030h, 0F4h, 0CDh, 00Dh, 0F4h, 03Ah, 046h, 0FFh, 0E6h, 03Fh, 0CDh, 012h, 0F4h, 0CDh, 00Dh, 0F4h, 03Ah, 047h, 0FFh, 021h, 054h, 0F4h, 0E6h, 01Fh
0153+  19D7 F4 3A 46 FF 
0153+  19DB E6 3F CD 12 
0153+  19DF F4 CD 0D F4 
0153+  19E3 3A 47 FF 21 
0153+  19E7 54 F4 E6 1F 
0154+  19EB CB 67 28 02                      .DB 0CBh, 067h, 028h, 002h, 0D6h, 006h, 04Fh, 0CDh, 027h, 0F4h, 0CDh, 030h, 0F4h, 0CDh, 00Dh, 0F4h, 03Eh, 020h, 0CDh, 012h, 0F4h, 03Ah, 048h, 0FFh
0154+  19EF D6 06 4F CD 
0154+  19F3 27 F4 CD 30 
0154+  19F7 F4 CD 0D F4 
0154+  19FB 3E 20 CD 12 
0154+  19FF F4 3A 48 FF 
0155+  1A03 CD 12 F4 CD                      .DB 0CDh, 012h, 0F4h, 0CDh, 00Dh, 0F4h, 03Ah, 044h, 0FFh, 0E6h, 03Fh, 0CDh, 012h, 0F4h, 0CDh, 00Dh, 0F4h, 03Ah, 043h, 0FFh, 0E6h, 07Fh, 0CDh, 012h
0155+  1A07 0D F4 3A 44 
0155+  1A0B FF E6 3F CD 
0155+  1A0F 12 F4 CD 0D 
0155+  1A13 F4 3A 43 FF 
0155+  1A17 E6 7F CD 12 
0156+  1A1B F4 CD 0D F4                      .DB 0F4h, 0CDh, 00Dh, 0F4h, 03Ah, 042h, 0FFh, 0E6h, 07Fh, 0CDh, 012h, 0F4h, 0AFh, 012h, 021h, 028h, 0FFh, 0CDh, 0FBh, 0F0h, 0C9h, 03Eh, 020h, 012h
0156+  1A1F 3A 42 FF E6 
0156+  1A23 7F CD 12 F4 
0156+  1A27 AF 12 21 28 
0156+  1A2B FF CD FB F0 
0156+  1A2F C9 3E 20 12 
0157+  1A33 13 C9 4F CB                      .DB 013h, 0C9h, 04Fh, 0CBh, 03Fh, 0CBh, 03Fh, 0CBh, 03Fh, 0CBh, 03Fh, 0C6h, 030h, 012h, 013h, 079h, 0E6h, 00Fh, 0C6h, 030h, 012h, 013h, 0C9h, 00Dh
0157+  1A37 3F CB 3F CB 
0157+  1A3B 3F CB 3F C6 
0157+  1A3F 30 12 13 79 
0157+  1A43 E6 0F C6 30 
0157+  1A47 12 13 C9 0D 
0158+  1A4B C8 7E 23 A7                      .DB 0C8h, 07Eh, 023h, 0A7h, 020h, 0FBh, 018h, 0F7h, 07Eh, 0A7h, 0C8h, 012h, 023h, 013h, 018h, 0F8h, 04Dh, 06Fh, 06Eh, 000h, 054h, 075h, 065h, 000h
0158+  1A4F 20 FB 18 F7 
0158+  1A53 7E A7 C8 12 
0158+  1A57 23 13 18 F8 
0158+  1A5B 4D 6F 6E 00 
0158+  1A5F 54 75 65 00 
0159+  1A63 57 65 64 00                      .DB 057h, 065h, 064h, 000h, 054h, 068h, 075h, 000h, 046h, 072h, 069h, 000h, 053h, 061h, 074h, 000h, 053h, 075h, 06Eh, 000h, 04Ah, 061h, 06Eh, 000h
0159+  1A67 54 68 75 00 
0159+  1A6B 46 72 69 00 
0159+  1A6F 53 61 74 00 
0159+  1A73 53 75 6E 00 
0159+  1A77 4A 61 6E 00 
0160+  1A7B 46 65 62 00                      .DB 046h, 065h, 062h, 000h, 04Dh, 061h, 072h, 000h, 041h, 070h, 072h, 000h, 04Dh, 061h, 079h, 000h, 04Ah, 075h, 06Eh, 000h, 04Ah, 075h, 06Ch, 000h
0160+  1A7F 4D 61 72 00 
0160+  1A83 41 70 72 00 
0160+  1A87 4D 61 79 00 
0160+  1A8B 4A 75 6E 00 
0160+  1A8F 4A 75 6C 00 
0161+  1A93 41 75 67 00                      .DB 041h, 075h, 067h, 000h, 053h, 065h, 070h, 000h, 04Fh, 063h, 074h, 000h, 04Eh, 06Fh, 076h, 000h, 044h, 065h, 063h, 000h, 001h, 00Ch, 000h, 009h
0161+  1A97 53 65 70 00 
0161+  1A9B 4F 63 74 00 
0161+  1A9F 4E 6F 76 00 
0161+  1AA3 44 65 63 00 
0161+  1AA7 01 0C 00 09 
0162+  1AAB E5 DD E1 AF                      .DB 0E5h, 0DDh, 0E1h, 0AFh, 0DDh, 077h, 0F5h, 03Dh, 0DDh, 077h, 0F4h, 0DDh, 073h, 0F8h, 0DDh, 072h, 0F9h, 0AFh, 0DDh, 077h, 0FAh, 0FDh, 021h, 0FFh
0162+  1AAF DD 77 F5 3D 
0162+  1AB3 DD 77 F4 DD 
0162+  1AB7 73 F8 DD 72 
0162+  1ABB F9 AF DD 77 
0162+  1ABF FA FD 21 FF 
0163+  1AC3 FF CD AF F6                      .DB 0FFh, 0CDh, 0AFh, 0F6h, 020h, 007h, 03Eh, 043h, 0CDh, 0DAh, 0F6h, 018h, 0F4h, 0FEh, 001h, 0C2h, 0BAh, 0F4h, 0DDh, 0E5h, 0E1h, 001h, 080h, 000h
0163+  1AC7 20 07 3E 43 
0163+  1ACB CD DA F6 18 
0163+  1ACF F4 FE 01 C2 
0163+  1AD3 BA F4 DD E5 
0163+  1AD7 E1 01 80 00 
0164+  1ADB 18 40 FE 02                      .DB 018h, 040h, 0FEh, 002h, 020h, 007h, 062h, 06Bh, 001h, 000h, 004h, 018h, 035h, 0FEh, 004h, 020h, 00Ah, 03Eh, 006h, 0CDh, 0DAh, 0F6h, 0DDh, 034h
0164+  1ADF 20 07 62 6B 
0164+  1AE3 01 00 04 18 
0164+  1AE7 35 FE 04 20 
0164+  1AEB 0A 3E 06 CD 
0164+  1AEF DA F6 DD 34 
0165+  1AF3 F5 18 C6 FE                      .DB 0F5h, 018h, 0C6h, 0FEh, 018h, 020h, 01Eh, 0CDh, 0BAh, 0F6h, 0FEh, 018h, 03Eh, 004h, 020h, 010h, 03Eh, 006h, 0CDh, 0DAh, 0F6h, 0CDh, 0AFh, 0F6h
0165+  1AF7 18 20 1E CD 
0165+  1AFB BA F6 FE 18 
0165+  1AFF 3E 04 20 10 
0165+  1B03 3E 06 CD DA 
0165+  1B07 F6 CD AF F6 
0166+  1B0B 20 FB 3E 03                      .DB 020h, 0FBh, 03Eh, 003h, 0A7h, 0C9h, 03Eh, 005h, 04Fh, 03Eh, 004h, 0A7h, 0C9h, 04Fh, 03Eh, 002h, 0A7h, 0C9h, 0DDh, 077h, 0FBh, 0AFh, 0DDh, 0BEh
0166+  1B0F A7 C9 3E 05 
0166+  1B13 4F 3E 04 A7 
0166+  1B17 C9 4F 3E 02 
0166+  1B1B A7 C9 DD 77 
0166+  1B1F FB AF DD BE 
0167+  1B23 FA 20 07 3E                      .DB 0FAh, 020h, 007h, 03Eh, 001h, 0DDh, 096h, 0FBh, 020h, 0E4h, 0DDh, 077h, 0FFh, 0DDh, 077h, 0FEh, 0CDh, 0BAh, 0F6h, 0DDh, 077h, 0FCh, 0CDh, 0BAh
0167+  1B27 01 DD 96 FB 
0167+  1B2B 20 E4 DD 77 
0167+  1B2F FF DD 77 FE 
0167+  1B33 CD BA F6 DD 
0167+  1B37 77 FC CD BA 
0168+  1B3B F6 DD 77 FD                      .DB 0F6h, 0DDh, 077h, 0FDh, 0CDh, 0BAh, 0F6h, 077h, 0CDh, 07Dh, 0F6h, 0C5h, 001h, 0FFh, 0FFh, 0FDh, 009h, 0C1h, 038h, 003h, 0FDh, 023h, 02Bh, 023h
0168+  1B3F CD BA F6 77 
0168+  1B43 CD 7D F6 C5 
0168+  1B47 01 FF FF FD 
0168+  1B4B 09 C1 38 03 
0168+  1B4F FD 23 2B 23 
0169+  1B53 0B 78 B1 20                      .DB 00Bh, 078h, 0B1h, 020h, 0E7h, 0AFh, 0CDh, 07Dh, 0F6h, 0AFh, 0CDh, 07Dh, 0F6h, 0CDh, 0BAh, 0F6h, 047h, 0CDh, 0BAh, 0F6h, 04Fh, 0DDh, 07Eh, 0FCh
0169+  1B57 E7 AF CD 7D 
0169+  1B5B F6 AF CD 7D 
0169+  1B5F F6 CD BA F6 
0169+  1B63 47 CD BA F6 
0169+  1B67 4F DD 7E FC 
0170+  1B6B 2F DD BE FD                      .DB 02Fh, 0DDh, 0BEh, 0FDh, 03Eh, 001h, 020h, 0A0h, 0DDh, 07Eh, 0FFh, 0B8h, 03Eh, 002h, 020h, 098h, 0DDh, 07Eh, 0FEh, 0B9h, 03Eh, 003h, 020h, 090h
0170+  1B6F 3E 01 20 A0 
0170+  1B73 DD 7E FF B8 
0170+  1B77 3E 02 20 98 
0170+  1B7B DD 7E FE B9 
0170+  1B7F 3E 03 20 90 
0171+  1B83 DD 7E FC DD                      .DB 0DDh, 07Eh, 0FCh, 0DDh, 0BEh, 0FAh, 020h, 03Fh, 0DDh, 034h, 0FAh, 0A7h, 028h, 042h, 0DDh, 07Eh, 0FBh, 0FEh, 001h, 020h, 028h, 0FDh, 0E5h, 0C1h
0171+  1B87 BE FA 20 3F 
0171+  1B8B DD 34 FA A7 
0171+  1B8F 28 42 DD 7E 
0171+  1B93 FB FE 01 20 
0171+  1B97 28 FD E5 C1 
0172+  1B9B 21 80 00 A7                      .DB 021h, 080h, 000h, 0A7h, 0EDh, 042h, 0FDh, 0E5h, 0C1h, 0FDh, 021h, 000h, 000h, 030h, 00Fh, 0FDh, 0E5h, 0E1h, 001h, 080h, 000h, 0A7h, 0EDh, 042h
0172+  1B9F ED 42 FD E5 
0172+  1BA3 C1 FD 21 00 
0172+  1BA7 00 30 0F FD 
0172+  1BAB E5 E1 01 80 
0172+  1BAF 00 A7 ED 42 
0173+  1BB3 E5 FD E1 01                      .DB 0E5h, 0FDh, 0E1h, 001h, 080h, 000h, 0DDh, 0E5h, 0E1h, 0EDh, 0B0h, 062h, 06Bh, 054h, 05Dh, 03Eh, 006h, 0CDh, 0DAh, 0F6h, 0C3h, 0A6h, 0F4h, 0CDh
0173+  1BB7 80 00 DD E5 
0173+  1BBB E1 ED B0 62 
0173+  1BBF 6B 54 5D 3E 
0173+  1BC3 06 CD DA F6 
0173+  1BC7 C3 A6 F4 CD 
0174+  1BCB AF F6 20 FB                      .DB 0AFh, 0F6h, 020h, 0FBh, 03Eh, 015h, 018h, 0F1h, 0DDh, 0E5h, 0E1h, 07Eh, 0A7h, 020h, 009h, 03Eh, 006h, 0CDh, 0DAh, 0F6h, 03Eh, 000h, 0A7h, 0C9h
0174+  1BCF 3E 15 18 F1 
0174+  1BD3 DD E5 E1 7E 
0174+  1BD7 A7 20 09 3E 
0174+  1BDB 06 CD DA F6 
0174+  1BDF 3E 00 A7 C9 
0175+  1BE3 DD 7E F5 A7                      .DB 0DDh, 07Eh, 0F5h, 0A7h, 028h, 004h, 03Eh, 008h, 0A7h, 0C9h, 07Eh, 023h, 0A7h, 028h, 065h, 0FEh, 05Fh, 020h, 0F7h, 07Eh, 04Fh, 023h, 0FEh, 079h
0175+  1BE7 28 04 3E 08 
0175+  1BEB A7 C9 7E 23 
0175+  1BEF A7 28 65 FE 
0175+  1BF3 5F 20 F7 7E 
0175+  1BF7 4F 23 FE 79 
0176+  1BFB 20 07 06 04                      .DB 020h, 007h, 006h, 004h, 011h, 000h, 000h, 018h, 009h, 0FEh, 066h, 020h, 0E7h, 006h, 002h, 011h, 000h, 000h, 07Eh, 023h, 0D6h, 030h, 038h, 03Ch
0176+  1BFF 11 00 00 18 
0176+  1C03 09 FE 66 20 
0176+  1C07 E7 06 02 11 
0176+  1C0B 00 00 7E 23 
0176+  1C0F D6 30 38 3C 
0177+  1C13 FE 0A 38 08                      .DB 0FEh, 00Ah, 038h, 008h, 0D6h, 007h, 038h, 034h, 0FEh, 010h, 030h, 030h, 0E5h, 062h, 06Bh, 029h, 029h, 029h, 029h, 0B5h, 054h, 05Fh, 0E1h, 010h
0177+  1C17 D6 07 38 34 
0177+  1C1B FE 10 30 30 
0177+  1C1F E5 62 6B 29 
0177+  1C23 29 29 29 B5 
0177+  1C27 54 5F E1 10 
0178+  1C2B E1 3E FF DD                      .DB 0E1h, 03Eh, 0FFh, 0DDh, 0BEh, 0F8h, 020h, 0BAh, 0DDh, 0BEh, 0F9h, 020h, 0B5h, 0DDh, 036h, 0F4h, 0FEh, 079h, 0FEh, 066h, 020h, 006h, 0DDh, 073h
0178+  1C2F BE F8 20 BA 
0178+  1C33 DD BE F9 20 
0178+  1C37 B5 DD 36 F4 
0178+  1C3B FE 79 FE 66 
0178+  1C3F 20 06 DD 73 
0179+  1C43 F4 11 00 40                      .DB 0F4h, 011h, 000h, 040h, 0DDh, 073h, 0F8h, 0DDh, 072h, 0F9h, 018h, 09Eh, 0DDh, 05Eh, 0F8h, 0DDh, 056h, 0F9h, 018h, 096h, 03Eh, 0FFh, 0DDh, 0BEh
0179+  1C47 DD 73 F8 DD 
0179+  1C4B 72 F9 18 9E 
0179+  1C4F DD 5E F8 DD 
0179+  1C53 56 F9 18 96 
0179+  1C57 3E FF DD BE 
0180+  1C5B F8 20 09 DD                      .DB 0F8h, 020h, 009h, 0DDh, 0BEh, 0F9h, 020h, 004h, 03Eh, 006h, 0A7h, 0C9h, 044h, 04Dh, 021h, 000h, 000h, 00Ah, 0A7h, 0CAh, 09Fh, 0F5h, 00Ah, 003h
0180+  1C5F BE F9 20 04 
0180+  1C63 3E 06 A7 C9 
0180+  1C67 44 4D 21 00 
0180+  1C6B 00 0A A7 CA 
0180+  1C6F 9F F5 0A 03 
0181+  1C73 A7 28 1A FE                      .DB 0A7h, 028h, 01Ah, 0FEh, 020h, 028h, 016h, 0D6h, 030h, 038h, 01Eh, 0FEh, 00Ah, 030h, 01Ah, 0D5h, 054h, 05Dh, 029h, 029h, 019h, 029h, 05Fh, 016h
0181+  1C77 20 28 16 D6 
0181+  1C7B 30 38 1E FE 
0181+  1C7F 0A 30 1A D5 
0181+  1C83 54 5D 29 29 
0181+  1C87 19 29 5F 16 
0182+  1C8B 00 19 D1 18                      .DB 000h, 019h, 0D1h, 018h, 0E1h, 0E5h, 0FDh, 0E1h, 0DDh, 075h, 0F6h, 0DDh, 074h, 0F7h, 0C3h, 09Fh, 0F5h, 03Eh, 005h, 0A7h, 0C9h, 0E5h, 0C5h, 006h
0182+  1C8F E1 E5 FD E1 
0182+  1C93 DD 75 F6 DD 
0182+  1C97 74 F7 C3 9F 
0182+  1C9B F5 3E 05 A7 
0182+  1C9F C9 E5 C5 06 
0183+  1CA3 01 4F DD 66                      .DB 001h, 04Fh, 0DDh, 066h, 0FFh, 0DDh, 06Eh, 0FEh, 029h, 0F5h, 0CBh, 021h, 0CBh, 010h, 030h, 002h, 0CBh, 0C1h, 0CBh, 040h, 028h, 001h, 023h, 0F1h
0183+  1CA7 FF DD 6E FE 
0183+  1CAB 29 F5 CB 21 
0183+  1CAF CB 10 30 02 
0183+  1CB3 CB C1 CB 40 
0183+  1CB7 28 01 23 F1 
0184+  1CBB 30 08 3E 21                      .DB 030h, 008h, 03Eh, 021h, 0ADh, 06Fh, 03Eh, 010h, 0ACh, 067h, 0CBh, 041h, 028h, 0E2h, 0DDh, 074h, 0FFh, 0DDh, 075h, 0FEh, 0C1h, 0E1h, 0C9h, 021h
0184+  1CBF AD 6F 3E 10 
0184+  1CC3 AC 67 CB 41 
0184+  1CC7 28 E2 DD 74 
0184+  1CCB FF DD 75 FE 
0184+  1CCF C1 E1 C9 21 
0185+  1CD3 B8 F6 E5 CD                      .DB 0B8h, 0F6h, 0E5h, 0CDh, 0BAh, 0F6h, 0E1h, 0C9h, 0AFh, 0C9h, 0C5h, 001h, 050h, 0C3h, 0DBh, 025h, 0CBh, 047h, 020h, 012h, 078h, 006h, 00Ah, 0A7h
0185+  1CD7 BA F6 E1 C9 
0185+  1CDB AF C9 C5 01 
0185+  1CDF 50 C3 DB 25 
0185+  1CE3 CB 47 20 12 
0185+  1CE7 78 06 0A A7 
0186+  1CEB 10 FD 47 0B                      .DB 010h, 0FDh, 047h, 00Bh, 078h, 0B1h, 020h, 0EEh, 0C1h, 0C1h, 03Eh, 001h, 0A7h, 0C9h, 0DBh, 020h, 0C1h, 0C9h, 0C5h, 0F5h, 001h, 050h, 0C3h, 0DBh
0186+  1CEF 78 B1 20 EE 
0186+  1CF3 C1 C1 3E 01 
0186+  1CF7 A7 C9 DB 20 
0186+  1CFB C1 C9 C5 F5 
0186+  1CFF 01 50 C3 DB 
0187+  1D03 25 CB 6F C2                      .DB 025h, 0CBh, 06Fh, 0C2h, 0F3h, 0F6h, 00Bh, 078h, 0B1h, 0C2h, 0DFh, 0F6h, 0F1h, 0C1h, 0C1h, 03Eh, 007h, 0A7h, 0C9h, 0F1h, 0C1h, 0D3h, 020h, 0C9h
0187+  1D07 F3 F6 0B 78 
0187+  1D0B B1 C2 DF F6 
0187+  1D0F F1 C1 C1 3E 
0187+  1D13 07 A7 C9 F1 
0187+  1D17 C1 D3 20 C9 
0188+  1D1B F3 E5 C5 D5                      .DB 0F3h, 0E5h, 0C5h, 0D5h, 0E6h, 07Fh, 057h, 0CBh, 03Ah, 0CBh, 03Ah, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h, 0E6h, 030h, 05Fh, 00Eh, 070h
0188+  1D1F E6 7F 57 CB 
0188+  1D23 3A CB 3A CB 
0188+  1D27 27 CB 27 CB 
0188+  1D2B 27 CB 27 E6 
0188+  1D2F 30 5F 0E 70 
0189+  1D33 3E 01 ED 79                      .DB 03Eh, 001h, 0EDh, 079h, 021h, 055h, 015h, 036h, 0AAh, 03Eh, 000h, 0EDh, 079h, 021h, 0AAh, 02Ah, 036h, 055h, 03Eh, 001h, 0EDh, 079h, 021h, 055h
0189+  1D37 21 55 15 36 
0189+  1D3B AA 3E 00 ED 
0189+  1D3F 79 21 AA 2A 
0189+  1D43 36 55 3E 01 
0189+  1D47 ED 79 21 55 
0190+  1D4B 15 36 80 3E                      .DB 015h, 036h, 080h, 03Eh, 001h, 0EDh, 079h, 021h, 055h, 015h, 036h, 0AAh, 03Eh, 000h, 0EDh, 079h, 021h, 0AAh, 02Ah, 036h, 055h, 0EDh, 051h, 063h
0190+  1D4F 01 ED 79 21 
0190+  1D53 55 15 36 AA 
0190+  1D57 3E 00 ED 79 
0190+  1D5B 21 AA 2A 36 
0190+  1D5F 55 ED 51 63 
0191+  1D63 36 30 7E CB                      .DB 036h, 030h, 07Eh, 0CBh, 007h, 030h, 0FBh, 0D1h, 0C1h, 0E1h, 0FBh, 0C9h, 0F3h, 05Fh, 07Ch, 0E6h, 00Fh, 067h, 07Ah, 0E6h, 07Fh, 057h, 047h, 07Ah
0191+  1D67 07 30 FB D1 
0191+  1D6B C1 E1 FB C9 
0191+  1D6F F3 5F 7C E6 
0191+  1D73 0F 67 7A E6 
0191+  1D77 7F 57 47 7A 
0192+  1D7B E6 03 CB 27                      .DB 0E6h, 003h, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h, 0CBh, 027h, 0B4h, 067h, 0CBh, 03Ah, 0CBh, 03Ah, 0E5h, 00Eh, 070h, 03Eh, 001h, 0EDh, 079h, 021h
0192+  1D7F CB 27 CB 27 
0192+  1D83 CB 27 B4 67 
0192+  1D87 CB 3A CB 3A 
0192+  1D8B E5 0E 70 3E 
0192+  1D8F 01 ED 79 21 
0193+  1D93 55 15 36 AA                      .DB 055h, 015h, 036h, 0AAh, 03Eh, 000h, 0EDh, 079h, 021h, 0AAh, 02Ah, 036h, 055h, 03Eh, 001h, 0EDh, 079h, 021h, 055h, 015h, 036h, 0A0h, 0EDh, 051h
0193+  1D97 3E 00 ED 79 
0193+  1D9B 21 AA 2A 36 
0193+  1D9F 55 3E 01 ED 
0193+  1DA3 79 21 55 15 
0193+  1DA7 36 A0 ED 51 
0194+  1DAB E1 73 7E AB                      .DB 0E1h, 073h, 07Eh, 0ABh, 0CBh, 007h, 030h, 0FAh, 07Ch, 0E6h, 00Fh, 067h, 050h, 0FBh, 0C9h, 0DDh, 0E5h, 0E5h, 0DDh, 0E1h, 021h, 000h, 000h, 07Ah
0194+  1DAF CB 07 30 FA 
0194+  1DB3 7C E6 0F 67 
0194+  1DB7 50 FB C9 DD 
0194+  1DBB E5 E5 DD E1 
0194+  1DBF 21 00 00 7A 
0195+  1DC3 CD F8 F6 DD                      .DB 0CDh, 0F8h, 0F6h, 0DDh, 07Eh, 000h, 0C5h, 0CDh, 04Ch, 0F7h, 0C1h, 0DDh, 023h, 00Bh, 078h, 0B1h, 028h, 00Eh, 023h, 07Dh, 0A7h, 020h, 0ECh, 07Ch
0195+  1DC7 7E 00 C5 CD 
0195+  1DCB 4C F7 C1 DD 
0195+  1DCF 23 0B 78 B1 
0195+  1DD3 28 0E 23 7D 
0195+  1DD7 A7 20 EC 7C 
0196+  1DDB E6 0F 67 20                      .DB 0E6h, 00Fh, 067h, 020h, 0E6h, 014h, 018h, 0DFh, 0DDh, 0E1h, 0C9h, 07Ah, 032h, 06Bh, 0F8h, 01Eh, 000h, 043h, 00Eh, 07Ch, 0E5h, 021h, 081h, 0F9h
0196+  1DDF E6 14 18 DF 
0196+  1DE3 DD E1 C9 7A 
0196+  1DE7 32 6B F8 1E 
0196+  1DEB 00 43 0E 7C 
0196+  1DEF E5 21 81 F9 
0197+  1DF3 ED B0 E1 DB                      .DB 0EDh, 0B0h, 0E1h, 0DBh, 024h, 0E6h, 0F7h, 032h, 021h, 0F9h, 032h, 0DDh, 0F8h, 0F6h, 008h, 032h, 016h, 0F9h, 0F3h, 07Eh, 023h, 032h, 079h, 0F8h
0197+  1DF7 24 E6 F7 32 
0197+  1DFB 21 F9 32 DD 
0197+  1DFF F8 F6 08 32 
0197+  1E03 16 F9 F3 7E 
0197+  1E07 23 32 79 F8 
0198+  1E0B 7E 23 32 8E                      .DB 07Eh, 023h, 032h, 08Eh, 0F8h, 07Eh, 023h, 032h, 0A5h, 0F8h, 07Eh, 023h, 032h, 0BCh, 0F8h, 022h, 02Dh, 0F8h, 021h, 000h, 000h, 022h, 0EEh, 0F8h
0198+  1E0F F8 7E 23 32 
0198+  1E13 A5 F8 7E 23 
0198+  1E17 32 BC F8 22 
0198+  1E1B 2D F8 21 00 
0198+  1E1F 00 22 EE F8 
0199+  1E23 22 8B F8 22                      .DB 022h, 08Bh, 0F8h, 022h, 0A1h, 0F8h, 022h, 0B8h, 0F8h, 07Dh, 032h, 0FAh, 0F8h, 032h, 0FFh, 0F8h, 032h, 007h, 0F9h, 032h, 00Fh, 0F9h, 032h, 02Eh
0199+  1E27 A1 F8 22 B8 
0199+  1E2B F8 7D 32 FA 
0199+  1E2F F8 32 FF F8 
0199+  1E33 32 07 F9 32 
0199+  1E37 0F F9 32 2E 
0200+  1E3B F9 D9 E5 FD                      .DB 0F9h, 0D9h, 0E5h, 0FDh, 0E5h, 0EDh, 073h, 079h, 0F9h, 018h, 009h, 011h, 000h, 000h, 01Ah, 0FEh, 080h, 0C2h, 06Ah, 0F8h, 021h, 000h, 000h, 05Eh
0200+  1E3F E5 ED 73 79 
0200+  1E43 F9 18 09 11 
0200+  1E47 00 00 1A FE 
0200+  1E4B 80 C2 6A F8 
0200+  1E4F 21 00 00 5E 
0201+  1E53 23 56 23 7A                      .DB 023h, 056h, 023h, 07Ah, 0B3h, 028h, 029h, 022h, 02Dh, 0F8h, 01Ah, 0CBh, 027h, 032h, 066h, 0F9h, 013h, 01Ah, 0CBh, 03Fh, 032h, 031h, 0F9h, 013h
0201+  1E57 B3 28 29 22 
0201+  1E5B 2D F8 1A CB 
0201+  1E5F 27 32 66 F9 
0201+  1E63 13 1A CB 3F 
0201+  1E67 32 31 F9 13 
0202+  1E6B 1A CB 3F 32                      .DB 01Ah, 0CBh, 03Fh, 032h, 03Dh, 0F9h, 013h, 01Ah, 0CBh, 03Fh, 032h, 049h, 0F9h, 013h, 01Ah, 0CBh, 03Fh, 032h, 055h, 0F9h, 013h, 0C3h, 026h, 0F8h
0202+  1E6F 3D F9 13 1A 
0202+  1E73 CB 3F 32 49 
0202+  1E77 F9 13 1A CB 
0202+  1E7B 3F 32 55 F9 
0202+  1E7F 13 C3 26 F8 
0203+  1E83 5E 23 56 ED                      .DB 05Eh, 023h, 056h, 0EDh, 053h, 02Dh, 0F8h, 0C3h, 02Ch, 0F8h, 026h, 000h, 013h, 0B7h, 028h, 00Dh, 06Fh, 04Eh, 02Ch, 046h, 0EDh, 043h, 0EEh, 0F8h
0203+  1E87 53 2D F8 C3 
0203+  1E8B 2C F8 26 00 
0203+  1E8F 13 B7 28 0D 
0203+  1E93 6F 4E 2C 46 
0203+  1E97 ED 43 EE F8 
0204+  1E9B 3E 10 32 FA                      .DB 03Eh, 010h, 032h, 0FAh, 0F8h, 01Ah, 013h, 0B7h, 028h, 010h, 06Fh, 04Eh, 02Ch, 046h, 0EDh, 043h, 08Bh, 0F8h, 031h, 000h, 000h, 03Eh, 010h, 032h
0204+  1E9F F8 1A 13 B7 
0204+  1EA3 28 10 6F 4E 
0204+  1EA7 2C 46 ED 43 
0204+  1EAB 8B F8 31 00 
0204+  1EAF 00 3E 10 32 
0205+  1EB3 FF F8 1A 13                      .DB 0FFh, 0F8h, 01Ah, 013h, 0B7h, 028h, 012h, 06Fh, 04Eh, 02Ch, 046h, 0EDh, 043h, 0A1h, 0F8h, 0D9h, 011h, 000h, 000h, 0D9h, 03Eh, 010h, 032h, 007h
0205+  1EB7 B7 28 12 6F 
0205+  1EBB 4E 2C 46 ED 
0205+  1EBF 43 A1 F8 D9 
0205+  1EC3 11 00 00 D9 
0205+  1EC7 3E 10 32 07 
0206+  1ECB F9 1A 13 B7                      .DB 0F9h, 01Ah, 013h, 0B7h, 028h, 012h, 06Fh, 04Eh, 02Ch, 046h, 0EDh, 043h, 0B8h, 0F8h, 0D9h, 001h, 000h, 000h, 0D9h, 03Eh, 010h, 032h, 00Fh, 0F9h
0206+  1ECF 28 12 6F 4E 
0206+  1ED3 2C 46 ED 43 
0206+  1ED7 B8 F8 D9 01 
0206+  1EDB 00 00 D9 3E 
0206+  1EDF 10 32 0F F9 
0207+  1EE3 ED 53 24 F8                      .DB 0EDh, 053h, 024h, 0F8h, 01Ah, 0FEh, 081h, 038h, 023h, 013h, 0EDh, 053h, 024h, 0F8h, 006h, 080h, 090h, 087h, 04Fh, 05Fh, 06Fh, 067h, 00Dh, 020h
0207+  1EE7 1A FE 81 38 
0207+  1EEB 23 13 ED 53 
0207+  1EEF 24 F8 06 80 
0207+  1EF3 90 87 4F 5F 
0207+  1EF7 6F 67 0D 20 
0208+  1EFB 07 4B E6 10                      .DB 007h, 04Bh, 0E6h, 010h, 0F6h, 000h, 0D3h, 011h, 07Dh, 0C6h, 00Bh, 0ACh, 06Fh, 07Ch, 0C6h, 00Ch, 0ADh, 067h, 010h, 0EAh, 0AFh, 011h, 000h, 000h
0208+  1EFF F6 00 D3 11 
0208+  1F03 7D C6 0B AC 
0208+  1F07 6F 7C C6 0C 
0208+  1F0B AD 67 10 EA 
0208+  1F0F AF 11 00 00 
0209+  1F13 08 21 00 00                      .DB 008h, 021h, 000h, 000h, 00Eh, 040h, 0DDh, 019h, 09Fh, 0E6h, 000h, 047h, 039h, 09Fh, 0E6h, 000h, 0B0h, 047h, 0D9h, 0FDh, 019h, 09Fh, 0E6h, 000h
0209+  1F17 0E 40 DD 19 
0209+  1F1B 9F E6 00 47 
0209+  1F1F 39 9F E6 00 
0209+  1F23 B0 47 D9 FD 
0209+  1F27 19 9F E6 00 
0210+  1F2B D9 B0 47 D9                      .DB 0D9h, 0B0h, 047h, 0D9h, 009h, 09Fh, 0E6h, 000h, 0D9h, 0B0h, 028h, 009h, 047h, 03Eh, 008h, 0D3h, 024h, 078h, 010h, 0FEh, 02Fh, 0C6h, 011h, 047h
0210+  1F2F 09 9F E6 00 
0210+  1F33 D9 B0 28 09 
0210+  1F37 47 3E 08 D3 
0210+  1F3B 24 78 10 FE 
0210+  1F3F 2F C6 11 47 
0211+  1F43 3E 00 D3 24                      .DB 03Eh, 000h, 0D3h, 024h, 010h, 0FEh, 00Dh, 0C2h, 0F6h, 0F8h, 022h, 0F2h, 0F8h, 03Eh, 000h, 04Fh, 0E6h, 000h, 020h, 007h, 021h, 0FAh, 0F8h, 0B6h
0211+  1F47 10 FE 0D C2 
0211+  1F4B F6 F8 22 F2 
0211+  1F4F F8 3E 00 4F 
0211+  1F53 E6 00 20 07 
0211+  1F57 21 FA F8 B6 
0212+  1F5B 28 01 35 79                      .DB 028h, 001h, 035h, 079h, 0E6h, 000h, 020h, 007h, 021h, 0FFh, 0F8h, 0B6h, 028h, 001h, 035h, 079h, 0E6h, 000h, 020h, 007h, 021h, 007h, 0F9h, 0B6h
0212+  1F5F E6 00 20 07 
0212+  1F63 21 FF F8 B6 
0212+  1F67 28 01 35 79 
0212+  1F6B E6 00 20 07 
0212+  1F6F 21 07 F9 B6 
0213+  1F73 28 01 35 79                      .DB 028h, 001h, 035h, 079h, 0E6h, 000h, 020h, 007h, 021h, 00Fh, 0F9h, 0B6h, 028h, 001h, 035h, 021h, 02Eh, 0F9h, 034h, 008h, 03Ch, 0FEh, 014h, 0DAh
0213+  1F77 E6 00 20 07 
0213+  1F7B 21 0F F9 B6 
0213+  1F7F 28 01 35 21 
0213+  1F83 2E F9 34 08 
0213+  1F87 3C FE 14 DA 
0214+  1F8B F0 F8 01 00                      .DB 0F0h, 0F8h, 001h, 000h, 000h, 0EDh, 078h, 0E6h, 03Fh, 0FEh, 03Fh, 020h, 003h, 0C3h, 023h, 0F8h, 031h, 000h, 000h, 0FDh, 0E1h, 0E1h, 0D9h, 0FBh
0214+  1F8F 00 ED 78 E6 
0214+  1F93 3F FE 3F 20 
0214+  1F97 03 C3 23 F8 
0214+  1F9B 31 00 00 FD 
0214+  1F9F E1 E1 D9 FB 
0215+  1FA3 C9 00 00 6C                      .DB 0C9h, 000h, 000h, 06Ch, 000h, 072h, 000h, 079h, 000h, 080h, 000h, 088h, 000h, 090h, 000h, 099h, 000h, 0A2h, 000h, 0ABh, 000h, 0B6h, 000h, 0C0h
0215+  1FA7 00 72 00 79 
0215+  1FAB 00 80 00 88 
0215+  1FAF 00 90 00 99 
0215+  1FB3 00 A2 00 AB 
0215+  1FB7 00 B6 00 C0 
0216+  1FBB 00 CC 00 D8                      .DB 000h, 0CCh, 000h, 0D8h, 000h, 0E5h, 000h, 0F2h, 000h, 001h, 001h, 010h, 001h, 020h, 001h, 032h, 001h, 044h, 001h, 057h, 001h, 06Ch, 001h, 081h
0216+  1FBF 00 E5 00 F2 
0216+  1FC3 00 01 01 10 
0216+  1FC7 01 20 01 32 
0216+  1FCB 01 44 01 57 
0216+  1FCF 01 6C 01 81 
0217+  1FD3 01 98 01 B0                      .DB 001h, 098h, 001h, 0B0h, 001h, 0CAh, 001h, 0E5h, 001h, 002h, 002h, 021h, 002h, 041h, 002h, 064h, 002h, 088h, 002h, 0AFh, 002h, 0D8h, 002h, 003h
0217+  1FD7 01 CA 01 E5 
0217+  1FDB 01 02 02 21 
0217+  1FDF 02 41 02 64 
0217+  1FE3 02 88 02 AF 
0217+  1FE7 02 D8 02 03 
0218+  1FEB 03 31 03 61                      .DB 003h, 031h, 003h, 061h, 003h, 095h, 003h, 0CBh, 003h, 005h, 004h, 042h, 004h, 083h, 004h, 0C8h, 004h, 011h, 005h, 05Eh, 005h, 0B0h, 005h, 006h
0218+  1FEF 03 95 03 CB 
0218+  1FF3 03 05 04 42 
0218+  1FF7 04 83 04 C8 
0218+  1FFB 04 11 05 5E 
0218+  1FFF 05 B0 05 06 
0219+  2003 06 62 06 C3                      .DB 006h, 062h, 006h, 0C3h, 006h, 02Ah, 007h, 097h, 007h, 00Bh, 008h, 085h, 008h, 007h, 009h, 091h, 009h, 022h, 00Ah, 0BCh, 00Ah, 060h, 00Bh, 00Dh
0219+  2007 06 2A 07 97 
0219+  200B 07 0B 08 85 
0219+  200F 08 07 09 91 
0219+  2013 09 22 0A BC 
0219+  2017 0A 60 0B 0D 
0220+  201B 0C C5 0C 00                      .DB 00Ch, 0C5h, 00Ch, 000h, 000h, 00Fh, 00Ch, 008h, 00Ch, 09Fh, 0FAh, 00Dh, 0FAh, 00Dh, 0FAh, 0F3h, 0FAh, 000h, 000h, 003h, 0FAh, 011h, 003h, 001h
0220+  201F 00 0F 0C 08 
0220+  2023 0C 9F FA 0D 
0220+  2027 FA 0D FA F3 
0220+  202B FA 00 00 03 
0220+  202F FA 11 03 01 
0221+  2033 0F 0F 32 00                      .DB 00Fh, 00Fh, 032h, 000h, 000h, 07Ah, 081h, 000h, 000h, 000h, 000h, 052h, 04Ah, 000h, 000h, 052h, 04Ah, 000h, 000h, 040h, 000h, 07Ah, 062h, 082h
0221+  2037 00 7A 81 00 
0221+  203B 00 00 00 52 
0221+  203F 4A 00 00 52 
0221+  2043 4A 00 00 40 
0221+  2047 00 7A 62 82 
0222+  204B 52 4A 00 00                      .DB 052h, 04Ah, 000h, 000h, 052h, 04Ah, 000h, 000h, 052h, 04Ah, 000h, 066h, 032h, 000h, 062h, 000h, 081h, 000h, 000h, 000h, 07Ah, 052h, 04Ah, 000h
0222+  204F 52 4A 00 00 
0222+  2053 52 4A 00 66 
0222+  2057 32 00 62 00 
0222+  205B 81 00 00 00 
0222+  205F 7A 52 4A 00 
0223+  2063 66 81 52 4A                      .DB 066h, 081h, 052h, 04Ah, 066h, 062h, 040h, 000h, 000h, 000h, 082h, 052h, 04Ah, 07Ah, 000h, 03Ch, 04Ah, 066h, 060h, 052h, 04Ah, 062h, 000h, 032h
0223+  2067 66 62 40 00 
0223+  206B 00 00 82 52 
0223+  206F 4A 7A 00 3C 
0223+  2073 4A 66 60 52 
0223+  2077 4A 62 00 32 
0224+  207B 00 00 7A 81                      .DB 000h, 000h, 07Ah, 081h, 000h, 000h, 000h, 000h, 052h, 04Ah, 060h, 000h, 081h, 052h, 04Ah, 000h, 000h, 040h, 000h, 07Ah, 062h, 082h, 052h, 04Ah
0224+  207F 00 00 00 00 
0224+  2083 52 4A 60 00 
0224+  2087 81 52 4A 00 
0224+  208B 00 40 00 7A 
0224+  208F 62 82 52 4A 
0225+  2093 00 00 52 4A                      .DB 000h, 000h, 052h, 04Ah, 000h, 000h, 052h, 04Ah, 000h, 066h, 082h, 032h, 000h, 062h, 000h, 081h, 000h, 000h, 000h, 07Ah, 040h, 04Ah, 000h, 066h
0225+  2097 00 00 52 4A 
0225+  209B 00 66 82 32 
0225+  209F 00 62 00 81 
0225+  20A3 00 00 00 7A 
0225+  20A7 40 4A 00 66 
0226+  20AB 81 52 4A 66                      .DB 081h, 052h, 04Ah, 066h, 06Ah, 03Ch, 000h, 000h, 000h, 082h, 052h, 04Ah, 07Ah, 000h, 03Ah, 04Ah, 066h, 06Ch, 052h, 04Ah, 06Ah, 000h, 080h, 011h
0226+  20AF 6A 3C 00 00 
0226+  20B3 00 82 52 4A 
0226+  20B7 7A 00 3A 4A 
0226+  20BB 66 6C 52 4A 
0226+  20BF 6A 00 80 11 
0227+  20C3 01 01 01 01                      .DB 001h, 001h, 001h, 001h, 062h, 000h, 000h, 000h, 081h, 04Ah, 000h, 000h, 000h, 082h, 062h, 000h, 000h, 000h, 081h, 04Ah, 000h, 000h, 000h, 082h
0227+  20C7 62 00 00 00 
0227+  20CB 81 4A 00 00 
0227+  20CF 00 82 62 00 
0227+  20D3 00 00 81 4A 
0227+  20D7 00 00 00 82 
0228+  20DB 58 62 00 00                      .DB 058h, 062h, 000h, 000h, 083h, 040h, 04Ah, 000h, 000h, 084h, 058h, 062h, 000h, 000h, 083h, 040h, 04Ah, 000h, 000h, 084h, 04Ah, 058h, 000h, 000h
0228+  20DF 83 40 4A 00 
0228+  20E3 00 84 58 62 
0228+  20E7 00 00 83 40 
0228+  20EB 4A 00 00 84 
0228+  20EF 4A 58 00 00 
0229+  20F3 85 32 40 00                      .DB 085h, 032h, 040h, 000h, 000h, 086h, 04Ah, 058h, 000h, 000h, 085h, 032h, 040h, 000h, 000h, 086h, 040h, 04Ah, 000h, 000h, 087h, 000h, 032h, 000h
0229+  20F7 00 86 4A 58 
0229+  20FB 00 00 85 32 
0229+  20FF 40 00 00 86 
0229+  2103 40 4A 00 00 
0229+  2107 87 00 32 00 
0230+  210B 00 00 4A 00                      .DB 000h, 000h, 04Ah, 000h, 000h, 087h, 000h, 032h, 000h, 000h, 080h, 011h, 003h, 001h, 00Fh, 00Fh, 028h, 000h, 000h, 07Ah, 081h, 000h, 000h, 000h
0230+  210F 00 87 00 32 
0230+  2113 00 00 80 11 
0230+  2117 03 01 0F 0F 
0230+  211B 28 00 00 7A 
0230+  211F 81 00 00 00 
0231+  2123 00 48 40 00                      .DB 000h, 048h, 040h, 000h, 000h, 048h, 040h, 000h, 000h, 036h, 000h, 07Ah, 062h, 082h, 048h, 040h, 000h, 000h, 048h, 040h, 000h, 000h, 048h, 040h
0231+  2127 00 48 40 00 
0231+  212B 00 36 00 7A 
0231+  212F 62 82 48 40 
0231+  2133 00 00 48 40 
0231+  2137 00 00 48 40 
0232+  213B 00 66 28 00                      .DB 000h, 066h, 028h, 000h, 062h, 000h, 081h, 000h, 000h, 000h, 07Ah, 048h, 040h, 000h, 066h, 081h, 048h, 040h, 066h, 062h, 036h, 000h, 000h, 000h
0232+  213F 62 00 81 00 
0232+  2143 00 00 7A 48 
0232+  2147 40 00 66 81 
0232+  214B 48 40 66 62 
0232+  214F 36 00 00 00 
0233+  2153 82 48 40 7A                      .DB 082h, 048h, 040h, 07Ah, 000h, 032h, 040h, 066h, 060h, 048h, 040h, 062h, 000h, 028h, 000h, 000h, 07Ah, 081h, 000h, 000h, 000h, 000h, 048h, 040h
0233+  2157 00 32 40 66 
0233+  215B 60 48 40 62 
0233+  215F 00 28 00 00 
0233+  2163 7A 81 00 00 
0233+  2167 00 00 48 40 
0234+  216B 60 00 81 48                      .DB 060h, 000h, 081h, 048h, 040h, 000h, 000h, 036h, 000h, 07Ah, 062h, 082h, 048h, 040h, 000h, 000h, 048h, 040h, 000h, 000h, 048h, 040h, 000h, 066h
0234+  216F 40 00 00 36 
0234+  2173 00 7A 62 82 
0234+  2177 48 40 00 00 
0234+  217B 48 40 00 00 
0234+  217F 48 40 00 66 
0235+  2183 82 28 00 62                      .DB 082h, 028h, 000h, 062h, 000h, 081h, 000h, 000h, 000h, 07Ah, 036h, 040h, 000h, 066h, 081h, 048h, 040h, 066h, 06Ah, 032h, 000h, 000h, 000h, 082h
0235+  2187 00 81 00 00 
0235+  218B 00 7A 36 40 
0235+  218F 00 66 81 48 
0235+  2193 40 66 6A 32 
0235+  2197 00 00 00 82 
0236+  219B 48 40 7A 00                      .DB 048h, 040h, 07Ah, 000h, 030h, 040h, 066h, 06Ch, 048h, 040h, 06Ah, 000h, 02Ch, 000h, 000h, 07Ah, 081h, 000h, 000h, 000h, 000h, 04Ah, 044h, 06Ch
0236+  219F 30 40 66 6C 
0236+  21A3 48 40 6A 00 
0236+  21A7 2C 00 00 7A 
0236+  21AB 81 00 00 00 
0236+  21AF 00 4A 44 6C 
0237+  21B3 00 4A 44 00                      .DB 000h, 04Ah, 044h, 000h, 000h, 03Ah, 000h, 07Ah, 062h, 082h, 04Ah, 044h, 000h, 000h, 04Ah, 044h, 000h, 000h, 04Ah, 044h, 000h, 066h, 02Ch, 000h
0237+  21B7 00 3A 00 7A 
0237+  21BB 62 82 4A 44 
0237+  21BF 00 00 4A 44 
0237+  21C3 00 00 4A 44 
0237+  21C7 00 66 2C 00 
0238+  21CB 62 00 81 00                      .DB 062h, 000h, 081h, 000h, 000h, 000h, 07Ah, 04Ah, 044h, 000h, 066h, 081h, 04Ah, 044h, 066h, 062h, 03Ah, 000h, 000h, 000h, 082h, 04Ah, 044h, 07Ah
0238+  21CF 00 00 7A 4A 
0238+  21D3 44 00 66 81 
0238+  21D7 4A 44 66 62 
0238+  21DB 3A 00 00 00 
0238+  21DF 82 4A 44 7A 
0239+  21E3 00 36 44 66                      .DB 000h, 036h, 044h, 066h, 060h, 04Ah, 044h, 062h, 000h, 02Ch, 000h, 000h, 07Ah, 081h, 000h, 000h, 000h, 000h, 04Ah, 044h, 060h, 000h, 081h, 04Ah
0239+  21E7 60 4A 44 62 
0239+  21EB 00 2C 00 00 
0239+  21EF 7A 81 00 00 
0239+  21F3 00 00 4A 44 
0239+  21F7 60 00 81 4A 
0240+  21FB 44 00 00 3A                      .DB 044h, 000h, 000h, 03Ah, 000h, 07Ah, 062h, 082h, 04Ah, 044h, 000h, 000h, 04Ah, 044h, 000h, 000h, 04Ah, 044h, 000h, 066h, 082h, 02Ch, 000h, 062h
0240+  21FF 00 7A 62 82 
0240+  2203 4A 44 00 00 
0240+  2207 4A 44 00 00 
0240+  220B 4A 44 00 66 
0240+  220F 82 2C 00 62 
0241+  2213 00 81 00 00                      .DB 000h, 081h, 000h, 000h, 000h, 07Ah, 04Ah, 044h, 000h, 066h, 081h, 04Ah, 044h, 066h, 06Ah, 000h, 000h, 000h, 000h, 082h, 000h, 000h, 07Ah, 000h
0241+  2217 00 7A 4A 44 
0241+  221B 00 66 81 4A 
0241+  221F 44 66 6A 00 
0241+  2223 00 00 00 82 
0241+  2227 00 00 7A 00 
0242+  222B 00 00 66 6C                      .DB 000h, 000h, 066h, 06Ch, 000h, 000h, 06Ah, 000h, 080h
0242+  222F 00 00 6A 00 
0242+  2233 80 
0164   2234             .END
tasm: Number of errors = 0
